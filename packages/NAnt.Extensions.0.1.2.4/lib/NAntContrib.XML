<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NAntContrib</name>
    </assembly>
    <members>
        <member name="T:NAnt.Contrib.Functions.FileFunctions">
            <summary>
            Groups a set of functions for dealing with files.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Functions.FileFunctions.GetChecksum(System.String,System.String)">
            <summary>
            Calculates a checksum for a given file and returns it in a hex
            string.
            </summary>
            <param name="path">The file for which to calculate a checksum.</param>
            <param name="algorithm">The name of hash algorithm to use.</param>
            <returns>
            The hex-formatted checksum of the specified file.
            </returns>
            <exception cref="T:System.IO.IOException">The specified file does not exist.</exception>
            <exception cref="T:System.ArgumentException">
            <para>
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters.
            </para>
            <para>-or-</para>
            <para>
            <paramref name="algorithm"/> is not a valid name of a hash algorithm.
            </para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException">The <paramref name="path"/> parameter is in an invalid format.</exception>
            <example>
              <para>
              Displays the MD5 checksum of a file.
              </para>
              <code>
                <![CDATA[
            <echo>Checksum=${file::get-checksum('Cegeka.exe', 'MD5')}"></echo>
                ]]>
              </code>
            </example>
        </member>
        <member name="T:NAnt.Contrib.Functions.FileSetFunctions">
            <summary>
            Provides methods for interrogating Filesets.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Functions.FileSetFunctions.GetFileCount(System.String)">
            <summary>
            Determines the number of files within a <see cref="T:NAnt.Core.Types.FileSet"/>.
            </summary>
            <param name="fileset">The id of the FileSet to scan.</param>
            <returns>The number of files included in the FileSet</returns>
            <exception cref="T:System.ArgumentException"><paramref name="fileset"/> is not a valid refid to a defined fileset.</exception>
            <example>
              <para>
              Define a fileset and check the number of files in it.
              </para>
              <code>
                <![CDATA[
            <fileset id="test.fileset">
                <include name="**/*.cs">
            </fileset>
            <echo message="FileSet contains ${fileset::get-file-count('test.fileset')} files." />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Functions.FileSetFunctions.HasFiles(System.String)">
            <summary>
            Determines whether <see cref="T:NAnt.Core.Types.FileSet"/> contains any files.
            </summary>
            <param name="fileset">The id of the fileset to check.</param>
            <returns><see langword="true"/> if the FileSet contains one or more files, otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="fileset"/> is not a valid refid to a defined fileset.</exception>
            <example>
              <para>
              Perform conditional processing on a fileset if it contains files.
              </para>
              <code>
                <![CDATA[
            <fileset id="test.fileset">
                <include name="**/*.cs">
            </fileset>
            <if test="${fileset::has-files('test.fileset')}">
                <dostuff... />
            </if>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Functions.FileSetFunctions.ToString(System.String,System.String)">
            <summary>
            Returns a delimited string of all the filenames within a <see cref="T:NAnt.Core.Types.FileSet"/> with each filename
            separated by the specified delimiter string.
            </summary>
            <param name="fileset">The id of the fileset to check.</param>
            <param name="delimiter">String to separate filenames with.</param>
            <returns>A delimited string of the filenames within the specified FileSet.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="fileset"/> is not a valid refid to a defined fileset.</exception>
            <example>
              <para>
              Displays a space-pipe-space separated string fo the files within a defined FileSet.
              </para>
              <code>
                <![CDATA[
            <fileset id="test.fileset">
                <include name="**/*.cs">
            </fileset>
            <echo message="${fileset::to-string('test.fileset', ' | ')}">
                ]]>
              </code>
            </example>
        </member>
        <member name="T:NAnt.Contrib.Functions.MsiFunctions">
            <summary>
            Allows information on Windows Installer databases and products to be
            retrieved.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Functions.MsiFunctions.GetProductCode(System.String)">
            <summary>
            Returns the product code of the specified Windows Installer
            database.
            </summary>
            <param name="databasePath">The path of the Windows Installer database.</param>
            <returns>
            The product code of the specified Windows Installer database.
            </returns>
            <exception cref="T:System.IO.FileNotFoundException">The specified installer database does not exist.</exception>
            <exception cref="T:System.ArgumentException">
              <para>
              The installer database could not be opened.
              </para>
              <para>-or-</para>
              <para>
              The product code property is not available in the installer
              database.
              </para>
            </exception>
            <example>
              <para>
              Retrieves the product code of a given installer database, and
              fails the build if the product is not installed.
              </para>
              <code>
                <![CDATA[
            <property name="office.productcode" value=${msi::get-product-code('Office.msi')}" />
            <fail unless="${msi::is-installed(office.productcode)}">Please install Office first.</fail>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Functions.MsiFunctions.IsInstalled(System.String)">
            <summary>
            Returns a value indicating whether a product with the specified
            <c>product code</c> is installed.
            </summary>
            <param name="productCode">The product code of the product to check.</param>
            <returns>
            <see langword="true" /> if a product with the specified product
            code is installed; otherwise, <see langword="false" />.
            </returns>
            <example>
              <para>
              Retrieves the product code of a given installer database, and
              fails the build if the product is not installed.
              </para>
              <code>
                <![CDATA[
            <property name="office.productcode" value=${msi::get-product-code('Office.msi')}" />
            <fail unless="${msi::is-installed(office.productcode)}">Please install Office first.</fail>
                ]]>
              </code>
            </example>
        </member>
        <member name="T:NAnt.Contrib.Functions.ServiceFunctions">
            <summary>
            Allow information on a Windows service to be retrieved.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Functions.ServiceFunctions.IsInstalled(System.String,System.String)">
            <summary>
            Returns a value indicating whether the specified service is 
            installed on a given machine.
            </summary>
            <param name="service">The short name that identifies the service to the system.</param>
            <param name="machineName">The computer on which the service resides.</param>
            <returns>
            <see langword="true"/> if the service is installed; otherwise,
            <see langword="false"/>.
            </returns>
            <remarks>
            For the machineName parameter, you can use "." or a zero-length
            <see cref="T:System.String"/> to represent the local computer.
            </remarks>
            <example>
              <para>
              The following example starts the "World Wide Web Publishing"
              service if it's installed on the local computer.
              </para>
              <code>
                <![CDATA[
            <if test="${service::is-installed('World Wide Web Publishing', '.')}">
                <servicecontroller action="Start" service="World Wide Web Publishing" />
            </if>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Functions.ServiceFunctions.IsRunning(System.String,System.String)">
            <summary>
            Returns a value indicating whether the specified service is running.
            </summary>
            <param name="service">The short name that identifies the service to the system.</param>
            <param name="machineName">The computer on which the service resides.</param>
            <returns>
            <see langword="true"/> if the service is running; otherwise,
            <see langword="false"/>.
            </returns>
            <remarks>
            For the machineName parameter, you can use "." or a zero-length
            <see cref="T:System.String"/> to represent the local computer.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Functions.ServiceFunctions.IsStopped(System.String,System.String)">
            <summary>
            Returns a value indicating whether the specified service is stopped.
            </summary>
            <param name="service">The short name that identifies the service to the system.</param>
            <param name="machineName">The computer on which the service resides.</param>
            <returns>
            <see langword="true"/> if the service is stopped; otherwise,
            <see langword="false"/>.
            </returns>
            <remarks>
            For the machineName parameter, you can use "." or a zero-length
            <see cref="T:System.String"/> to represent the local computer.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Functions.ServiceFunctions.IsPaused(System.String,System.String)">
            <summary>
            Returns a value indicating whether the specified service is paused.
            </summary>
            <param name="service">The short name that identifies the service to the system.</param>
            <param name="machineName">The computer on which the service resides.</param>
            <returns>
            <see langword="true"/> if the service is paused; otherwise,
            <see langword="false"/>.
            </returns>
            <remarks>
            For the machineName parameter, you can use "." or a zero-length
            <see cref="T:System.String"/> to represent the local computer.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Functions.ServiceFunctions.GetStatus(System.String,System.String)">
            <summary>
            Gets the status of the specified service.
            </summary>
            <param name="service">The short name that identifies the service to the system.</param>
            <param name="machineName">The computer on which the service resides.</param>
            <returns>
            One of the <see cref="T:System.ServiceProcess.ServiceControllerStatus"/> values that
            indicates whether the service is running, stopped, or paused, or
            whether a start, stop, pause, or continue command is pending.
            </returns>
            <remarks>
              <para>
              For the machineName parameter, you can use "." or a zero-length
              <see cref="T:System.String"/> to represent the local computer.
              </para>
              <para>
              The value returned by <see cref="M:NAnt.Contrib.Functions.ServiceFunctions.GetStatus(System.String,System.String)"/> can be compared 
              to either a corresponding enum field name or the underlying
              integral value.
              </para>
            </remarks>
            <example>
              <para>
              Displays a warning if the <b>Alerter</b> service is stopping
              on <c>SV-ARD-EAI1</c>.
              </para>
              <code>
                <![CDATA[
            <if test="${service::get-status('Alerter', 'SV-ARD-EAI1') == 'StopPending'}">
                <echo level="Warning">The Alerter service is stopping.</echo>
            </if>
                ]]>
              </code>
            </example>
            <example>
              <para>
              The "deploy-web-application" target is only executed if
              IIS is running on the local computer.
              </para>
              <code>
                <![CDATA[
            <target name="deploy" depends="deploy-sql-scripts, deploy-web-application" />
            
            <target name="deploy-sql-scripts">
                ...
            </target>
            
            <target name="deploy-web-application" if="$(service::get-status('World Wide Web Publishing', '.') == 4)}">
                ...
            </target>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Functions.ServiceFunctions.GetDisplayName(System.String,System.String)">
            <summary>
            Gets the friendly name of the specified service.
            </summary>
            <param name="service">The short name that identifies the service to the system.</param>
            <param name="machineName">The computer on which the service resides.</param>
            <returns>
            The friendly name of the service, which can be used to identify the service.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Functions.ServiceFunctions.GetServiceName(System.String,System.String)">
            <summary>
            Gets the name that identifies the specified service 
            </summary>
            <param name="service">The short name that identifies the service to the system.</param>
            <param name="machineName">The computer on which the service resides.</param>
            <returns>
            The name that identifies the service.
            </returns>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ADSIBaseTask">
            <summary>
            Base NAnt task for working with ADSI.  This task contains only the path of the ADSI
            object that you want to work with.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ADSIBaseTask.Path">
            <summary>
            The ADSI path of the location where we want to work with.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ADSIGetPropertyTask">
            <summary>
            Used to get the value of a property from an ADSI object.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ADSIGetPropertyTask.ExecuteTask">
            <summary>
            Sets the specified property
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ADSIGetPropertyTask.PropName">
            <summary>
            The name of the property to get.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ADSIGetPropertyTask.StoreIn">
            <summary>
            The name of the property to store the value in.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ADSISetPropertyTask">
            <summary>
            Sets a property on an ADSI object.
            </summary>
            <remarks>
            This task uses a heuristic to determine the type of the property in ADSI.  The following cases are notable:
            <list type="bulleted">
              <item>If the property does not exist on the item, it is inserted as a string.</item>
              <item>If the property already exists, this method will attempt to preserve
              the type of the property.  The types this method knows about are String,
              Boolean, and Int32.</item>
              <item>If the property exists and is an array, the value is added to 
              the array, but only if it is not already present.</item>
            </list>
            </remarks>
            <example>
              <code>
                <![CDATA[
            <adsisetprop path="${iis.path}/Root" propname="AuthAnonymous" propvalue="true" />
                ]]>
              </code>
            </example>
            <example>
              <code>
                <![CDATA[
            <adsisetprop path="${iis.path}/Root/GWSSample">
                <properties>
                    <option name="AuthBasic" value="false" />
                    <option name="AuthNTLM" value="true" />
                </properties>
            </adsisetprop>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ADSISetPropertyTask.ExecuteTask">
            <summary>
            Sets the specified property
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ADSISetPropertyTask.SetProperty(System.DirectoryServices.DirectoryEntry,System.String,System.String)">
            <summary>
            Sets the named property on the specified <see cref="T:System.DirectoryServices.DirectoryEntry"/> 
            to the given value.
            </summary>
            <param name="entry">The <see cref="T:System.DirectoryServices.DirectoryEntry"/> we're modifying.</param>
            <param name="propertyName">The name of the property to set.</param>
            <param name="propertyValue">The value to set the property to.</param>
            <remarks>
            The following cases are notable:
            <list type="bulleted">
              <item>
              If the property does not exist on the item, it is inserted as a 
              string.
              </item>
              <item>
              If the property already exists, this method will attempt to preserve
              the type of the property.  The types this method knows about are 
              <see cref="T:System.String"/>, <see creef="bool"/>, and <see cref="T:System.Int32"/>.
              </item>
              <item>
              If the property exists and is an array, the value is added to the 
              array, but only if it's not already present.
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ADSISetPropertyTask.PropertyName">
            <summary>
            The name of the property to set.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ADSISetPropertyTask.PropertyValue">
            <summary>
            The new value of the property.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Astyle">
            <summary>
            Formats source code in a given directory to a specified code format.
            </summary>
            <remarks>
            <para>
            Most examples inline have been produced by Tal Davidson and team and 
            are part of the astyle documentation.  They have been included in
            the task documentation as an easy reference.
            </para>
            NOTE: This task relies on the astyle.exe file being in your path variable.
            Please download the astyle.exe from http://astyle.sourceforge.net.
            </remarks>
            <example>
              <code>
                <![CDATA[
            <astyle style="NAnt" cleanup="true">
                <sources>
                    <include name="**/**.cs" />
                </sources>
            </astyle>
                ]]>
              </code>
            </example>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Astyle.DEFAULT_STYLE">
            <summary>
            The default style seems to be the closest to C# standards.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Astyle.PrepareProcess(System.Diagnostics.Process)">
            <summary>
            Build up the command line arguments, determine which executable is 
            being used and find the path to that executable and set the working 
            directory.
            </summary>
            <param name="process">The process to prepare.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Astyle.SetCommandOption(System.String,System.String,System.Boolean)">
            <summary>
            Adds a new command option if none exists.  If one does exist then
            the use switch is toggled on or of.
            </summary>
            <param name="name">The common name of the option.</param>
            <param name="value">The option value or command line switch of the option.</param>
            <param name="on"><see langword="true" /> if the option should be appended to the commandline, otherwise <see langword="false" />.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Astyle.AppendCommandOptions">
            <summary>
            Append the command line options or commen names for the options
            to the generic options collection.  This is then piped to the
            command line as a switch.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Astyle.AppendFiles">
            <summary>
            Append the files specified in the fileset to the command line argument.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.CommandOptions">
            <summary>
            A collection of command line option switches.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.Sources">
            <summary>
            Used to select the files to copy. 
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.CommandLineArguments">
            <summary>
            The command-line arguments for the program.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.Style">
            <summary>
            Indicate the preset style to use.
                <list type="table">
                    <item>ansi
                        <code>
                           namespace foospace
                           {
                               int Foo()
                               {
                                   if (isBar)
                                   {
                                       bar();
                                       return 1;
                                   }
                                   else
                                       return 0;
                               }
                           }
                        </code>
                    </item>
                    <item>kr ( Kernighan&amp;Ritchie )
                        <code>
                           namespace foospace {
                               int Foo() {
                                   if (isBar) {
                                       bar();
                                       return 1;
                                   } else
                                       return 0;
                               }
                           }
                        </code>
                    </item>
                    <item>linux
                        <code>
                           namespace foospace
                           {
                                   int Foo()
                                   {
                                           if (isBar) {
                                                   bar();
                                                   return 1;
                                           } else
                                                   return 0;
                                   }
                           }
                        </code>
                    </item>
                    <item>gnu
                        <code>
                           namespace foospace
                           {
                               int Foo()
                               {
                                   if (isBar)
                                   {
                                       bar();
                                       return 1;
                                   }
                                   else
                                   return 0;
                               }
                           }
                        </code>
                    </item>
                    <item>java
                        <code>
                           class foospace {
                               int Foo() {
                                   if (isBar) {
                                       bar();
                                       return 1;
                                   } else
                                       return 0;
                               }
                           }
                        </code>
                    </item>
                    <item>NAnt
                        <code>
                           namespace foospace {
                               class foo() {
                           #region Protected Static Fields
                                   private int Foo() {
                                       if (isBar) {
                                           bar();
                                           return 1;
                                       } else {
                                           return 0;
                                       }
                                   }
                           #endregion
                           }
                        </code>
                    </item>
                </list>
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.CleanUp">
            <summary>
            Astyle leaves the original files around, renamed with a different
                suffix.  Setting this to <code>true</code>
                will remove these files.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.Suffix">
            <summary>
            The suffix to append to original files, defaults to <c>.orig</c> 
            if not specified.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.IndentNumSpaces">
            <summary>
            Indicate the maximum number of spaces to indent relative to a 
            previous line.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.IndentNumTabs">
            <summary>
            Indicate that tabs should be used to indent sources.  The number 
            specified indicates the maximum number of spaces the tab character
            will represent.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.IndentNumTabsForce">
            <summary>
            Indent using tab characters. Treat each tab as # spaces. Uses tabs as 
            indents in areas '--indent=tab' prefers to use spaces, such as 
            inside multi-line statements.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.ConvertTabs">
            <summary>
            <see langword="true" /> to convert tabs to spaces.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.IndentClass">
             <summary>
             <see langword="true" /> if class statements should be indented.
             <code>
             
                The default:
            
                class Foo
                {
                public:
                    Foo();
                    virtual ~Foo();
                };
            
                becomes:
            
                class Foo
                {
                    public:
                        Foo();
                        virtual ~Foo();
                };
                
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.IndentSwitch">
             <summary>
             <see langword="true" /> if switch statements should be indented.
             <code>
             
                    The default:
            
                    switch (foo)
                    {
                    case 1:
                        a += 2;
                        break;
            
                    default:
                        a += 2;
                        break;
                    }
            
                    becomes:
            
                    switch (foo)
                    {
                        case 1:
                            a += 2;
                            break;
            
                        default:
                            a += 2;
                            break;
                    }
                    
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.IndentCase">
             <summary>
             <see langword="true" /> if case statements should be indented.
             <code>
             
                The default:
            
                switch (foo)
                {
                case 1:
                    {
                        a += 2;
                        break;
                    }
            
                default:
                    {
                        a += 2;
                        break;
                    }
                }
            
                becomes:
            
                switch (foo)
                {
                    case 1:
                    {
                        a += 2;
                        break;
                    }
            
                    default:
                    {
                        a += 2;
                        break;
                    }
                }
                
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.IndentBracket">
             <summary>
             <code>true</code> if bracket statements should be indented.
             <code>
             
                The default:
            
                if (isFoo)
                {
                    bar();
                }
                else
                {
                    anotherBar();
                }
            
                becomes:
            
                if (isFoo)
                    {
                    bar();
                    }
                else
                    {
                    anotherBar();
                    }
                    
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.IndentBlock">
             <summary>
             <see langword="true" /> if block statements should be indented.
                The default:
            
                if (isFoo)
                {
                    bar();
                }
                else
                    anotherBar();
            
                becomes:
            
                if (isFoo)
                    {
                        bar();
                    }
                else
                    anotherBar();
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.IndentNamespaces">
             <summary>
             <see langword="true" /> if namespace statements should be indented.
             <code>
            
                The default:
            
                namespace foospace
                {
                class Foo
                {
                    public:
                        Foo();
                        virtual ~Foo();
                };
                }
            
                becomes:
            
                namespace foospace
                {
                    class Foo
                    {
                        public:
                            Foo();
                            virtual ~Foo();
                    };
                }
            
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.IndentLabels">
             <summary>
             <see langword="true" /> if label statements should be indented.
             <code>
             
                The default:
            
                int foospace()
                {
                    while (isFoo)
                    {
                        ...
                        goto error;
            
                error:
                        ...
                    }
                }
            
                becomes:
            
                int foospace()
                {
                    while (isFoo)
                    {
                        ...
                        goto error;
            
                    error:
                        ...
                    }
                }
            
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.IndentMax">
            <summary>
            Indicate the maximum number of spaces to indent relative to a 
            previous line.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.IndentMin">
            <summary>
            Indicate the maximum number of spaces to indent relative to a 
            previous line.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.FillEmptyLines">
            <summary>
            <see langword="true" /> if empty lines should be filled with the 
            whitespace of the previous line.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.BracketsNewLine">
             <summary>
             <see langword="true" /> if brackets should be put on a new line.
             <code>
            
                if (isFoo)
                {
                    bar();
                }
                else
                {
                    anotherBar();
                }
                
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.BracketsAttach">
            <summary>
            <see langword="true" /> if brackets should be attached.
            <code>
            
               if (isFoo){
                   bar();
               } else {
                   anotherBar();
               }
            
            </code>
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.BracketsLinux">
             <summary>
             <see langword="true" /> if brackets should be put on a new line and 
             indented.
             <code>
            
                namespace foospace
                {
                    int Foo()
                    {
                        if (isBar) {
                            bar();
                            return 1;
                        } else
                            return 0;
                    }
                }
            
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.BreakClosing">
             <summary>
             <see langword="true" /> if the line after a bracket (i.e. an else 
             statement after the closing if) should be placed on the next line.
             <code>
             
                if (isFoo){
                    bar();
                }else {
                    anotherBar();
                }
            
                becomes:
            
                if (isFoo) {
                    bar();
                }
                else {
                    anotherBar();
                }
                
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.BreakBlocks">
             <summary>
             <see langword="true" /> to break block statements with an empty line.
             <code>
            
                isFoo = true;
                if (isFoo) {
                    bar();
                } else {
                    anotherBar();
                }
                isBar = false;
            
                becomes:
            
                isFoo = true;
            
                if (isFoo) {
                    bar();
                } else {
                    anotherBar();
                }
            
                isBar = false;
            
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.BreakBlocksAll">
             <summary>
             <see langword="true" /> to break all block statements, even on 
             nested ifs with an empty line.
             <code>
            
                isFoo = true;
                if (isFoo) {
                    bar();
                } else {
                    anotherBar();
                }
                isBar = false;
            
                becomes:
            
                isFoo = true;
            
                if (isFoo) {
                    bar();
            
                } else {
                    anotherBar();
                }
            
                isBar = false;
            
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.BreakElseif">
             <summary>
             <see langword="true" /> to put the if component of an else if on a 
             new line.
             <code>
            
                if (isFoo) {
                    bar();
                } else if (isBar()){
                    anotherBar();
                }
            
                becomes:
            
                if (isFoo) {
                    bar();
                } else
                    if (isBar()){
                        anotherBar();
                    } 
            
             </code>
             
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.PadOperators">
             <summary>
             <see langword="true" /> to pad operators with a space.
             <code>
             
                if (isFoo)
                    a = bar((b-c)*a,*d--);
            
                becomes:
            
                if (isFoo)
                    a = bar((b - c) * a, *d--);
            
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.PadParenthesis">
             <summary>
             <see langword="true" /> to pad parenthesis with a space.
             <code>
            
                if (isFoo)
                    a = bar((b-c)*a,*d--);
            
                becomes:
            
                if ( isFoo )
                    a = bar( ( b-c )*a, *d-- );
            
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.PadAll">
             <summary>
             <see langword="true" /> to pad operators and parenthesis.
             <code>
             
                if (isFoo)
                    a = bar((b-c)*a,*d--);
            
                becomes:
            
                if ( isFoo )
                    a = bar( ( b - c ) * a, *d-- );
            
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.NoBreakComplex">
             <summary>
             <see langword="true" /> to keep complex statements on the same line.
             <code>
             
                if (isFoo)
                {  
                    isFoo = false; cout &lt;&lt; isFoo &lt;&lt; endl;
                }
            
                remains as is.
            
                if (isFoo) DoBar();
            
                remains as is.
            
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.NoBreakSingleLineBlocks">
             <summary>
             <see langword="true" /> to keep single line statements on the same line.
             <code>
            
                if (isFoo)
                { isFoo = false; cout &lt;&lt; isFoo &lt;&lt; endl; }
            
                remains as is.
            
             </code>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Astyle.ProgramArguments">
            <summary>
            Gets the command-line arguments for the external program.
            </summary>
            <value>
            The command-line arguments for the external program.
            </value>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.BizTalkBase.Database">
            <summary>
            The name of the management SQL database.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.BizTalkBase.Server">
            <summary>
            The name of the SQL Server where the management database is
            located.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.BizTalk.Deploy">
            <summary>
            Deploys an assembly to a given BizTalk configuration database.
            </summary>
            <remarks>
            Deployment will fail if the assembly is already deployed.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.BizTalk.Deploy.ExecuteTask">
            <summary>
            Deploys the assembly.
            </summary>
            <exception cref="T:NAnt.Core.BuildException">
              <para>The assembly does not exist.</para>
              <para>-or-</para>
              <para>The assembly binding information file does not exist.</para>
              <para>-or-</para>
              <para>The assembly could not be deployed.</para>
            </exception>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Deploy.Assembly">
            <summary>
            The path to the BizTalk assembly to deploy.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Deploy.Install">
            <summary>
            Determines whether to install the assembly in the Global Assembly
            Cache. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Deploy.BindingFile">
            <summary>
            The path to an assembly binding information file to import bindings
            from.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Deploy.LogFile">
            <summary>
            The path to the HTML log file to generate.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.BizTalk.Export">
            <summary>
            Exports bindings for a BizTalk assembly to an assembly binding 
            information file.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.BizTalk.Export.ExecuteTask">
            <summary>
            Exports the bindings.
            </summary>
            <exception cref="T:NAnt.Core.BuildException">
              <para>The assembly does not exist.</para>
              <para>-or-</para>
              <para>The bindings could not be exported.</para>
            </exception>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Export.Assembly">
            <summary>
            The path to the BizTalk assembly for which to export bindings.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Export.BindingFile">
            <summary>
            The path to an assembly binding information file in which the 
            bindings will be saved.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Export.LogFile">
            <summary>
            The path to the HTML log file to generate.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.BizTalk.Host">
            <summary>
            Allows BizTalk (in-process) host instances to be controlled.
            </summary>
            <example>
              <para>
              Starts the &quot;BizTalkServerApplication&quot; host instance
              on server &quot;SV-ARD-EAI&quot;.
              </para>
              <code>
                <![CDATA[
            <btshost action="Start" host="BizTalkServerApplication" server="SV-ARD-EAI" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Stops all &quot;BizTalkServerApplication&quot; host instances.
              </para>
              <code>
                <![CDATA[
            <btshost action="Stop" host="BizTalkServerApplication" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Host.HostName">
            <summary>
            The name of the host on which the perform the action.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Host.Server">
            <summary>
            The name of the BizTalk server on which to perform the action.
            If not specified, the action will be performed on all instances.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Host.Action">
            <summary>
            The action that should be performed on the host.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.BizTalk.Host.HostAction">
            <summary>
            Defines the actions that can be performed on a host instance.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.BizTalk.Host.HostAction.Start">
            <summary>
            Starts the host instance.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.BizTalk.Host.HostAction.Stop">
            <summary>
            Stops the host instance.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.BizTalk.Host.HostAction.Restart">
            <summary>
            Stops and restarts the host instance.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.BizTalk.Import">
            <summary>
            Imports bindings from a given assembly binding information file into
            the specified BizTalk configuration database.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.BizTalk.Import.ExecuteTask">
            <summary>
            Imports the assembly binding information file.
            </summary>
            <exception cref="T:NAnt.Core.BuildException">
              <para>The assembly binding information file does not exist.</para>
              <para>-or-</para>
              <para>The assembly binding information file could not be imported.</para>
            </exception>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Import.BindingFile">
            <summary>
            The path to the assembly binding information file containing the
            bindings to import.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Import.LogFile">
            <summary>
            The path to the HTML log file to generate.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.BizTalk.Orchestration">
            <summary>
            Performs a set of actions on a given orchestration.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Orchestration.Server">
            <summary>
            The name of the BizTalk server on which to perform the action.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Orchestration.OrchestrationName">
            <summary>
            The name of the orchestration to perform an action on.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.BizTalk.Orchestration.OrchestrationActionBase.Log(NAnt.Core.Level,System.String)">
            <summary>
            Logs a message with the given priority.
            </summary>
            <param name="messageLevel">The message priority at which the specified message is to be logged.</param>
            <param name="message">The message to be logged.</param>
            <remarks>
            The actual logging is delegated to the project.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.BizTalk.Orchestration.OrchestrationActionBase.Log(NAnt.Core.Level,System.String,System.Object[])">
            <summary>
            Logs a message with the given priority.
            </summary>
            <param name="messageLevel">The message priority at which the specified message is to be logged.</param>
            <param name="message">The message to log, containing zero or more format items.</param>
            <param name="args">An <see cref="T:System.Object"/> array containing zero or more objects to format.</param>
            <remarks>
            The actual logging is delegated to the project.
            </remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.BizTalk.Orchestration.StartOrchestrationAction">
            <summary>
            Starts the orchestration.
            </summary>
            <remarks>
            If the orchestration is not yet enlisted, then this will be done 
            first.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Orchestration.StartOrchestrationAction.AutoEnableReceiveLocation">
            <summary>
            Specifies whether receive locations associated with this 
            orchestration should be automatically enabled. The default is
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Orchestration.StartOrchestrationAction.AutoResumeOrchestrationInstance">
            <summary>
            Specifies whether service instances of this orchestration that 
            were manually suspended previously should be automatically 
            resumed. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Orchestration.StartOrchestrationAction.AutoStartSendPorts">
            <summary>
            Specifies whether send ports and send port groups imported by 
            this orchestration should be automatically started. The default
            is <see langword="true" />.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.BizTalk.Orchestration.StopOrchestrationAction">
            <summary>
            Stops the orchestration.
            </summary>
            <remarks>
            If the status of the orchestration is <see cref="F:NAnt.Contrib.Types.BizTalk.ServiceStatus.Bound"/>,
            <see cref="F:NAnt.Contrib.Types.BizTalk.ServiceStatus.Unbound"/> or <see cref="F:NAnt.Contrib.Types.BizTalk.ServiceStatus.Stopped"/>,
            then no further processing is done.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.BizTalk.Orchestration.StopOrchestrationAction.Invoke(System.Management.ManagementObject)">
            <summary>
            Stops the orchestration.
            </summary>
            <param name="orchestration">The orchestration to stop.</param>
            <remarks>
            If the status of orchestration is <see cref="F:NAnt.Contrib.Types.BizTalk.ServiceStatus.Bound"/>,
            <see cref="F:NAnt.Contrib.Types.BizTalk.ServiceStatus.Unbound"/> or <see cref="F:NAnt.Contrib.Types.BizTalk.ServiceStatus.Stopped"/>,
            then no further processing is done.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Orchestration.StopOrchestrationAction.AutoDisableReceiveLocation">
            <summary>
            Specifies whether receive locations associated with this 
            orchestration should be automatically disabled. The default
            is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Orchestration.StopOrchestrationAction.AutoSuspendOrchestrationInstance">
            <summary>
            Specifies whether instances of this orchestration should be
            automatically suspended. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.BizTalk.Orchestration.EnlistOrchestrationAction">
            <summary>
            Enlists the orchestration by creating its activation subscription.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Orchestration.EnlistOrchestrationAction.Host">
            <summary>
            Specifies the BizTalk host on which to enlist the orchestration.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.BizTalk.Orchestration.UnenlistOrchestrationAction">
            <summary>
            Unenlists the orchestration by removing its activation subscription.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Orchestration.UnenlistOrchestrationAction.AutoTerminateOrchestrationInstance">
            <summary>
            Specifies whether instances of this orchestration type should 
            be automatically terminated. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.BizTalk.ReceiveLocation">
            <summary>
            Allows BizTalk receive locations to be controlled.
            </summary>
            <example>
              <para>
              Enables the &quot;HttpReceive&quot; receive location on server
              &quot;SV-ARD-EAI&quot;.
              </para>
              <code>
                <![CDATA[
            <btsreceivelocation action="Enable" location="HttpReceive" server="SV-ARD-EAI" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Disables the &quot;HttpReceive&quot; receive location on server
              &quot;SV-ARD-EAI&quot;.
              </para>
              <code>
                <![CDATA[
            <btsreceivelocation action="Disable" location="HttpReceive" server="SV-ARD-EAI" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.ReceiveLocation.LocationName">
            <summary>
            The name of the receive location on which the perform the action.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.ReceiveLocation.Server">
            <summary>
            The name of the BizTalk server on which to perform the action.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.ReceiveLocation.Action">
            <summary>
            The action that should be performed on the receive location.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.BizTalk.ReceiveLocation.ReceiveLocationAction">
            <summary>
            Defines the actions that can be performed on a BizTalk receive
            location.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.BizTalk.ReceiveLocation.ReceiveLocationAction.Enable">
            <summary>
            Enables the receive location.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.BizTalk.ReceiveLocation.ReceiveLocationAction.Disable">
            <summary>
            Disables the receive location.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.BizTalk.Reset">
            <summary>
            Allows stopping, starting and resetting of BizTalk in-process host 
            instances on the specified server.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Reset.Server">
            <summary>
            The name of the BizTalk server on which to perform the action.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Reset.Action">
            <summary>
            Specifies the action(s) to perform on the BizTalk host instances. The
            default is <see cref="F:NAnt.Contrib.Tasks.BizTalk.Reset.ResetAction.Reset"/>.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.BizTalk.Reset.ResetAction">
            <summary>
            Defines the possible actions that can be performed on the BizTalk 
            in-process host instances.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.BizTalk.Reset.ResetAction.Stop">
            <summary>
            Stops all in-process host instances.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.BizTalk.Reset.ResetAction.Start">
            <summary>
            Starts all in-process host instances.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.BizTalk.Reset.ResetAction.Reset">
            <summary>
            Stops and restarts all in-process host instances.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.BizTalk.SendPort">
            <summary>
            Allows BizTalk send ports to be controlled.
            </summary>
            <example>
              <para>
              Starts the &quot;UmeHttpSendPort&quot; send port on server 
              &quot;SV-ARD-EAI&quot;.
              </para>
              <code>
                <![CDATA[
            <btssendport action="Start" port="UmeHttpSendPort" server="SV-ARD-EAI" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Unenlists the &quot;UmeHttpSendPort&quot; send port on server
              &quot;SV-ARD-EAI&quot;.
              </para>
              <code>
                <![CDATA[
            <btssendport action="UnEnlist" port="UmeHttpSendPort" server="SV-ARD-EAI" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.SendPort.PortName">
            <summary>
            The name of the send port on which the perform the action.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.SendPort.Server">
            <summary>
            The name of the BizTalk server on which to perform the action.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.SendPort.Action">
            <summary>
            The action that should be performed on the send port.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.BizTalk.SendPort.SendPortAction">
            <summary>
            Defines the actions that can be performed on a BizTalk send port.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.BizTalk.SendPort.SendPortAction.Start">
            <summary>
            Starts the send port.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.BizTalk.SendPort.SendPortAction.Stop">
            <summary>
            Stops the send port.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.BizTalk.SendPort.SendPortAction.Restart">
            <summary>
            Stops and restarts the send port.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.BizTalk.SendPort.SendPortAction.Enlist">
            <summary>
            Enlists the send port.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.BizTalk.SendPort.SendPortAction.UnEnlist">
            <summary>
            Unenlists the send port.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.BizTalk.Unbind">
            <summary>
            Removes all bindings for a given assembly from a BizTalk configuration
            database.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.BizTalk.Unbind.ExecuteTask">
            <summary>
            Removes bindings for the specified assembly.
            </summary>
            <exception cref="T:NAnt.Core.BuildException">
              <para>The assembly does not exist.</para>
              <para>-or-</para>
              <para>The bindings could not be removed.</para>
            </exception>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Unbind.Assembly">
            <summary>
            The path to the BizTalk assembly for which to remove all bindings.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Unbind.Server">
            <summary>
            The name of the BizTalk server on which to perform the operation.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Unbind.ReceivePipeline">
            <summary>
            The assembly qualified name of the receive pipeline to set when 
            unbinding a receive pipeline.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Unbind.SendPipeline">
            <summary>
            The assembly qualified name of the SEND pipeline to set when 
            unbinding a send pipeline.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.BizTalk.Undeploy">
            <summary>
            Removes a given assembly from a BizTalk configuration database.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.BizTalk.Undeploy.ExecuteTask">
            <summary>
            Removes an assembly from a BizTalk configuration database.
            </summary>
            <exception cref="T:NAnt.Core.BuildException">
              <para>The assembly does not exist.</para>
              <para>-or-</para>
              <para>The assembly could not be remove from the BizTalk configuration database.</para>
            </exception>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Undeploy.Assembly">
            <summary>
            The path to the BizTalk assembly to remove.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Undeploy.Uninstall">
            <summary>
            Determines whether to remove the assembly from the Global Assembly
            Cache. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.BizTalk.Undeploy.LogFile">
            <summary>
            The path to the HTML log file to generate.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ChangeDirectory">
            <summary>
            Changes the current working directory.
            </summary>
            <example>
              <para>
              Changes the current working directory to the &quot;subdir&quot; 
              directory, relative to the project base directory.
              </para>
              <code>
                <![CDATA[
            <cd dir="subdir" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ChangeDirectory.ExecuteTask">
            <summary>
            Changes the current directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ChangeDirectory.Directory">
            <summary>
            The path to which the current working directory should be set.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ChecksumTask">
            <summary>
            Calculates checksums for a set of files.
            Loosely based on Ant's Checksum task.
            </summary>
            <remarks>
            This task takes a set of input files in a fileset
            and calculates a checksum for each one of them. 
            You can specify the algorithm to use when calculating
            the checksum value (MD5 or SHA1, for example).
            The calculated value is saved to a file with the same
            name as the input file and an added extension either
            based on the algorithm name (e.g. .MD5), or whatever 
            is specified through the fileext attribute.
            </remarks>
            <example>
              <code>
                <![CDATA[
            <checksum algorithm="MD5" fileext="MD5">
                <fileset>
                    <include name="${outputdir}\*.dll"/>
                </fileset>
            </checksum>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ChecksumTask.Initialize">
            <summary>
            Initializes task and ensures the supplied attributes are valid.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ChecksumTask.ExecuteTask">
            <summary>
            This is where the work is done
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ChecksumTask.WriteChecksum(System.String,System.String)">
            <summary>
            Writes a checksum to a destination file
            </summary>
            <param name="filename"></param>
            <param name="checksum"></param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ChecksumTask.Algorithm">
            <summary>
            Name of Algorithm to use when calculating
            the checksum. Can be MD5 or SHA1.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ChecksumTask.FileExtension">
            <summary>
            The generated checksum file's name will be the 
            original filename with "." and fileext 
            added to it. Defaults to the 
            algorithm name being used
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ChecksumTask.FileSet">
            <summary>
            Set of files to use as input
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ClearCase.ClearCaseBase">
            <summary>
            Base class for all the ClearCase tasks.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ClearCase.ClearCaseBase.#ctor">
            <summary>
            Base Constructor.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ClearCase.ClearCaseBase.ExecuteTask">
            <summary>
            Execute the perforce command assembled by subclasses.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseBase.CommandSpecificArguments">
            <summary>
            Derived classes should override this to provide command-specific
            commandline arguments.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseBase.ProgramArguments">
            <summary>
            Overrides the base class.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ClearCase.ClearCaseCatCs">
            <summary>
            Displays a ClearCase config spec.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCatCs.ViewTag">
            <summary>
            The view tag identifying the ClearCase view that will have its 
            config spec displayed.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCatCs.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckIn">
            <summary>
            Checks files into a ClearCase VOB.
            <seealso cref="T:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckOut"/>
            <seealso cref="T:NAnt.Contrib.Tasks.ClearCase.ClearCaseUnCheckOut"/>
            </summary>
            <remarks>
            <para>
            This task uses the <c>cleartool checkin</c> command to check in ClearCase elements.
            </para>
            </remarks>
            <example>
              <para>
              Performs a ClearCase checkin on the file <c>c:/views/viewdir/afile</c>. 
              All warning messages are suppressed, and the element is checked in even if identical to the original.
              Comment text from the file <c>acomment.txt</c> is added to ClearCase as a comment. All warning messages are suppressed. The file is checked in even if it is identical to the original.
              </para>
              <code>
                <![CDATA[
            <cccheckin viewpath="c:/views/viewdir/afile"
                    commentfile="acomment.txt"
                    nowarn="true"
                    identical="true"/>
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckIn.ViewPath">
            <summary>
            Path to the ClearCase view file or directory that the command will
            operate on.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckIn.Comment">
            <summary>
            Specify a comment. Only one of <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckIn.Comment"/> or 
            <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckIn.CommentFile"/> may be used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckIn.CommentFile">
            <summary>
            Specify a file containing a comment. Only one of <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckIn.Comment"/>
            or <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckIn.CommentFile"/> may be used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckIn.NoWarn">
            <summary>
            <see langword="true" /> if warning messages should be suppressed.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckIn.PreserveTime">
            <summary>
            If <see langword="true" />, the modification time will be preserved.
            Default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckIn.KeepCopy">
            <summary>
            <see langword="true" /> to keep a view-private copy of the file with
            a .keep extension. Default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckIn.Identical">
            <summary>
            If <see langword="true" />, files may be checked in even if identical
            to the original.  Default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckIn.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckOut">
            <summary>
            Checks files out of a ClearCase VOB.
            <seealso cref="T:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckIn"/>
            <seealso cref="T:NAnt.Contrib.Tasks.ClearCase.ClearCaseUnCheckOut"/>
            </summary>
            <remarks>
            <para>
            This task uses the <c>cleartool checkout</c> command to check out ClearCase elements.
            </para>
            </remarks>
            <example>
              <para>
              Performs a ClearCase checkout on the file <c>c:/views/viewdir/afile</c>. 
              It is checked out as reserved on branch called <c>abranch</c>. 
              All warning messages are suppressed. 
              <c>Some comment text</c> is added to ClearCase as a comment.
              </para>
              <code>
                <![CDATA[
            <cccheckout viewpath="c:/views/viewdir/afile"
                    reserved="true"
                    branch="abranch"
                    nowarn="true"
                    comment="Some comment text"/>
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckOut.ViewPath">
            <summary>
            Path to the ClearCase view file or directory that the command will
            operate on.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckOut.Reserved">
            <summary>
            <see langword="true" /> to check the element out as reserved.
            Default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckOut.OutFile">
            <summary>
            Creates a writable file under a different filename.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckOut.NoData">
            <summary>
            If <see langword="true" />, checks out the file but does not create
            an editable file containing its data. Default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckOut.Branch">
            <summary>
            Specify a branch to check out the file to.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckOut.Version">
            <summary>
            If <see langword="true" />, checkouts of elements with a version
            other than main latest will be allowed. Default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckOut.NoWarn">
            <summary>
            <see langword="true" /> if warning messages should be suppressed.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckOut.Comment">
            <summary>
            Specify a comment. Only one of <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckOut.Comment"/> or 
            <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckOut.CommentFile"/> may be used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckOut.CommentFile">
            <summary>
            Specify a file containing a comment. Only one of <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckOut.Comment"/>
            or <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckOut.CommentFile"/> may be used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckOut.PreserveTime">
            <summary>
            If <see langword="true" />, the modification time will be preserved.
            Default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckOut.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ClearCase.ClearCaseLock">
            <summary>
            Locks ClearCase elements.
            <seealso cref="T:NAnt.Contrib.Tasks.ClearCase.ClearCaseUnLock"/>
            </summary>
            <remarks>
            <para>
            This task uses the <c>cleartool lock</c> command to lock ClearCase elements.
            </para>
            </remarks>
            <example>
              <para>
              Performs a ClearCase lock on the object <c>stream:Application_Integration@\MyProject_PVOB</c>.
              </para>
              <code>
                <![CDATA[
            <cclock objsel="stream:Application_Integration@\MyProject_PVOB" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseLock.Replace">
            <summary>
            If <see langword="true" /> an existing lock can be replaced.
            Default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseLock.Nusers">
            <summary>
            Specifies user(s) who can still modify the object.
            Only one of <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseLock.Nusers"/> or <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseLock.Obsolete"/> may be
            used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseLock.Obsolete">
            <summary>
            If <see langword="true"/> the object will be marked obsolete.
            Only one of <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseLock.Nusers"/> or <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseLock.Obsolete"/> may 
            be used. Default is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseLock.Comment">
            <summary>
            Specify a comment. Only one of <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseLock.Comment"/> or 
            <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseLock.CommentFile"/> may be used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseLock.CommentFile">
            <summary>
            Specify a file containing a comment. Only one of <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseLock.Comment"/>
            or <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseLock.CommentFile"/> may be used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseLock.Pname">
            <summary>
            Specifies the object pathname to be locked.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseLock.ObjSel">
            <summary>
            Specifies the object(s) to be locked.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseLock.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkElem">
            <summary>
            Creates elements in a ClearCase VOB.
            </summary>
            <remarks>
            <para>
            This task uses the <c>cleartool mkelem</c> command to create ClearCase elements.
            </para>
            </remarks>
            <example>
              <para>
              Performs a ClearCase mkelem on the file <c>c:/views/viewdir/afile</c> with element type <c>text_file</c>. 
              It checks in the file after creation and adds <c>Some comment text</c> as a comment.
              </para>
              <code>
                <![CDATA[
            <ccmkelem viewpath="c:/views/viewdir/afile"
                    eltype="text_file"
                    checkin="true"
                    comment="Some comment text"/>
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkElem.ViewPath">
            <summary>
            Path to the ClearCase view file or directory that the command will
            operate on.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkElem.Comment">
            <summary>
            Specify a comment. Only one of <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkElem.Comment"/> or 
            <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkElem.CommentFile"/> may be used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkElem.CommentFile">
            <summary>
            Specify a file containing a comment. Only one of <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkElem.Comment"/>
            or <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkElem.CommentFile"/> may be used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkElem.NoWarn">
            <summary>
            If <see langword="true" />, warning will be suppressed.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkElem.NoCheckout">
            <summary>
            Perform a checkout after element creation.
            Default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkElem.Checkin">
            <summary>
            Checkin element after creation.
            Default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkElem.PreserveTime">
            <summary>
            If <see langword="true" />, the modification time will be preserved.
            Default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkElem.Master">
            <summary>
            Assign mastership of the main branch to the current site.
            Default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkElem.ElType">
            <summary>
            Element type to use during element creation.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkElem.MkPath">
            <summary>
            Create elements from the view-private parent directories.
            Default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkElem.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLabel">
            <summary>
            Applies a ClearCase label.
            <seealso cref="T:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLbType"/>
            </summary>
            <remarks>
            <para>
            This task uses the <c>cleartool mklabel</c> command to apply a ClearCase label to specified elements.
            </para>
            </remarks>
            <example>
              <para>
              Performs a ClearCase mklabel on the file <c>c:/views/viewdir/afile</c> under 
              the <c>main</c> branch for <c>version 2</c> (<c>\main\2</c>).  All matching
              elements will be applied with label <c>VERSION_1</c>.
              <c>Some comment text</c> is added as a comment.  Subdirectories will be recursed.
              </para>
              <code>
                <![CDATA[
            <ccmklabel viewpath="c:/views/viewdir/afile"
                    comment="Some comment text"
                    recurse="true"
                    version="\main\2"
                    typename="VERSION_1"/>
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLabel.Typename">
            <summary>
            Name of the label type
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLabel.ViewPath">
            <summary>
            Path to the ClearCase view file or directory that the command will
            operate on.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLabel.Replace">
            <summary>
            If <see langword="true" />, allow the replacement of a 
            label of the same type on the same branch.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLabel.Recurse">
            <summary>
            If <see langword="true" />, process each subdirectory recursively under the viewpath.
            Default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLabel.Version">
            <summary>
            Identify a specific version to attach the label to.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLabel.Vob">
            <summary>
            Path to the ClearCase view file or directory that the command will operate on.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLabel.Comment">
            <summary>
            Specify a comment. Only one of <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLabel.Comment"/> or 
            <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLabel.CommentFile"/> may be used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLabel.CommentFile">
            <summary>
            Specify a file containing a comment. Only one of <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLabel.Comment"/>
            or <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLabel.CommentFile"/> may be used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLabel.Follow">
            <summary>
            For any VOB symbolic links encountered, labels the corresponding target.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLabel.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLbType">
            <summary>
            Creates a label object in a ClearCase VOB.
            <seealso cref="T:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLabel"/>
            </summary>
            <remarks>
            <para>
            This task uses the <c>cleartool mklabeltype</c> command to create a ClearCase label object.
            </para>
            </remarks>
            <example>
              <para>
              Performs a ClearCase mklbtype to create a label type named <c>VERSION_1</c>. 
              It is created as <c>ordinary</c> so it is available only to the current VOB. 
              The text <c>Development version 1</c> is added as a comment.
              </para>
              <code>
                <![CDATA[
            <ccmklbtype typename="VERSION_1"
                    ordinary="true"
                    comment="Development version 1"/>
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLbType.Typename">
            <summary>
            Name of the label type to create.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLbType.Vob">
            <summary>
            Name of the VOB.  Must be a valid path to somewhere on a VOB.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLbType.Replace">
            <summary>
            If <see langword="true" />, allow an existing label definition to be replaced.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLbType.Global">
            <summary>
            Creates a label type that is global to the VOB or to VOB's that use this VOB.
            Either global or ordinary can be specified, not both. 
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLbType.Ordinary">
            <summary>
            Creates a label type that can be used only in the current VOB.
            Either global or ordinary can be specified, not both. 
            Although <see langword="false" /> by default, if global is also <see langword="false" /> or not specified ordinary is the default behaviour.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLbType.PBranch">
            <summary>
            If <see langword="true" /> the label type is allowed to be used once per branch in a given element's version tree.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLbType.Shared">
            <summary>
            Sets the way mastership is checked by ClearCase. See ClearCase documentation for details.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLbType.Comment">
            <summary>
            Specify a comment. Only one of <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLbType.Comment"/> or 
            <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLbType.CommentFile"/> may be used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLbType.CommentFile">
            <summary>
            Specify a file containing a comment. Only one of <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLbType.Comment"/>
            or <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLbType.CommentFile"/> may be used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseMkLbType.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ClearCase.ClearCaseRmType">
            <summary>
            Removes elements from a ClearCase VOB.
            </summary>
            <remarks>
            <para>
            This task uses the <c>cleartool rmtype</c> command to remove a ClearCase object.
            </para>
            </remarks>
            <example>
              <para>
              Performs a ClearCase rmtype to remove a <see cref="F:NAnt.Contrib.Types.ClearCase.TypeKind.Label"/>
              type named <c>VERSION_1</c>. 
              Comment text from the file <c>acomment.txt</c> is added as a comment. 
              All instances of the type are removed, including the type object itself.
              </para>
              <code>
                <![CDATA[
            <ccrmtype typekind="Label"
                    typename="VERSION_1"
                    commentfile="acomment.txt"
                    removeall="true" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseRmType.TypeKind">
            <summary>
            The kind of type to remove.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseRmType.TypeName">
            <summary>
            The name of the object to remove.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseRmType.Ignore">
            <summary>
            Used with <see cref="F:NAnt.Contrib.Types.ClearCase.TypeKind.Trigger"/> types only. 
            Forces removal of <see cref="F:NAnt.Contrib.Types.ClearCase.TypeKind.Trigger"/> type even if a 
            pre-operation trigger would prevent its removal.
            The default is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseRmType.RemoveAll">
            <summary>
            Removes all instances of a type and the type object itself.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseRmType.Comment">
            <summary>
            Specify a comment. Only one of <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseRmType.Comment"/> or 
            <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseRmType.CommentFile"/> may be used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseRmType.CommentFile">
            <summary>
            Specify a file containing a comment. Only one of <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseRmType.Comment"/>
            or <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseRmType.CommentFile"/> may be used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseRmType.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ClearCase.ClearCaseUnCheckOut">
            <summary>
            Uncheckout ClearCase elements.
            <seealso cref="T:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckIn"/>
            <seealso cref="T:NAnt.Contrib.Tasks.ClearCase.ClearCaseCheckOut"/>
            </summary>
            <remarks>
            <para>
            This task uses the <c>cleartool unco</c> command to remove a ClearCase object.
            </para>
            </remarks>
            <example>
              <para>
              Does a ClearCase uncheckout on the file <c>c:/views/viewdir/afile</c>. 
              A copy of the file called <c>c:/views/viewdir/afile.keep</c> is kept.
              </para>
              <code>
                <![CDATA[
            <ccuncheckout viewpath="c:/views/viewdir/afile"
                    keepcopy="true"/>
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseUnCheckOut.ViewPath">
            <summary>
            Path to the ClearCase view file or directory that the command will
            operate on.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseUnCheckOut.KeepCopy">
            <summary>
            If <see langword="true" />, a view-private copy of the file with a
            .keep extension will be kept. Default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseUnCheckOut.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ClearCase.ClearCaseUnLock">
            <summary>
            Unlocks ClearCase elements.
            <seealso cref="T:NAnt.Contrib.Tasks.ClearCase.ClearCaseLock"/>
            </summary>
            <remarks>
            <para>
            This task uses the <c>cleartool unlock</c> command to unlock a ClearCase object.
            </para>
            </remarks>
            <example>
              <para>
              Performs a ClearCase unlock on the object <c>stream:Application_Integration@\MyProject_PVOB</c>.
              </para>
              <code>
                <![CDATA[
            <ccunlock objsel="stream:Application_Integration@\MyProject_PVOB" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseUnLock.Comment">
            <summary>
            Specify a comment. Only one of <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseUnLock.Comment"/> or 
            <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseUnLock.CommentFile"/> may be used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseUnLock.CommentFile">
            <summary>
            Specify a file containing a comment. Only one of <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseUnLock.Comment"/>
            or <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseUnLock.CommentFile"/> may be used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseUnLock.Pname">
            <summary>
            Specifies the object pathname to be unlocked.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseUnLock.ObjSel">
            <summary>
            Specifies the object(s) to be unlocked.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseUnLock.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ClearCase.ClearCaseUpdate">
            <summary>
            Updates a ClearCase view.
            </summary>
            <remarks>
            <para>
            This task uses the <c>cleartool update</c> command to update a ClearCase view.
            </para>
            </remarks>
            <example>
              <para>
              Performs a ClearCase update on the snapshot view directory <c>c:/views/viewdir</c>. 
              A graphical dialog will be displayed.  
              The output will be logged to <c>log.log</c> and it will overwrite any hijacked files. 
              The modified time will be set to the current time.
              </para>
              <code>
                <![CDATA[
            <ccupdate viewpath="c:/views/viewdir"
                    graphical="false"
                    log="log.log"
                    overwrite="true"
                    currenttime="true"
                    rename="false"/>
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseUpdate.ViewPath">
            <summary>
            Path to the ClearCase view file or directory that the command will
            operate on.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseUpdate.Graphical">
            <summary>
            Displays a graphical dialog during the update.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseUpdate.LogFile">
            <summary>
            Specifies a log file for ClearCase to write to.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseUpdate.Overwrite">
            <summary>
            If <see langword="true" />, hijacked files will be overwritten.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseUpdate.Rename">
            <summary>
            If <see langword="true" />, hijacked files will be renamed with a .keep extension.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseUpdate.CurrentTime">
            <summary>
            Specifies that modification time should be written as the current time. 
            Only one of <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseUpdate.CurrentTime"/> or <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseUpdate.PreserveTime"/>
            can be specified. The default is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseUpdate.PreserveTime">
            <summary>
            Specifies that modification time should preserved from the VOB time. 
            Only one of <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseUpdate.CurrentTime"/> or <see cref="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseUpdate.PreserveTime"/>
            can be specified. The default is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ClearCase.ClearCaseUpdate.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.CodeStatsTask">
            <summary>
            Generates statistics from source code.
            </summary>
            <remarks>
            Scans files in a fileset counting lines.
            </remarks>
            <example>
              <para>
              Generate statistics for a set of C# and VB.NET sources, applying 
              different labels for both.
              </para>
              <code>
                <![CDATA[
            <codestats output="test.xml" append="true" buildname="MyBuildName">
                <counts>
                    <count label="C#">
                        <fileset>
                            <include name="**/*.cs" />
                        </fileset>
                    </count>
                    <count label="VB">
                        <fileset>
                            <include name="**\*.vb" />
                        </fileset>
                    </count>
                </counts>
            </codestats>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Generate statistics for all C# sources and only output a summary to 
              the log.
              </para>
              <code>
                <![CDATA[
            <codestats output="test.xml" verbose="true" summarize="true">
                <counts>
                    <count label="C#">
                        <fileset>
                            <include name="**\*.cs" />
                        </fileset>
                    </count>
                </counts>
            </codestats>
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.CodeStatsTask.CodeStats">
            <summary>
            Set of line counters to enable.  
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.CodeStatsTask.BuildName">
            <summary>
            An identifier to be able to track which build last updated the 
            code stats file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.CodeStatsTask.AppendFile">
            <summary>
            Specifies whether the results should be appended to the output file.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.CodeStatsTask.Summarize">
            <summary>
            If you only want to show summary stats for the whole fileset
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.CodeStatsTask.OutputFile">
            <summary>
            The name of the file to save the output to (in XML).
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.COMRegisterTask">
            <summary>
            Register COM servers or type libraries.
            </summary>
            <remarks>
            <para>
            COM register task will try and register any type of COM related file 
            that needs registering.
            </para>
            <para>Executable files (.exe) will be registered as exe servers, type 
            libaries (.tlb) registered with RegisterTypeLib and for all other 
            filetypes it will attempt to register them as dll servers.
            </para>
            </remarks>
            <example>
              <para>Register a single dll server.</para>
              <code>
                <![CDATA[
            <comregister file="myComServer.dll" />
                ]]>
              </code>
            </example>
            <example>
              <para>Register a single exe server </para>
              <code>
                <![CDATA[
            <comregister file="myComServer.exe" />
                ]]>
              </code>
            </example>
            <example>
              <para>Register a set of COM files at once.</para>
              <code>
                <![CDATA[
            <comregister unregister="false">
                <fileset>
                    <include name="an_ExeServer.exe" />
                    <include name="a_TypeLibrary.tlb" />
                    <include name="a_DllServer.dll" />
                    <include name="an_OcxServer.ocx" />
                </fileset>
            </comregister>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.COMRegisterTask.RegisterDllServer(System.String)">
            <summary>
            Register an inproc COM server, usually a .dll or .ocx
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.COMRegisterTask.RegisterTypelib(System.String)">
            <summary>
            Register a COM type library
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.COMRegisterTask.RegisterExeServer(System.String)">
            <summary>
            Register exe servers.
            </summary>
            <param name="path"></param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.COMRegisterTask.File">
            <summary>
            The name of the file to register. This is provided as an alternate 
            to using the task's fileset.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.COMRegisterTask.Unregister">
            <summary>Unregistering this time. ( /u paramater )Default is "false".</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.COMRegisterTask.COMRegisterFileSet">
            <summary>
            The set of files to register.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.COMRegisterTask.DynamicPInvoke">
            <summary>
            Helper class to synamically build an assembly with the correct 
            P/Invoke signature
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.COMRegisterTask.DynamicPInvoke.DynamicDllFuncInvoke(System.String,System.String)">
            <summary>
            Register a given dll.
            </summary>
            <param name="dll"></param>
            <param name="entrypoint"></param>
            <returns></returns>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ConcatTask">
            <summary>
            A task that concatenates a set of files.
            Loosely based on Ant's Concat task.
            </summary>
            <remarks>
            <para>
            This task takes a set of input files in a fileset
            and concatenates them into a single file. You can 
            either replace the output file, or append to it 
            by using the append attribute.
            </para>
            <para>
            The order the files are concatenated in is not
            especified.
            </para>
            </remarks>
            <example>
              <code>
                <![CDATA[
            <concat destfile="${outputdir}\Full.txt" append="true">
                <fileset>
                    <include name="${outputdir}\Test-*.txt" />
                </fileset>
            </concat>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ConcatTask.Initialize">
            <summary>
            Initializes task and ensures the supplied attributes are valid.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ConcatTask.ExecuteTask">
            <summary>
            This is where the work is done
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ConcatTask.OpenDestinationFile">
            <summary>
            Opens the destination file according
            to the specified flags
            </summary>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ConcatTask.AppendFiles(System.IO.FileStream)">
            <summary>
            Appends all specified files
            </summary>
            <param name="output">File to write to</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ConcatTask.DestinationFile">
            <summary>
            Name of the destination file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ConcatTask.Append">
            <summary>
            Specifies whether to append to the destination file.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ConcatTask.FileSet">
            <summary>
            Set of files to use as input.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.DicsoTask">
            <summary>
            Discovers the URLs of XML web services on a web server and saves documents
            related to them to the local disk. The resulting .discomap, .wsdl, and .xsd files
            can be used with the <see cref="T:NAnt.Contrib.Tasks.WsdlTask"/> to produce web service clients and
            and abstract web service servers using ASP.NET.
            </summary>
            <example>
              <para>Generate a proxy class for a web service.</para>
              <code>
                <![CDATA[
            <disco 
                path="http://www.somewhere.com/myservice.wsdl"
                language="CS" 
                namespace="MyCompany.MyService" 
                outfile="MyService.cs" 
            />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.DicsoTask.ExecuteTask">
            <summary>
            Discover the details for the specified web service.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.Path">
            <summary>The URL or Path to discover.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.NoLogo">
            <summary>Suppresses the banner.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.NoSave">
            <summary>Do not save the discovered documents to the local disk.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.OutputDir">
            <summary>The output directory to save discovered documents in.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.Username">
            <summary>Username of an account with credentials to access a
            server that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.Password">
            <summary>Password of an account with credentials to access a
            server that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.Domain">
            <summary>Domain of an account with credentials to access a
            server that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.Proxy">
            <summary>URL of a proxy server to use for HTTP requests.
            The default is to use the system proxy setting.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.ProxyUsername">
            <summary>Username of an account with credentials to access a
            proxy that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.ProxyPassword">
            <summary>Password of an account with credentials to access a
            proxy that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.ProxyDomain">
            <summary>Domain of an account with credentials to access a
            proxy that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.DicsoTask.ProgramArguments">
            <summary>
            Gets the command-line arguments for the external program.
            </summary>
            <value>
            The command-line arguments for the external program.
            </value>
        </member>
        <member name="T:NAnt.Contrib.Tasks.FxCopTask">
            <summary>
            Analyzes managed code assemblies and reports information about the 
            assemblies, such as possible design, localization, performance, and 
            security improvements.
            </summary>
            <remarks>
              <note>
              this task relies on fxcopcmd.exe being in your PATH environment variable.  
              You can download the latest FxCop from <see href="http://www.gotdotnet.com/team/fxcop/" />.
              </note>
            </remarks>
            <example>
              <code>
                <![CDATA[
            <fxcop directOutputToConsole="true" projectFile="${build.dir}\Sample.fxcop">
                <targets>
                    <include name="${build.dir}\bin\*.dll" />
                </targets>
                <rules>
                    <include name="${build.dir}\rules\*.dll" />
                </rules>
            </fxcop>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.FxCopTask.#ctor">
            <summary>
            Creates a new <see cref="T:NAnt.Contrib.Tasks.FxCopTask"/> instance.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.FxCopTask.PrepareProcess(System.Diagnostics.Process)">
            <summary>
            Performs logic before the external process is started
            </summary>
            <param name="process">Process.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.FxCopTask.ExecuteTask">
            <summary>
            Executes the task.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.FxCopTask.BuildArguments">
            <summary>
            Builds the arguments to pass to the exe.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.ApplyOutXsl">
            <summary>
            Applies the XSL transformation specified in /outXsl to the analysis report before saving the file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.DirectOutputToConsole">
            <summary>
            Directs analysis output to the console or to the Output window in Visual Studio .NET. By default, the XSL file FxCopConsoleOutput.xsl is applied to the output before it is displayed.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.ConsoleXslFilename">
            <summary>
            Specifies the XSL or XSLT file that contains a transformation to be applied to the analysis output before it is displayed in the console.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.DependencyDirectories">
            <summary>
            Specifies additional directories to search for assembly dependencies. FxCopCmd always searches the target assembly directory and the current working directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.TargetAssemblies">
            <summary>
            Specifies the target assembly to analyze.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.ImportFiles">
            <summary>
            Specifies the name of an analysis report or project file to import. Any messages in the imported file that are marked as excluded are not included in the analysis results.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.AnalysisReportFilename">
            <summary>
            Specifies the file name for the analysis report.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.OutputXslFilename">
            <summary>
            Specifies the XSL or XSLT file that is referenced by the xml-stylesheet processing instruction in the analysis report.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.PlatformDirectory">
            <summary>
            Specifies the location of the version of Mscorlib.dll that was used when building the target assemblies if this version is not installed on the computer running FxCopCmd.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.ProjectFile">
            <summary>
            Specifies the filename of FxCop project file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.RuleLibraries">
            <summary>
            Specifies the filename(s) of FxCop project file(s).
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.IncludeSummaryReport">
            <summary>
            Includes a summary report with the informational messages returned by FxCopCmd.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.TypeList">
            <summary>
            Comma-separated list of type names to analyze.  This option disables analysis of assemblies, namespaces, and resources; only the specified types and their members are included in the analysis.  
            Use the wildcard character '*' at the end of the name to select multiple types.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.SaveResults">
            <summary>
            Saves the results of the analysis in the project file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.FailOnAnalysisError">
            <summary>
            Determines if the task should fail when analysis errors occur
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.BaseDirectory">
            <summary>
            The directory in which the command will be executed.
            </summary>
            <value>
            The directory in which the command will be executed. The default 
            is the project's base directory.
            </value>
            <remarks>
            <para>
            It will be evaluated relative to the project's
            base directory if it is relative.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.FxCopTask.ProgramArguments">
            <summary>
            Gets the program arguments.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.GacInstallTask">
            <summary>
            Installs assemblies into the Global Assembly Cache (GAC) by using the 
            <c>gacutil</c> SDK tool.
            </summary>
            <remarks>
            <para>
            Assemblies can be installed to the GAC with or without reference counting. 
            The full details of reference counting can be found in the SDK 
            documentation.
            </para>
            </remarks>
            <example>
              <para>Installs <c>Shared.dll</c> into the GAC.</para>
              <code>
                <![CDATA[
            <gac-install>
                <assemblies>
                    <include name="Shared.dll" />
                </assemblies>
            </gac-install>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Installs <c>Shared.dll</c> and <c>MyWeb.dll</c> into the GAC.
              </para>
              <code>
                <![CDATA[
            <gac-install>
                <assemblies>
                    <include name="Shared.dll" />
                    <include name="MyWeb.dll" />
                </assemblies>
            </gac-install>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Installs <c>Shared.dll</c> and <c>MyWeb.dll</c> into the GAC and 
              specifies reference information.
              </para>
              <code>
                <![CDATA[
            <gac-install>
                <reference scheme-type="Opaque" scheme-id="MyID" scheme-description="My description" />
                <assemblies>
                    <include name="Shared.dll" />
                    <include name="MyWeb.dll" />
                </assemblies>
            </gacinstall>
                ]]>
              </code>
            </example>
        </member>
        <member name="T:NAnt.Contrib.Tasks.GacTaskBase">
            <summary>
            Base class functionality for the GAC tasks.
            </summary>
            <remarks>
            Concrete GAC tasks extend this class in order to obtain common functionality.
            </remarks>
        </member>
        <member name="F:NAnt.Contrib.Tasks.GacTaskBase._currentAssembly">
            <summary>
            Stores the details of the assembly currently being operated against. This could be a name or
            path, depending on the concrete task.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.GacTaskBase._force">
            <summary>
            See <see cref="P:NAnt.Contrib.Tasks.GacTaskBase.Force"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.GacTaskBase._reference">
            <summary>
            See <see cref="P:NAnt.Contrib.Tasks.GacTaskBase.Reference"/>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.GacTaskBase.#ctor">
            <summary>
            Constructs and initialises an instance of <c>GacTask</c>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.GacTaskBase.StartProcess">
            <summary>
            Starts the process that is wrapped by this GAC task.
            </summary>
            <remarks>
            Provided only to seal the implementation of <c>StartProcess()</c>.
            </remarks>
            <returns>The process that was started.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.GacTaskBase.Initialize">
            <summary>
            Validates the task's configuration.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.GacTaskBase.ExecuteTask">
            <summary>
            Executes the task.
            </summary>
            <remarks>
            Provided only to seal the implementation of <c>ExecuteTask()</c>.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.GacTaskBase.AppendProgramArguments(System.Text.StringBuilder)">
            <summary>
            Appends any task-specific program arguments.
            </summary>
            <param name="sb">The <c>StringBuilder</c> on which to append program arguments.</param>
            <remarks>
            Subclasses must override this method to return the arguments with which to run the GAC task.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.GacTaskBase.BeforeExecuteTask">
            <summary>
            Invoked prior to invoking <c>ExecuteTask()</c> on the base class.
            </summary>
            <remarks>
            Allows, for example, subclasses to output useful information to the log.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTaskBase.Force">
            <summary>
            Gets or sets a value indicating whether the GAC operation will be forced.
            </summary>
            <remarks>
            The exact meaning of this property is dependent on the subclass. As such, subclasses should override this
            property to provide a valid description.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTaskBase.Reference">
            <summary>
            Specifies reference details to use when working with the GAC.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTaskBase.AssemblyList">
            <summary>
            Concrete GAC tasks must override this property to return an array of assembly names or paths
            upon which to operate.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTaskBase.ExeName">
            <summary>
            Gets the executable name for the <c>gacutil</c> command-line tool.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTaskBase.ReferenceSpecified">
            <summary>
            Specifies whether a reference was specified for the GAC task.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTaskBase.CurrentAssembly">
            <summary>
            Gets the current assembly being operated against.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTaskBase.Managed">
            <summary>
            Gets a value indiciating whether the external program is a managed
            application which should be executed using a runtime engine, if 
            configured. 
            </summary>
            <value>
            <see langword="ManagedExecutionMode.Auto" />.
            </value>
            <remarks>
            Modifying this property has no effect.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTaskBase.ProgramArguments">
            <summary>
            Gets the program arguments with which to run the <c>gacutil</c> process.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.GacInstallTask._assemblies">
            <summary>
            See <see cref="P:NAnt.Contrib.Tasks.GacInstallTask.Assemblies"/>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.GacInstallTask.#ctor">
            <summary>
            Constructs and initialises an instance of the <c>GacInstallTask</c>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.GacInstallTask.AppendProgramArguments(System.Text.StringBuilder)">
            <summary>
            Appends any install-specific arguments.
            </summary>
            <param name="sb">The <c>StringBuilder</c> to append arguments to.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.GacInstallTask.BeforeExecuteTask">
            <summary>
            Outputs log information.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacInstallTask.Assemblies">
            <summary>
            Specifies the assemblies to install.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacInstallTask.AssemblyList">
            <summary>
            Gets the assembly list to install.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacInstallTask.Force">
            <summary>
            If <see langword="true" />, the specified assemblies will be forcibly 
            installed. Any existing duplicate assemblies in the GAC will be 
            overwritten. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.GacTask">
            <summary>
            Manipulates the contents of the global assembly cache.
            </summary>
            <remarks>
              <para>
              This tasks provides some of the same functionality as the gacutil tool 
              provided in the .NET Framework SDK.
              </para>
              <para>
              Specifically, the <see cref="T:NAnt.Contrib.Tasks.GacTask"/> allows you to install assemblies 
              into the cache and remove them from the cache.
              </para>
              <para>
              Refer to the <see href="ms-help://MS.NETFrameworkSDK/cptools/html/cpgrfglobalassemblycacheutilitygacutilexe.htm">
              Global Assembly Cache Tool (Gacutil.exe)</see> for more information.
              </para>
            </remarks>
            <example>
              <para>
              Inserts assembly <c>mydll.dll</c> into the global assembly cache.
              </para>
              <code>
                <![CDATA[
            <gac assembly="mydll.dll" action="install" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Removes the assembly <c>hello</c> from the global assembly cache and 
              the native image cache.
              </para>
              <code>
                <![CDATA[
            <gac assembly="hello" action="uninstall" />
                ]]>
              </code>
              <para>
              Note that the previous command might remove more than one assembly 
              from the assembly cache because the assembly name is not fully 
              specified. For example, if both version 1.0.0.0 and 3.2.2.1 of 
              <c>hello</c> are installed in the cache, both of the assemblies will 
              be removed from the global assembly cache.
              </para>
            </example>
            <example>
              <para>
              Use the following example to avoid removing more than one assembly. 
              This command removes only the hello assembly that matches the fully 
              specified version number, culture, and public key.
              </para>
              <code>
                <![CDATA[
            <gac assembly="hello,Version=1.0.0.1,Culture=de,PublicKeyToken=45e343aae32233ca" action="uninstall" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTask.AssemblyName">
            <summary>
            The name of a file that contains an assembly manifest.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTask.ActionType">
            <summary>
            Defines the action to take with the assembly. The default is 
            <see cref="F:NAnt.Contrib.Tasks.GacTask.ActionTypes.install"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTask.AssemblyFileSet">
            <summary>
            Fileset are used to define multiple assemblies.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacTask.Managed">
            <summary>
            Gets a value indiciating whether the external program is a managed
            application which should be executed using a runtime engine, if 
            configured. 
            </summary>
            <value>
            <see langword="ManagedExecutionMode.Auto" />.
            </value>
            <remarks>
            Modifying this property has no effect.
            </remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.GacTask.ActionTypes">
            <summary>
            Defines the actions that can be performed on an assembly using the
            <see cref="T:NAnt.Contrib.Tasks.GacTask"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.GacTask.ActionTypes.install">
            <summary>
            Installs an assembly into the global assembly cache.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.GacTask.ActionTypes.overwrite">
            <summary>
            Installs an assembly into the global assembly cache. If an assembly 
            with the same name already exists in the global assembly cache, it is 
            overwritten.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.GacTask.ActionTypes.uninstall">
            <summary>
            Uninstalls an assembly from the global assembly cache.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.GacUninstallTask">
            <summary>
            Uninstalls assemblies from the Global Assembly Cache (GAC) by using the 
            <c>gacutil</c> SDK tool.
            </summary>
            <remarks>
            <para>
            Assemblies are specified via an <see cref="T:NAnt.Contrib.Types.AssemblySet"/>. Individual 
            assemblies are specified by their identity information. Only a name is 
            required but, optionally, the assembly version, culture and public key 
            token may be specified.
            </para>
            <para>
            Assemblies can be uninstalled from the GAC with or without reference 
            counting. The full details of reference counting can be found in the 
            SDK documentation.
            </para>
            </remarks>
            <example>
              <para>Uninstalls <c>Shared</c> assembly from the GAC.</para>
              <code>
                <![CDATA[
            <gac-uninstall>
                   <assemblies>
                       <assembly name="Shared" />
                   </assemblies>
            </gac-uninstall>
                ]]>
            </code>
            </example>
            <example>
              <para>
              Uninstalls <c>Shared</c> and <c>MyWeb</c> from the GAC.
              </para>
              <code>
                <![CDATA[
            <gac-uninstall>
                   <assemblies>
                       <assembly name="Shared" />
                       <assembly name="MyWeb" />
                   </assemblies>
            </gac-uninstall>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Decrements references to <c>Shared</c> in the GAC and uninstalls if 
              the reference count reaches zero.
              </para>
              <code>
                <![CDATA[
            <gac-uninstall>
                <reference scheme-type="Opaque" scheme-id="MyID" scheme-description="My description" />
                   <assemblies>
                       <assembly name="Shared" />
                   </assemblies>
            </gac-uninstall>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Uninstalls version <c>2.1.7.9201</c> of <c>Shared</c> plus the 
              Australian-cultured <c>MyWeb</c> from the GAC.
              </para>
              <code>
                <![CDATA[
            <gac-uninstall>
                   <assemblies>
                       <assembly name="Shared" version="2.1.7.9201" />
                       <assembly name="MyWeb" culture="en-AU" />
                   </assemblies>
            </gac-uninstall>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Uninstalls the neutrally-cultured, version <c>1.0.5000.0</c> of 
              <c>System.Xml</c> from the native image cache. The assembly must
              also have a public key token of <c>b77a5c561934e08a</c> to be 
              uninstalled.
              </para>
              <code>
                <![CDATA[
            <gac-uninstall native="true">
                   <assemblies>
                       <assembly name="System.Xml" version="1.0.5000.0" public-key-token="b77a5c561934e08a" culture="Neutral" />
                   </assemblies>
            </gac-uninstall>
                ]]>
              </code>
            </example>
        </member>
        <member name="F:NAnt.Contrib.Tasks.GacUninstallTask._native">
            <summary>
            See <see cref="P:NAnt.Contrib.Tasks.GacUninstallTask.Native"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.GacUninstallTask._assemblies">
            <summary>
            See <see cref="P:NAnt.Contrib.Tasks.GacUninstallTask.Assemblies"/>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.GacUninstallTask.#ctor">
            <summary>
            Constructs an instance of the <c>GacUninstallTask</c>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.GacUninstallTask.AppendProgramArguments(System.Text.StringBuilder)">
            <summary>
            Appends any install-specific arguments.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.GacUninstallTask.BeforeExecuteTask">
            <summary>
            Outputs log information.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacUninstallTask.Native">
            <summary>
            If <see langword="true" />, specifies that the assemblies should be 
            uninstalled from the native image cache. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacUninstallTask.Assemblies">
            <summary>
            Specifies the assemblies to uninstall.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacUninstallTask.AssemblyList">
            <summary>
            Gets the assembly list to uninstall.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.GacUninstallTask.Force">
            <summary>
            If <see langword="true" />, the specified assemblies will be forcibly 
            removed from the GAC. All references to the specified assemblies will
            be removed from the GAC prior to removing the assemblies themselves. 
            The default is <see langword="false" />.
            </summary>
            <remarks>
            You cannot use this option to remove an assembly that was installed using Microsoft Windows Installer.
            </remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Grep.GrepTask">
            <summary>
            Searches files for a regular-expression and produces an XML report of 
            the matches.
            </summary>
            <example>
                <para>
                    Extract all <i>TODO:</i>, <i>UNDONE:</i> or <i>HACK:</i>-
                    comment-tags from C# source files and write them to a file
                    <i>out.xml</i>. (A xslt-stylesheet could then transform it to
                    a nice html-page for your project-homepage, but that is beyond
                    the scope of this example.) 
                </para>
                <para>
                    <i>Path</i>, <i>File</i> and <i>LineNumber</i> are automatically
                    generated elements.
                </para>
                <code>
                    <![CDATA[
            <grep output="out.xml" pattern="// (?'Type'TODO|UNDONE|HACK): (\[(?'Author'\w*),(?'Date'.*)\])? (?'Text'[^\n\r]*)">
                <fileset>
                    <include name="*.cs" />
                </fileset>
            </grep>
                    ]]>
                </code>
                <para>
                    The resulting XML file for a comment-tag  
                    'TODO: [md, 14-02-2004] comment this method'
                    will look like
                </para>
                <code>
                    <![CDATA[
            <?xml version="1.0" encoding="utf-8" ?> 
            <Matches>
                <Match>
                    <Type>TODO</Type> 
                    <Text>comment this method</Text> 
                    <Path>C:\MyProjects\MyPath</Path>
                    <File>MyFile.cs</Filename> 
                    <LineNumber>146</LineNumber> 
                    <Author>md</Author>
                    <Date>14-02-2004</Date>
                </Match>
                ...
            </Matches>
                    ]]>
                </code> 
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Grep.GrepTask.ExecuteTask">
            <summary>
            Performs the regex-search.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Grep.GrepTask.WriteXml(NAnt.Contrib.Tasks.Grep.MatchCollection,System.IO.StreamWriter)">
            <summary>
            Writes the collection of matches to the specified <see cref="T:System.IO.StreamWriter"/>
            in XML format.
            </summary>
            <param name="matches">The matches to write.</param>
            <param name="writer"><see cref="T:System.IO.StreamWriter"/> to write the matches to.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Grep.GrepTask.WriteMatches(NAnt.Contrib.Tasks.Grep.MatchCollection)">
            <summary>
            Writes the specified matches to <see cref="P:NAnt.Contrib.Tasks.Grep.GrepTask.OutputFile"/>.
            </summary>
            <param name="matches">The collection of matches to write.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Grep.GrepTask.OutputFile">
            <summary>
            Specifies the name of the output file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Grep.GrepTask.Pattern">
            <summary>
            Specifies the regular-expression to search for.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Grep.GrepTask.InputFiles">
            <summary>
            The set of files in which the expression is searched.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Grep.LineCounter">
            <summary>
            This purpose of this class is to get the line-numbers within 
            a string for a specific position of a character 
            (an index, as returned by the <see cref="T:System.Text.RegularExpressions.Regex"/> class).
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Grep.LineCounter._string">
            <summary>
            The string to count in
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Grep.LineCounter._currentPos">
            <summary>
            The current position within <see cref="F:NAnt.Contrib.Tasks.Grep.LineCounter._string"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Grep.LineCounter._currentLine">
            <summary>
            The number of line feeds upto (but exluding) <see cref="F:NAnt.Contrib.Tasks.Grep.LineCounter._currentPos"/>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Grep.LineCounter.#ctor(System.String)">
            <summary>
            Constructs a line-counter for a <see cref="T:System.String"/>.
            </summary>
            <param name="str"><see cref="T:System.String"/> for which lines are counted.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Grep.LineCounter.CountTo(System.Int32)">
            <summary>
            Counts the line-numbers until the position <paramref name="pos" />
            is reached.
            </summary>
            <param name="pos">Index into the string given during construction </param>
            <returns>
            The number of lines.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Grep.LineCounter.Count(System.String,System.Char,System.Int32,System.Int32)">
            <summary>
            Counts the number of occurences of <paramref name="c"/> in the 
            range from <paramref name="start"/> to <paramref name="end"/> in 
            string <paramref name="str"/>.
            </summary>
            <param name="str"><see cref="T:System.String"/> to count in.</param>
            <param name="c">Character to count.</param>
            <param name="start">Start of range.</param>
            <param name="end">End of range.</param>
            <returns>
            The number of occurences of <paramref name="c"/> in the range from 
            <paramref name="start"/> to <paramref name="end"/> in string 
            <paramref name="str"/>.
            </returns>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Grep.Match">
            <summary>
            Encapsulation of a match of a regular-expression with the
            associated named capture-groups.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Grep.Match.values">
            <summary>
            <see cref="T:System.Collections.Hashtable"/> containing the mapping from group names 
            to values.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Grep.Match.WriteXml(System.Xml.XmlTextWriter)">
            <summary>
            Writes this match to an <see cref="T:System.Xml.XmlTextWriter"/>.
            </summary>
            <param name="xmlWriter">The <see cref="T:System.Xml.XmlTextWriter"/> to write to.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Grep.Match.Item(System.String)">
            <summary>
            Gets or sets the value for a capture group.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Grep.MatchCollection">
            <summary>
             A strongly-typed collection of <see cref="T:NAnt.Contrib.Tasks.Grep.Match"/> instances.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Grep.MatchCollection.Add(NAnt.Contrib.Tasks.Grep.Match)">
            <summary>
            Adds a <see cref="T:NAnt.Contrib.Tasks.Grep.Match"/> to this collection.
            </summary>
            <param name="match"><see cref="T:NAnt.Contrib.Tasks.Grep.Match"/> to add.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Grep.MatchCollection.Add(NAnt.Contrib.Tasks.Grep.MatchCollection)">
            <summary>
            Adds all <see cref="T:NAnt.Contrib.Tasks.Grep.Match"/> instances <paramref name="matches"/>
            to this collection.
            </summary>
            <param name="matches">Collection of <see cref="T:NAnt.Contrib.Tasks.Grep.Match"/> instances to add.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Grep.MatchCollection.Item(System.Int32)">
            <summary>
            Gets the <paramref name="idx" />th match stored in this collection.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Grep.Pattern">
            <summary>
            Encapsulation of a search pattern.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Grep.Pattern.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Tasks.Grep.Pattern"/> class from 
            a regular-expression.
            </summary>
            <param name="regex">The regular-expression.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Grep.Pattern.ConcatenateCaptures(System.Text.RegularExpressions.Group)">
            <summary>
            Concatenates the captures of <paramref name="group"/> to a string.
            </summary>
            <param name="group"><see cref="T:System.Text.RegularExpressions.Group"/> containing the captures.</param>
            <returns>
            <see cref="T:System.String"/> containg the concatenated captures.
            </returns>
            <remarks>
            A named-group can captured multiple times, when the regular
            expression has a quantifier, e.g. (// (?'Text'.*) )* will match
            multiline comments with group <i>Text</i> having a capture for
            every line.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Grep.Pattern.Extract(System.String,System.String)">
            <summary>
            Extracts the matches of this pattern from <paramref name="source" />.
            </summary>
            <param name="filename">The name of the file associated with <paramref name="source" />.</param>
            <param name="source">The source string</param>
            <returns>
            A collection of found matches.
            </returns>
        </member>
        <member name="T:NAnt.Contrib.Tasks.HxCompTask">
            <summary>
            Compiles a Microsoft HTML Help 2.0 Project.
            </summary>
            <example>
              <para>Compile a help file.</para>
              <code>
                <![CDATA[
            <hxcomp contents="MyContents.HxC" output="MyHelpFile.HxS" projectroot="HelpSourceFolder" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.Contents">
            <summary>
            The name of the contents (.HxC) file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.LogFile">
            <summary>
            ANSI/DBCS log filename.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.UnicodeLogFile">
            <summary>
            Unicode log filename.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.ProjectRoot">
            <summary>
            Root directory containing Help 2.0 project files.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.OutputFile">
            <summary>
            Output (.HxS) filename.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.NoInformation">
            <summary>
            Generate no informational messages.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.NoErrors">
            <summary>
            Generate no error messages.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.NoWarnings">
            <summary>
            Generate no warning messages.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.UncompileFile">
            <summary>
            File to be decompiled.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.UncompileOutputDir">
            <summary>
            Directory to place decompiled files into.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxCompTask.ProgramArguments">
            <summary>
            Arguments of program to execute
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.HxRegTask">
            <summary>
            Registers a Microsoft HTML Help 2.0 Collection.
            </summary>
            <example>
              <para>Register a help namespace.</para>
              <code>
                <![CDATA[
            <hxreg namespace="MyProduct.MyHelp" title="MyProductHelp" collection="MyHelp.HxC" helpfile="MyHelp.HxS" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.Namespace">
            <summary>Help collection namespace.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.Title">
            <summary>Title identifier.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.Collection">
            <summary>Collection (.HxC) filename. </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.Description">
            <summary>Description of the namespace.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.HelpFile">
            <summary>Help (.HxS) filename.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.Index">
            <summary>Index (.HxI) filename.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.SearchFile">
            <summary>Combined full-text search (.HxQ) filename.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.AttrIndex">
            <summary>Combined attribute index (.HxR) filename.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.Language">
            <summary>Language ID.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.Alias">
            <summary>Alias.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.CommandFile">
            <summary>Filename of a file containing HxReg commands.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.UnRegister">
            <summary>Unregister a namespace, title, or alias.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.HxRegTask.ProgramArguments">
            <summary>
            Arguments of program to execute
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.KillTask">
            <summary>
            Immediately stops a given process.
            </summary>
            <remarks>
            When used in combination with the <see cref="T:NAnt.Core.Tasks.ExecTask"/>, it allows 
            processed to be spawned for a certain duration or task, and then 
            stopped.
            </remarks>
            <example>
              <para>
              Starts a server and a client process on the local computer, and stops
              the server process once the client process has finished executing.
              </para>
              <code>
                <![CDATA[
            <exec program="server.exe" pidproperty="server.pid" spawn="true" />
            <exec program="client.exe" />
            <kill pid="${server.pid}" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.KillTask.ProcessId">
            <summary>
            The unique identifier of the process to stop.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.KillTask.Machine">
            <summary>
            The name of the computer on the network on which the process must
            be stopped. The default is the local computer.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.KillTask.TimeOut">
            <summary>
            The maximum amount of time to wait until the process is stopped,
            expressed in milliseconds.  The default is to wait indefinitely.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.LoadPropertiesTask">
            <summary>
            Loads a file's contents as NAnt properties.
            </summary>
            <remarks>
              <para>
              Each line in a .properties file stores a single property, with the
              name and value separated by an equals sign.
              </para>
              <para>
              Empty lines and lines that start with a '#' character are skipped.
              </para>
            </remarks>
            <example>
              <code>
                <![CDATA[
            <loadproperties file="deployment.properties" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.LoadPropertiesTask.Encoding">
            <summary>
            The encoding to use when loading the file. The default is the
            system's current ANSI code page.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.LoadPropertiesTask.File">
            <summary>
            The file to load properties from.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.LoadPropertiesTask.Filters">
            <summary>
            Chain of filters used to alter the file's content as it is
            copied.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.MgmtClassGenTask">
            <summary>
            A task that generates strongly typed WMI classes using 
            <c>mgmtclassgen.exe</c>.
            </summary>
            <remarks>
            The Management Strongly Typed Class Generator 
            enables you to quickly generate an early-bound 
            managed class for a specified Windows Management 
            Instrumentation (WMI) class. The generated 
            class simplifies the code you must write to access 
            an instance of the WMI class.
            </remarks>
            <example>
              <code>
                <![CDATA[
            <mgmtclassgen 
                wmiclass="Win32_LogicalDisk" 
                language="CS"
                machine="SomeMachine"
                path="Root\cimv2"
                namespace="Winterdom.WMI"
                out="${outputdir}\LogicalDisk.cs"
                username="Administrator"
                password="password"
            />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MgmtClassGenTask.Initialize">
            <summary>
            Initializes task and ensures the supplied attributes are valid.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MgmtClassGenTask.ExecuteTask">
            <summary>
            This is where the work is done
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.WmiClass">
            <summary>
            Specifies the name of the WMI class
            to generate the strongly typed class
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.Language">
            <summary>
            Specifies the language in which to generate
            the class. Possible values are: CS, VB, JS
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.Machine">
            <summary>
            Specifies the machine to connect to.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.Path">
            <summary>
            Specifies the path to the WMI namespace
            that contains the class.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.Namespace">
            <summary>
            Namespace of the generated .NET class
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.OutFile">
            <summary>
            Path of the file to generate
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.Username">
            <summary>
            User name to use when connecting to
            the specified machine
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.Password">
            <summary>
            Password to use when connecting to the 
            specified machine
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.ProgramFileName">
            <summary>
            Filename of program to execute
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MgmtClassGenTask.ProgramArguments">
            <summary>
            Arguments of program to execute
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Mks.BaseTask">
            <summary>
            The base abstract class for all MKS Tasks.  
            </summary>
            <remarks>
            Provides the core attributes, and functionality for opening an item 
            in a MKS database.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Mks.BaseTask.Open">
            <summary>
            Opens the MKS database and sets the reference to the specified
            item and version.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Mks.BaseTask.Password">
            <summary>
            The password to use to login to the MKS database.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Mks.BaseTask.UserName">
            <summary>
            The name of the user needed to access the MKS database.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Mks.BaseTask.Host">
            <summary>
            The name of the host MKS server to connect to
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Mks.BaseTask.Port">
            <summary>
            The port number on which the host server is accepting requests
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Mks.CheckpointTask">
            <summary>
            Checkpoints a project in an MKS Source Integrity database.
            </summary>
            <example>
              <para>Checkpoint a project in an MKS database.</para>
              <code><![CDATA[
                <mkscheckpoint
                  username="myusername"
                  password="mypassword"
                  host="servername"
                  port="123"
                  project="myproject"
                  recursive="false"
                  label="test from nant"
                  description="this is a test description"
                />
              ]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Mks.CheckpointTask.Label">
            <summary>
            The label to apply to the checkpoint.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Mks.CheckpointTask.ProjectName">
            <summary>
            The project to checkpoint.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Mks.CheckpointTask.Recursive">
            <summary>
            Apply label to all members. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Mks.CheckpointTask.Description">
            <summary>
            The description of the checkpoint.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Mks.GetTask">
            <summary>
            Retrieves an item or project from MKS Source Integrity.
            </summary>
            <example>
              <para>Synchronise sandbox with MKS project.</para>
              <code><![CDATA[
                <mksget
                  username="myusername"
                  password="mypassword"
                  host="servername"
                  port="123"
                  localpath="c:\sourcecode"
                  project="e:/MKS projects/myproject/testproject.pj"
                />
              ]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Mks.GetTask.LocalPath">
            <summary>
            The path to the local working directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Mks.GetTask.ProjectName">
            <summary>
            The project to get from MKS.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Mks.ChangesTask">
            <summary>
            Generates an XML file containing the differences between the sandbox and
            the project in the MKS database.
            </summary>
            <example>
              <para>Get changes to a project in an MKS database.</para>
              <code><![CDATA[
                <mkschanges
                  username="myusername"
                  password="mypassword"
                  host="servername"
                  port="123"
                  sandbox="mysandbox.pj"
                  output="mychanges.xml"
                />
              ]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Mks.ChangesTask.Sandbox">
            <summary>
            The project to retrieve the changes for.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Mks.ChangesTask.OutputFile">
            <summary>
            The file where the output will be stored in XML format.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.MsbuildTask">
            <summary>
            Builds the specified targets in the project file using <c>MSBuild</c>.
            </summary>
            <remarks>
              <para>    
              If a project file is not specified, MSBuild searches the current 
              working directory for a file that has a file extension that ends in
              "proj" and uses that file.
              </para>
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MsbuildTask.ExecuteTask">
            <summary>
            Starts the external process and captures its output.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MsbuildTask.ProjectFile">
            <summary>
            The project to build.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MsbuildTask.Properties">
            <summary>
            Set or override these project-level properties.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MsbuildTask.Target">
            <summary>
            Build these targets in this project. Use a semicolon or a comma
            comma to separate multiple targets.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MsbuildTask.NoAutoResponse">
            <summary>
            Do not auto-include the MSBuild.rsp file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MsbuildTask.Verbosity">
            <summary>
            Specifies the amount of information to display in the MSBuild log.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MsbuildTask.Managed">
            <summary>
            Gets a value indiciating whether the external program is a managed
            application which should be executed using a runtime engine, if 
            configured. 
            </summary>
            <value>
            <see langword="ManagedExecutionMode.Auto" />.
            </value>
            <remarks>
            Modifying this property has no effect.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.MsbuildTask.ProgramArguments">
            <summary>
            Gets the command line arguments for the external program.
            </summary>
            <value>
            The command line arguments for the external program.
            </value>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MsbuildTask.VerbosityLevelConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Tasks.MsbuildTask.VerbosityLevelConverter"/>
            class.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.MsbuildTask.VerbosityLevelConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the 
            specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object. If a <see langword="null"/> is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
        </member>
        <member name="T:NAnt.Contrib.Tasks.NGenTask">
            <summary>
            Pre-translates native code for an assembly containing IL (Intermediary 
            Language bytecode) on the Windows platform.
            </summary>
            <example>
              <code>
                <![CDATA[
            <ngen assembly="MyAssembly.dll" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NGenTask.Assembly">
            <summary>Assembly path or display name.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NGenTask.Show">
            <summary>If existing images should be shown.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NGenTask.Delete">
            <summary>If existing images should be deleted.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NGenTask.Debug">
            <summary>If an image should be generated which
            can be used under a debugger.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NGenTask.DebugOptimized">
            <summary>If an image should be generated which
            can be used under a debugger in optimized
            debugging mode.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NGenTask.Profiled">
            <summary>If an image should be generated which
            can be used under a profiler.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NGenTask.ProgramArguments">
            <summary>
            Arguments of program to execute
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.NUnit2Report.NUnit2ReportTask">
            <summary>
            A task that generates a summary HTML
            from a set of NUnit xml report files.
            </summary>
            <remarks>
              <para>
              This task can generate a combined HTML report out of a set of NUnit
              result files generated using the XML Result Formatter.
              </para>
              <para>
              All the properties defined in the current project will be passed
              down to the XSLT file as template parameters, so you can access 
              properties such as nant.project.name, nant.version, etc.
              </para>
            </remarks>
            <example>
              <code>
                <![CDATA[
            <nunit2report todir="${outputdir}">
                <fileset>
                    <includes name="${outputdir}\results.xml" />
                </fileset>
            </nunit2report>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnit2Report.NUnit2ReportTask.Initialize">
            <summary>
            Initializes task and ensures the supplied attributes are valid.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnit2Report.NUnit2ReportTask.ExecuteTask">
            <summary>
            This is where the work is done
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnit2Report.NUnit2ReportTask.LoadStyleSheet(System.String)">
             <summary>
             Load a stylesheet from the assemblies resource stream.
             </summary>
            <param name="xslFileName">File name of the file to extract.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnit2Report.NUnit2ReportTask.LoadStyleSheet(System.IO.FileInfo)">
             <summary>
             Load a stylesheet from the file system.
             </summary>
            <param name="xslFile">The XSLT file to load.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnit2Report.NUnit2ReportTask.CreateSummaryXmlDoc">
            <summary>
            Initializes the XmlDocument instance
            used to summarize the test results
            </summary>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnit2Report.NUnit2ReportTask.GetPropertyList">
            <summary>
            Builds an XsltArgumentList with all
            the properties defined in the
            current project as XSLT parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnit2Report.NUnit2ReportTask.Write(System.IO.StringReader,System.String)">
            <summary>
             Run the transform and output to filename
            </summary>
            <param name="stream"></param>
            <param name="fileName"></param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NUnit2Report.NUnit2ReportTask.Format">
            <summary>
            The format of the generated report. The default is 
            <see cref="F:NAnt.Contrib.Types.NUnit2Report.ReportFormat.NoFrames"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NUnit2Report.NUnit2ReportTask.Language">
            <summary>
            The output language.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NUnit2Report.NUnit2ReportTask.OpenDescription">
            <summary>
            Open all description method. Default to "false".
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NUnit2Report.NUnit2ReportTask.ToDir">
            <summary>
            The directory where the files resulting from the transformation
            should be written to. The default is the project's base directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NUnit2Report.NUnit2ReportTask.XmlFileSet">
            <summary>
            Set of XML files to use as input
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NUnit2Report.NUnit2ReportTask.XmlSummaries">
            <summary>
            Set of summary XML files to use as input.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NUnit2Report.NUnit2ReportTask.XslFile">
            <summary>
            XSLT file used to generate the report if <see cref="P:NAnt.Contrib.Tasks.NUnit2Report.NUnit2ReportTask.Format"/> is 
            <see cref="F:NAnt.Contrib.Types.NUnit2Report.ReportFormat.NoFrames"/>.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.NUnit2Report.NUnit2ReportTask.LocalResXmlResolver">
            <summary>
            Custom XmlResolver used to load the 
            XSLT files out of this assembly resources.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnit2Report.NUnit2ReportTask.LocalResXmlResolver.GetEntity(System.Uri,System.String,System.Type)">
            <summary>
            Loads the specified file from our internal resources if its there
            </summary>
            <param name="absoluteUri"></param>
            <param name="role"></param>
            <param name="objToReturn"></param>
            <returns></returns>
        </member>
        <member name="T:NAnt.Contrib.Tasks.NUnitReportTask">
            <summary>
            A task that generates a summary HTML
            from a set of NUnit xml report files.
            Loosely based on Erik Hatcher JUnitReport for Ant.
            </summary>
            <remarks>
            This task can generate a combined HTML report out of a
            set of NUnit result files generated using the 
            XML Result Formatter.
            
            By default, NUnitReport will generate the combined
            report using the NUnitSummary.xsl file located at the
            assembly's location, but you can specify a different
            XSLT template to use with the <code>xslfile</code>
            attribute.
            
            Also, all the properties defined in the current
            project will be passed down to the XSLT file as 
            template parameters, so you can access properties
            such as nant.project.name, nant.version, etc.
            </remarks>
            <example>
              <code><![CDATA[
              <nunitreport 
                    out="${outputdir}\TestSummary.html"
                    >
                 <fileset>
                    <include name="${outputdir}\Test-*.xml" />
                 </fileset>
              </nunitreport>
              
              ]]></code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnitReportTask.Initialize">
            <summary>
            Initializes task and ensures the supplied attributes are valid.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnitReportTask.ExecuteTask">
            <summary>
            This is where the work is done
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnitReportTask.CreateSummaryXmlDoc">
            <summary>
            Initializes the XmlDocument instance
            used to summarize the test results
            </summary>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnitReportTask.GetPropertyList">
            <summary>
            Builds an XsltArgumentList with all
            the properties defined in the 
            current project as XSLT parameters.
            </summary>
            <returns>Property List</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnitReportTask.LoadTransform">
            <summary>
            Loads the XSLT Transform
            </summary>
            <remarks>
            This method will load the file specified
            through the the xslfile attribute, or
            the default transformation included
            as a managed resource.
            </remarks>
            <returns>The Transformation to use</returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NUnitReportTask.OutFilename">
            <summary>
            Name of Output HTML file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NUnitReportTask.XslFile">
            <summary>
            XSLT file used to generate the report.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.NUnitReportTask.XmlFileSet">
            <summary>
            Set of XML files to use as input
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.NUnitReportTask.LocalResXmlResolver">
            <summary>
            Custom XmlResolver used to load the 
            XSLT files out of this assembly resources.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.NUnitReportTask.LocalResXmlResolver.GetEntity(System.Uri,System.String,System.Type)">
            <summary>
            Loads the XSLT file
            </summary>
            <param name="absoluteUri"></param>
            <param name="role"></param>
            <param name="objToReturn"></param>
            <returns></returns>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Add">
            <summary>
            Open file(s) in a client workspace for addition to the depot.
            </summary>
            <example>
              <para>
              Add all cs files under the given directory into the "new" changelist 
              (will be created if it doesn't already exist).
              </para>
              <code>
                <![CDATA[
            <p4add file="C:\Src\Project\*.cs" changelist="new" />
                ]]>
              </code>
            </example>
            <example>
              <para>Add Test.txt into the default changelist.</para>
              <code>
                <![CDATA[
            <p4add file="C:\Src\Project\Test.txt" />
                ]]>
              </code>
            </example>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Base">
            <summary>
            Base class for Perforce (P4) NAnt tasks. See individual task for example usage.
            <seealso cref="T:NAnt.Contrib.Tasks.Perforce.P4Add">P4Add</seealso>
            <seealso cref="T:NAnt.Contrib.Tasks.Perforce.P4Change">P4Change</seealso>
            <seealso cref="T:NAnt.Contrib.Tasks.Perforce.P4Delete">P4Delete</seealso>
            <seealso cref="T:NAnt.Contrib.Tasks.Perforce.P4Edit">P4Edit</seealso>
            <seealso cref="T:NAnt.Contrib.Tasks.Perforce.P4Label">P4Label</seealso>
            <seealso cref="T:NAnt.Contrib.Tasks.Perforce.P4Labelsync">P4Labelsync</seealso>
            <seealso cref="T:NAnt.Contrib.Tasks.Perforce.P4Print">P4Print</seealso>
            <seealso cref="T:NAnt.Contrib.Tasks.Perforce.P4Reopen">P4Reopen</seealso>
            <seealso cref="T:NAnt.Contrib.Tasks.Perforce.P4Revert">P4Revert</seealso>
            <seealso cref="T:NAnt.Contrib.Tasks.Perforce.P4Submit">P4Submit</seealso>
            <seealso cref="T:NAnt.Contrib.Tasks.Perforce.P4Sync">P4Sync</seealso>
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Base.ExecuteTask">
            <summary>
            Execute the perforce command assembled by subclasses.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Base.Port">
            <summary>
            The p4 server and port to connect to. The default is "perforce:1666".
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Base.Client">
            <summary>
            The p4 client spec to use. The default is the current client.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Base.User">
            <summary>
            The p4 username. The default is the current user.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Base.View">
            <summary>
            The client, branch or label view to operate upon. The default is
            "//...".
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Base.Script">
            <summary>
            Prepends a descriptive field (for example, text:, info:, error:, exit:) 
            to each line of output produced by a Perforce command. This is most 
            often used when scripting. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Base.ProgramArguments">
            <summary>
            Gets the command line arguments for the external program.
            </summary>
            <value>
            The command line arguments for the external program.
            </value>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Base.ExeName">
            <summary>
            Override the ExeName paramater for p4.exe
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Base.CommandSpecificArguments">
            <summary>
            Derived classes should override this to provide command-specific
            commandline arguments.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Add.getSpecificCommandArguments">
            <summary>
            Build the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Add.File">
            <summary>
            File(s) to add. File name can contain wildcard characters. (Note: 
            this is not using p4 wildcard syntax, but the OS wildcards).
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Add.Changelist">
            <summary>
            Changelist that files will be added into. Changelist will be created 
            if not already present.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Add.Type">
            <summary>
            File Type settings. Applied to all files in the <see cref="P:NAnt.Contrib.Tasks.Perforce.P4Add.File"/> 
            parameter.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Add.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Change">
            <summary>
            Create or delete a changelist specification.
            </summary>
            <example>
              <para>Create a new changelist called "mynewchange".</para>
              <code>
                <![CDATA[
            <p4change changelist="mynewchange" />
                ]]>
              </code>
            </example>
            <example>
              <para>Delete the changelist called "mynewchange".</para>
              <code>
                <![CDATA[
            <p4change changelist="mynewchange" delete="true" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Change.getSpecificCommandArguments">
            <summary>
            Builds the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Change.Changelist">
            <summary>
            Changelist to create or delete.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Change.Delete">
            <summary>
            If <see langword="false" /> causes passed in changelist to be 
            deleted. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Change.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Client">
            <summary>
            Add/modify/delete a client spec in perforce.
            </summary>
            <example>
              <para>
              Add a client (modify if already present and have sufficient rights).
              </para>
              <code>
                <![CDATA[
            <p4client clientname="myClient" view="//root/test/..." />
                ]]>
              </code>
            </example>
            <example>
              <para>Delete a client.</para>
              <code>
                <![CDATA[
            <p4client delete="true" clientname="myClient" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Client.getSpecificCommandArguments">
            <summary>
            Builds the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Client.ClientName">
            <summary>
            Name of client to create/delete.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Client.Root">
            <summary>
            Root path for client spec.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Client.Delete">
            <summary>
            Delete the named client. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Client.Force">
            <summary>
            Force a delete even if files are open. The default is 
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Client.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Delete">
            <summary>
            Open file(s) in a client workspace for deletion from the depot.
            </summary>
            <example>
              <para>
              Mark all cs files under the give view for deletion and place them in 
              the "Deleting" changelist.
              </para>
              <code>
                <![CDATA[
            <p4delete view="//Root/ProjectX/Test/...*.cs" changelist="Deleting" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Delete.getSpecificCommandArguments">
            <summary>
            Builds the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Delete.Changelist">
            <summary>
            Changelist to place the marked for deletion item into.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Delete.View">
            <summary>
            The client, branch or label view to operate upon.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Delete.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Edit">
            <summary>
            Opens file(s) in a client workspace for edit.
            </summary>
            <example>
              <para>
              Open all files in the ProjectX Test folder for edit, and place into 
              the default changelist.
              </para>
              <code>
                <![CDATA[
            <p4edit view="//Root/ProjectX/Test/..." />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Open all *.txt files in the ProjectX Test folder for edit, and place 
              into the "testing" changelist.
              </para>
              <code>
                <![CDATA[
            <p4edit view="//Root/ProjectX/Test/...*.txt" changelist="testing" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Edit.getSpecificCommandArguments">
            <summary>
            Builds the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Edit.Changelist">
            <summary>
            Changelist to place the opened files into.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Edit.Type">
            <summary>
            File Type settings.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Edit.View">
            <summary>
            The client, branch or label view to operate upon.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Edit.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Info">
            <summary>
            Returns information from the "p4 info" command back into variables for 
            use within the build process.
            </summary>
            <example>
              <para>Fill the variables using the task.</para>
              <code>
                <![CDATA[
            <p4info user="myuser" client="myclient" host="myhost" root="myroot" />
            <echo message="User: ${myuser} - Client: ${myclient} - Host: ${myhost} - Root: ${myroot}" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Info.User">
            <summary>
            The name of the property to store the p4 user name in.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Info.Client">
            <summary>
            The name of the property to store the p4 client name in.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Info.Host">
            <summary>
            The name of the property to store the p4 host name in.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Info.Root">
            <summary>
            The name of the property to store the p4 client root in.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Label">
            <summary>
            Create or edit a label specification and its view.
            </summary>
            <example>
              <para>Create a new label called "SDK_V1.2".</para>
              <code>
                <![CDATA[
            <p4label label="SDK_V1.2" view="//Root/ProjectX/Test/...*.txt" />
                ]]>
              </code>
            </example>
            <example>
              <para>Delete the previously created label.</para>
              <code>
                <![CDATA[
            <p4label label="SDK_V1.2" delete="true" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Label.getSpecificCommandArguments">
            <summary>
            Builds the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Label.Label">
            <summary>
            Name of label to create/delete.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Label.Delete">
            <summary>
            Delete the named label. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Label.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Labelsync">
            <summary>
            Synchronize a label with the contents of the current client workspace.
            </summary>
            <example>
              <para>Apply a previously created label to the specified view.</para>
              <code>
                <![CDATA[
            <p4labelsync label="SDK_V1.2" view="//Root/..." />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Labelsync.getSpecificCommandArguments">
            <summary>
            Builds the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Labelsync.Label">
            <summary>
            Name of the label to sync the specified or default view with.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Labelsync.Delete">
            <summary>
            Delete the view defined in the label, or matching the input view 
            from the label. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Labelsync.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Lock.Changelist">
             <summary>
             Changelist to place the opened files into.
            
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Lock.File">
            <summary>
            File Type settings.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Lock.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Print">
            <summary>
            Fetch a specific file from a Perforce depot without needing a clientspec 
            to map it.
            </summary>
            <example>
              <code>
                <![CDATA[
            <p4print file="//depot/foo/mainline/clientspec" outputfile=".\clientspec" />
            <p4client input=".\clientspec" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Print.getSpecificCommandArguments">
            <summary>
            Builds the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Print.File">
            <summary> 
            The depot or local filename (including optional path) of the file 
            to fetch.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Print.P4OutputFile">
            <summary> 
            The local filename to write the fetched file to.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Print.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Reopen">
            <summary>
            Move opened files between changelists or change the files’ type.
            </summary>
            <remarks>
            This task has two different but related uses:
            Moving opened files between changelists (default or named).
            Changing the type of an opened file.
            </remarks>
            <example>
              <para>
              Move the specified files matching the view into the "New" changelist.
              </para>
              <code>
                <![CDATA[
            <p4reopen view="//Root/...Version.xml" changelist="New" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Modify the specified files matching the view to the given file type. 
              The change won't affect the repository until submitted.
              </para>
              <code>
                <![CDATA[
            <p4reopen view="//Root/...*.res" type="binary" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Reopen.getSpecificCommandArguments">
            <summary>
            Builds the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Reopen.View">
            <summary>
            The client, branch or label view to operate upon.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Reopen.Changelist">
            <summary>
            Changelist to place the reopened files into.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Reopen.Type">
            <summary>
            File Type settings.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Reopen.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Revert">
            <summary>
            Discard changes made to open files.
            </summary>
            <example>
              <para>Revert all txt files in a given changelist.</para>
              <code>
                <![CDATA[
            <p4revert changelist="Test" view="//...*.txt" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Revert all unchanged files opened in the given changelist.
              </para>
              <code>
                <![CDATA[
            <p4revert changelist="Test" revertunchanged="true" />
                ]]>
              </code>
            </example>
            <example>
              <para>Revert all unchanged files opened in any changelist.</para>
              <code>
                <![CDATA[
            <p4revert revertunchanged="true" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Revert.getSpecificCommandArguments">
            <summary>
            Builds the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Revert.Changelist">
            <summary>
            Changelist to perform the revert action on. optional.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Revert.RevertUnchanged">
            <summary>
            Revert all unchanged or missing files from the changelist. default is false. optional.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Revert.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Set">
            <summary>
            Set registry variables that perforce uses.
            </summary>
            <remarks>
            Note: the environment variables that p4 uses will be set, but will not
            be validated.
            </remarks>
            <example>
              <para>Modify any of the three variables (at least one required).</para>
              <code>
                <![CDATA[
            <p4set client="myClient" user="jonb" port="server:1666" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Set.getSpecificCommandArguments">
            <summary>
            Builds the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Set.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Submit">
            <summary>
            Send changes made to open files to the depot.
            </summary>
            <example>
              <para>
              Submit changelist "Temp", but first revert all unchanged files in the 
              changelist.
              </para>
              <code>
                <![CDATA[
            <p4submit changelist="Temp" revertunchanged="true" />
                ]]>
              </code>
            </example>
            <example>
              <para>Submit changelist, but leave the files open afterwards.</para>
              <code>
                <![CDATA[
            <p4submit changelist="Temp" remainopen="true" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Submit.getSpecificCommandArguments">
            <summary>
            Builds the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Submit.Changelist">
            <summary>
            Changelist to submit.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Submit.RemainOpen">
            <summary>
            Keep the files open after submitting. The default is 
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Submit.RevertUnchanged">
            <summary>
            Revert all unchanged or missing files from the changelist.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Submit.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.P4Sync">
             <summary>
             Synchronize client space to a Perforce depot view.
             </summary>  
             <example>
               <para>
               Sync to head using P4USER, P4PORT and P4CLIENT settings specified.
               </para>
               <code>
                 <![CDATA[
             <p4sync 
                 view="//projects/foo/main/source/..."
                 user="fbloggs"
                 port="km01:1666"
                 client="fbloggsclient"
             />
                 ]]>
               </code>
             </example>
             <example>
               <para>Sync to head using default p4 environment variables.</para>
               <code>
                 <![CDATA[
             <p4sync view="//projects/foo/main/source/..." />
                 ]]>
               </code>
             </example>
             <example>
               <para>Force a re-sync to head, refreshing all files.</para>
               <code>
                 <![CDATA[
             <p4sync force="true" view="//projects/foo/main/source/..." />
                 ]]>
               </code>
             </example>
             <example>
               <para>Sync to a label.</para>
               <code>
                 <![CDATA[
             <p4sync label="myPerforceLabel" />
                 ]]>
               </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.P4Sync.getSpecificCommandArguments">
            <summary>
            Builds the command string for this particular command.
            </summary>
            <returns>
            The command string for this particular command.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Sync.Label">
            <summary> Label to sync client to; optional.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Sync.Force">
            <summary>
            Force a refresh of files. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Perforce.P4Sync.CommandSpecificArguments">
            <summary>
            This is an override used by the base class to get command specific args.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Perforce.Perforce">
            <summary>
            Static helper class for Perforce tasks.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.Perforce.GetUserName">
            <summary>
            ask p4 for the user name
            </summary>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.Perforce.GetClient">
            <summary>
            ask p4 for the client name
            </summary>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.Perforce.GetChangelistNumber(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get a changelist number based on on its name
            </summary>
            <param name="User"></param>
            <param name="Client"></param>
            <param name="ChangeList"></param>
            <param name="CreateIfMissing"></param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.Perforce.GetChangelistNumber(System.String,System.String,System.String)">
            <summary>
            Get a changelist number based on on its name
            </summary>
            <param name="User"></param>
            <param name="Client"></param>
            <param name="ChangeList"></param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.Perforce.CreateLabel(System.String,System.String,System.String)">
            <summary>
            Create a new label
            </summary>
            <param name="User"></param>
            <param name="Labelname"></param>
            <param name="View"></param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.Perforce.CreateClient(System.String,System.String,System.String,System.String)">
            <summary>
            Create a new Client
            </summary>
            <param name="User"></param>
            <param name="Clientname"></param>
            <param name="Root"></param>
            <param name="View"></param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.Perforce.CreateChangelist(System.String,System.String,System.String)">
            <summary>
            Create a new changelist
            </summary>
            <param name="User"></param>
            <param name="Client"></param>
            <param name="ChangeList">Description of Changelist</param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.Perforce.GetP4Info(System.String)">
            <summary>
            call the p4 process to 
            </summary>
            <param name="SearchPattern"></param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.Perforce.GetP4Info(System.String[])">
            <summary>
            call the p4 process to 
            </summary>
            <param name="SearchPatterns"></param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.Perforce.getProcessOutput(System.String,System.String,System.String)">
            <summary>
            Execute a process and return its ourput
            </summary>
            <param name="exe"></param>
            <param name="prms"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.Perforce.RunProcess(System.String,System.String,System.String,System.String@)">
            <summary>
            Execute a process and return its ourput
            </summary>
            <param name="exe"></param>
            <param name="prms"></param>
            <param name="input"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Perforce.Perforce.RunProcess(System.String,System.String,System.String)">
            <summary>
            Execute a process by name
            </summary>
            <param name="exe"></param>
            <param name="prms"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask">
            <summary>
            Adds files to a PVCS repository.
            </summary>
            <remarks>
            <para>
            This task uses the <c>addfiles</c> PCLI command to add files to a PVCS repository.
            </para>
            </remarks>
            <example>
              <para>
              Adds <c>File1.txt</c> and <c>File2.txt</c> to the root level of the 
              project database specified by the <c>project-database</c> property.
              </para>
              <code>
                <![CDATA[
            <pvcsaddfiles projectdatabase="${project-database}" archivedescription="Adding files to source control.">
                <entities>
                    <entity name="C:\Data\File1.txt"/>
                    <entity name="C:\Data\Folder\File2.txt"/>
                </entities>
            </pvcsaddfiles>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Adds <c>File1.txt</c> and <c>File2.txt</c> to the <c>folder</c> project
              of the project database specified by the <c>project-database</c> 
              property.
              </para>
              <code>
                <![CDATA[
            <pvcsaddfiles projectdatabase="${project-database}" archivedescription="Adding files to source control." projectpath="/folder">
                <entities>
                    <entity name="C:\Data\File1.txt"/>
                    <entity name="C:\Data\Folder\File2.txt"/>
                </entities>
            </pvcsaddfiles>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Adds <c>another_file.txt</c> and all files and folders at and below 
              <c>C:\Data</c> to the project database specified by the <c>project-database</c>
              property.
              </para>
              <code>
                <![CDATA[
            <pvcsaddfiles projectdatabase="${project-database}" archivedescription="Adding files to source control." includesubprojects="true">
                <entities>
                    <entity name="C:\Data\"/>
                    <entity name="C:\Temp\another_file.txt"/>
                </entities>
            </pvcsaddfiles>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Adds all files at and below <c>C:\Data\</c> to the project database specified by the <c>project-database</c>
              property. Workfiles will be copied to the workfile location and will overwrite any existing files (as
              dictated by the <c>copymode</c> attribute). The relevant revisions will be locked in PVCS. Added files
              will be assigned the <c>SYSTEST</c> promotion group. 
              </para>
              <code>
                <![CDATA[
            <pvcsaddfiles projectdatabase="${project-database}" archivedescription="Files." copymode="CopyWorkfileWithOverwrite" lock="true" promotiongroup="SYSTEST" includesubprojects="true">
                <entities>
                    <entity name="C:\Data\"/>
                </entities>
            </pvcsaddfiles>
                ]]>
              </code>
            </example>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSMultipleEntityTask">
            <summary>
            Base class for all PVCS project database tasks that operate against one or more entities.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask">
            <summary>
            A base class for PVCS tasks that deal with project databases.
            </summary>
            <remarks>
            <para>
            This class can be used as a base class for PVCS tasks that operate against a project database. It provides
            common attributes and functionality for such tasks.
            </para>
            </remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSTask">
            <summary>
            Base class functionality for all PVCS tasks.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSTask._pvcsBin">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSTask.PVCSBin"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSTask._process">
            <summary>
            This is the PCLI process that is run by this task.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSTask.StartProcess">
            <summary>
            Starts the process that is wrapped by this PVCS task.
            </summary>
            <remarks>
            Provided only to seal the implementation of <c>StartProcess()</c>.
            </remarks>
            <returns>The process that was started.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSTask.ExecuteTask">
            <summary>
            Executes the task.
            </summary>
            <remarks>
            Provided only to seal the implementation of <c>ExecuteTask()</c>.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSTask.PrepareProcess(System.Diagnostics.Process)">
            <summary>
            Prepares the process wrapped by this task for execution.
            </summary>
            <param name="process">The process to prepare for execution.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)">
            <summary>
            Allows tasks to add their task-specific arguments to the collection of arguments to be passed to the
            PVCS command-line tool.
            </summary>
            <param name="arguments">The collection of arguments.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSTask.GetProgramArguments">
            <summary>
            Constructs the program arguments that should be used when executing the wrapped PVCS process.
            </summary>
            <returns>A <c>string</c> containing the program arguments.</returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSTask.PVCSBin">
            <summary>
            Gets or sets the location of the PVCS binary command-line tools.
            </summary>
            <remarks>
            <para>
            Generally, the PVCS command-line tools will be available on the current path. However, if this is not
            the case then this property allows an exact location to be specified. If this property is not set, the
            task will assume that the PVCS binaries are available on the current path.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSTask.Process">
            <summary>
            Gets or sets the process that is run as a result of running this task.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSTask.ProgramArguments">
            <summary>
            Gets the program arguments with which to run the wrapped PVCS process.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSTask.ExeName">
            <summary>
            Gets the executable name for the command-line tool to run for the PVCS task.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSTask.PCLICommandName">
            <summary>
            Gets the PCLI command name that corresponds to the operation the task performs.
            </summary>
            <remarks>
            <para>
            By default, this property will return the name of the task minus the starting "pvcs". Subclasses need
            only override this property if there is a mismatch between the task name and the PCLI command name.
            </para>
            </remarks>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask._includeSubprojects">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask.IncludeSubprojects"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask._password">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask.Password"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask._projectDatabase">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask.ProjectDatabase"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask._projectPath">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask.ProjectPath"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask._userId">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask.UserId"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask._workspace">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask.Workspace"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask._includeSubProjectsUsed">
            <summary>
            Set to <c>true</c> if the <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask.IncludeSubprojects"/> property is manipulated. Some tasks don't
            support this property and so an exception will be thrown if the property is used.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)">
            <see cref="M:NAnt.Contrib.Tasks.PVCS.PVCSTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)"/>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask.IncludeSubprojects">
            <summary>
            Gets or sets a value indicating whether the operation should include subprojects.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-z</c> command-line option.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask.SupportsIncludeSubprojects">
            <summary>
            Gets a value indicating whether the specific task implementation supports the <c>includesubprojects</c>
            task attribute. If not, an exception will be thrown if an attempt is made to set the attribute.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask.Password">
            <summary>
            Gets or sets the password to use when connecting to the project database.
            </summary>
            <remarks>
            <para>
            This is equivalent to the password part of the <c>-id</c> command-line option.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask.UserId">
            <summary>
            Gets or sets the user ID to use when connecting to the project database.
            </summary>
            <remarks>
            <para>
            This is equivalent to the user ID part of the <c>-id</c> command-line option.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask.Workspace">
            <summary>
            Gets or sets the workspace to use when connecting to the project database.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-sp</c> command-line option.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask.ProjectDatabase">
            <summary>
            Gets or sets the project database to utilize during the operation.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-pr</c> command-line option.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask.ProjectPath">
            <summary>
            Gets or sets the project path to utilize during the operation.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-pp</c> command-line option.
            </para>
            </remarks>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSMultipleEntityTask._entities">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSMultipleEntityTask.Entities"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSMultipleEntityTask.#ctor">
            <summary>
            Constructs and initializes an instance of <c>PVCSMultipleEntityTask</c>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSMultipleEntityTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)">
            <see cref="M:NAnt.Contrib.Tasks.PVCS.PVCSTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)"/>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSMultipleEntityTask.Entities">
            <summary>
            Gets or sets the entities involved in the operation.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask._archiveDescription">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask.ArchiveDescription"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask._copyMode">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask.CopyMode"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask._deleteWorkfiles">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask.DeleteWorkfiles"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask._description">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask.Description"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask._lock">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask.Lock"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask._promotionGroup">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask.PromotionGroup"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask._suppressAddIfExists">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask.SuppressAddIfExists"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask._versionLabel">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask.VersionLabel"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask.#ctor">
            <summary>
            Constructs and initializes an instance of <c>PVCSAddFilesTask</c>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)">
            <see cref="M:NAnt.Contrib.Tasks.PVCS.PVCSTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)"/>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask.ArchiveDescription">
            <summary>
            Gets or sets the archive description for versioned files.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-t</c> parameter to the <c>pcli addfiles</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask.CopyMode">
            <summary>
            Gets or sets the copy mode for the operation.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask.DeleteWorkfiles">
            <summary>
            Gets or sets a value indicating whether workfiles will be deleted after adding them to PVCS.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-d</c> parameter to the <c>pcli addfiles</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask.Description">
            <summary>
            Gets or sets the description for versioned files.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-m</c> parameter to the <c>pcli addfiles</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask.Lock">
            <summary>
            Gets or sets a value indicating whether versioned files should be locked after being added to PVCS.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-l</c> parameter to the <c>pcli addfiles</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask.PromotionGroup">
            <summary>
            Gets or sets the promotion group to which added files will be assigned. Setting this attribute to an
            empty string indicates the versioned files will not be assigned to any promotion group.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-g</c> parameter to the <c>pcli addfiles</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask.SuppressAddIfExists">
            <summary>
            Gets or sets a value indicating whether workfiles shouldn't be added if they already exist in the PVCS
            repository.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-qw</c> parameter to the <c>pcli addfiles</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask.VersionLabel">
            <summary>
            Gets or sets the version label to assign to the added versioned files.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-v</c> parameter to the <c>pcli addfiles</c> command.
            </para>
            </remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask.PVCSCopyMode">
            <summary>
            Specifies possible copy modes for the <see cref="T:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask"/> task.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask.PVCSCopyMode.Default">
            <summary>
            Indicates the default copy mode should be used.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask.PVCSCopyMode.CopyWorkfileIfRequired">
            <summary>
            Indicates that workfiles should be copied to the project workfile location is it doesn't already exist.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSAddFilesTask.PVCSCopyMode.CopyWorkfileWithOverwrite">
            <summary>
            Indicates that workfiles should be copied to the project workfile location and overwrite any existing
            workfile.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSAddUserTask">
            <summary>
            Adds a user to a PVCS project or project database.
            </summary>
            <remarks>
            <para>
            This task uses the <c>adduser</c> PCLI command to add the user to the PVCS project or database.
            </para>
            </remarks>
            <example>
              <para>
              Adds a user with name <c>kb</c> and password <c>*Muse*</c> to the project database specified by the
              <c>project-database</c> property.
              </para>
              <code>
                <![CDATA[
            <pvcsadduser projectdatabase="${project-database}" username="kb" password="*Muse*"/>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Adds a user with name <c>kb</c> and password <c>*Muse*</c> to the project database specified by the
              <c>project-database</c> property. The user's logon will expire on the 26th of October, 2005.
              </para>
              <code>
                <![CDATA[
            <pvcsadduser projectdatabase="${project-database}" username="kb" password="*Muse*" expirydate="10/26/2005"/>
                ]]>
              </code>
            </example>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSAddUserTask._expiryDate">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSAddUserTask.ExpiryDate"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSAddUserTask._userPassword">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSAddUserTask.UserPassword"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSAddUserTask._userName">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSAddUserTask.UserName"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSAddUserTask.#ctor">
            <summary>
            Constructs and initializes an instance of <c>PVCSAddUserTask</c>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSAddUserTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)">
            <see cref="M:NAnt.Contrib.Tasks.PVCS.PVCSTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)"/>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSAddUserTask.ExpiryDate">
            <summary>
            Gets or sets the expiration date for the new user.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-e</c> parameter to the <c>pcli adduser</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSAddUserTask.UserPassword">
            <summary>
            Gets or sets the password for the new user.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSAddUserTask.UserName">
            <summary>
            Gets or sets the user name for the new user.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSAddUserTask.SupportsIncludeSubprojects">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask.SupportsIncludeSubprojects"/>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSAssignGroupTask">
            <summary>
            Assigns a promotion group to versioned files.
            </summary>
            <remarks>
            <para>
            This task uses the <c>assigngroup</c> PCLI command to assign the group to versioned files.
            </para>
            </remarks>
            <example>
              <para>
              Assigns the <c>SYSTEST</c> promotion group to all entities with the <c>DEV</c> promotion group in the
              <c>folder</c> project.
              </para>
              <code>
                <![CDATA[
            <pvcsassigngroup projectdatabase="${project-database}" entity="/folder" assignpromotiongroup="SYSTEST" promotiongroup="DEV"/>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Assigns the <c>SYSTEST</c> promotion group to revision <c>1.2</c> of all entities.
              </para>
              <code>
                <![CDATA[
            <pvcsassigngroup projectdatabase="${project-database}" entity="/" includesubprojects="true" assignpromotiongroup="SYSTEST" revision="1.2"/>
                ]]>
              </code>
            </example>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSSingleEntityTask">
            <summary>
            Base class for all PVCS project database tasks that operate against a single entity.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSSingleEntityTask._entity">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSSingleEntityTask.Entity"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSSingleEntityTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)">
            <see cref="M:NAnt.Contrib.Tasks.PVCS.PVCSTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)"/>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSSingleEntityTask.Entity">
            <summary>
            Gets or sets the entity involved in the operation.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSAssignGroupTask._assignPromotionGroup">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSAssignGroupTask.AssignPromotionGroup"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSAssignGroupTask._promotionGroup">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSAssignGroupTask.PromotionGroup"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSAssignGroupTask._revision">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSAssignGroupTask.Revision"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSAssignGroupTask._versionLabel">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSAssignGroupTask.VersionLabel"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSAssignGroupTask.#ctor">
            <summary>
            Constructs and initializes an instance of <c>PVCSAssignGroupTask</c>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSAssignGroupTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)">
            <see cref="M:NAnt.Contrib.Tasks.PVCS.PVCSTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)"/>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSAssignGroupTask.AssignPromotionGroup">
            <summary>
            Gets or sets the promotion group to assign to the versioned files.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-g</c> parameter to the <c>pcli assigngroup</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSAssignGroupTask.PromotionGroup">
            <summary>
            Gets or sets the promotion group for the versioned files to be assigned the promotion group.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-r</c> parameter to the <c>pcli assigngroup</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSAssignGroupTask.Revision">
            <summary>
            Gets or sets the revision for the versioned files to be assigned the promotion group.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-r</c> parameter to the <c>pcli assigngroup</c> command.
            </para>
            <para>
            If this property has not yet been set, it will return <c>Double.MaxValue</c>.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSAssignGroupTask.VersionLabel">
            <summary>
            Gets or sets the version label for the versioned files to be assigned the promotion group.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-r</c> parameter to the <c>pcli assigngroup</c> command.
            </para>
            </remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSChangeGroupTask">
            <summary>
            Changes the promotion group for specified versioned files.
            </summary>
            <remarks>
            <para>
            This task uses the <c>changegroup</c> PCLI command to change the group for versioned files.
            </para>
            </remarks>
            <example>
              <para>
              Changes the promotion group for <c>file.txt</c> from <c>SYSTEST</c> to <c>DEV</c>.
              </para>
              <code>
                <![CDATA[
            <pvcschangegroup projectdatabase="${project-database}" from="SYSTEST" to="DEV" entity="/file.txt"/>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Changes the promotion group for all files from <c>DEV</c> to <c>PROD</c>.
              </para>
              <code>
                <![CDATA[
            <pvcschangegroup projectdatabase="${project-database}" from="DEV" to="PROD" entity="/" includesubprojects="true"/>
                ]]>
              </code>
            </example>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSChangeGroupTask._from">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSChangeGroupTask.From"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSChangeGroupTask._to">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSChangeGroupTask.To"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSChangeGroupTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)">
            <see cref="M:NAnt.Contrib.Tasks.PVCS.PVCSTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)"/>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSChangeGroupTask.From">
            <summary>
            Gets or sets the promotion group to change from.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-gf</c> parameter to the <c>pcli changegroup</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSChangeGroupTask.To">
            <summary>
            Gets or sets the promotion group to change to.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-gt</c> parameter to the <c>pcli changegroup</c> command.
            </para>
            </remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument">
            <summary>
            Encapsulates the details of a PVCS command argument.
            </summary>
            <remarks>
            <para>
            PVCS tasks must "fill in" a collection of arguments to be passed to the PVCS command line interface (PCLI).
            This class represents one such argument.
            </para>
            <para>
            Each argument consists of a command and an optional command value. The command is always passed to the PVCS
            command line utility and is therefore required. An example of a command is "-g" which is passed to many
            PVCS command line utilities to specify a promotion group.
            </para>
            <para>
            The command value is used to specify extra information to the command. For example, if the command is "-g"
            then the command value would be the name of the promotion group.
            </para>
            <para>
            The command can be assigned a position (see the <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument.Position"/> property). This position defines
            where the command appears relative to other commands. For example, some commands must appear after other
            commands. Therefore, they should be assigned a position of <see cref="F:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentPosition.Start"/>.
            </para>
            </remarks>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument._command">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument.Command"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument._commandValue">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument.CommandValue"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument._position">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument.Position"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument.#ctor(System.String)">
            <summary>
            Constructs an instance of <c>PVCSCommandArgument</c> with the specified information. No value is
            applied and the argument has a position of <see cref="F:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentPosition.Middle"/>.
            </summary>
            <param name="command">The command string.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument.#ctor(System.String,System.Object)">
            <summary>
            Constructs an instance of <c>PVCSCommandArgument</c> with the specified information. The argument has
            a position of <see cref="F:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentPosition.Middle"/>.
            </summary>
            <param name="command">The command string.</param>
            <param name="commandValue">The value for the command, or <c>null</c> if no value applies.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument.#ctor(System.String,System.Object,NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentPosition)">
            <summary>
            Constructs an instance of <c>PVCSCommandArgument</c> with the specified information.
            </summary>
            <param name="command">The command string.</param>
            <param name="commandValue">The value for the command, or <c>null</c> if no value applies.</param>
            <param name="position">The position for the command.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument.CompareTo(System.Object)">
            <summary>
            Compares two PVCS command arguments based on their position.
            </summary>
            <param name="o">The PVCS command argument to compare to <c>this</c>.</param>
            <returns>
            Less than zero if this instance is less than <paramref name="o"/>.
            Zero if this instance is equal to <paramref name="o"/>.
            Greater than zero if this instance is greater than <paramref name="o"/>.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument.ToString">
            <summary>
            Converts this command argument to its <c>string</c> representation.
            </summary>
            <returns>The <c>string</c> representation of this command argument.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument.EscapeStringCommandArgument(System.String)">
            <summary>
            Escapes a <c>string</c> command line argument.
            </summary>
            <remarks>
            <para>
            This method attempts to deal with the mess of keeping both PCLI and the shell happy with string
            arguments. It's not perfect yet (try an argument with several backslashes before a double quote). It
            would be nice to have a regex to handle this but I wouldn't even bother until this logic is spot on.
            </para>
            </remarks>
            <param name="argument">The string argument to escape.</param>
            <returns>The escaped string argument.</returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument.Command">
            <summary>
            Gets a <c>string</c> that contains the command to pass to PVCS.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument.CommandValue">
            <summary>
            Gets the value to append to <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument.Command"/>.
            </summary>
            <remarks>
            <para>
            If this property is <c>null</c>, no value will be appended to the command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument.Position">
            <summary>
            Gets the position for the command.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection">
            <summary>
            Implements a type-safe collection of <see cref="T:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument"/>s.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection.Add(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument)">
            <see cref="M:System.Collections.IList.Add(System.Object)"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection.Add(System.String)">
            <summary>
            Adds a new command argument to this collection with the specified information.
            </summary>
            <param name="command">The command string for the new command.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection.Add(System.String,System.Object)">
            <summary>
            Adds a new command argument to this collection with the specified information.
            </summary>
            <param name="command">The command string for the new command.</param>
            <param name="commandValue">
            The command value for the new command, or <c>null</c> if no value applies.
            </param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection.Add(System.String,System.Object,NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentPosition)">
            <summary>
            Adds a new command argument to this collection with the specified information.
            </summary>
            <param name="command">The command string for the new command.</param>
            <param name="commandValue">
            The command value for the new command, or <c>null</c> if no value applies.
            </param>
            <param name="position">The position for the new command.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds all specified command arguments to this collection.
            </summary>
            <param name="commandArguments">The collection of command arguments to add.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection.IndexOf(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument)">
            <see cref="M:System.Collections.IList.IndexOf(System.Object)"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection.Insert(System.Int32,NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument)">
            <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection.Remove(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument)">
            <see cref="M:System.Collections.IList.Remove(System.Object)"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection.Contains(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument)">
            <see cref="M:System.Collections.IList.Contains(System.Object)"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection.ToArray">
            <summary>
            Retrieves an array of <see cref="T:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument"/> objects in this collection.
            </summary>
            <returns>An array of command arguments in this collection.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection.OnInsert(System.Int32,System.Object)">
            <see cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection.OnSet(System.Int32,System.Object,System.Object)">
            <see cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection.OnValidate(System.Object)">
            <see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)"/>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection.Item(System.Int32)">
            <summary>
            Allows the <see cref="T:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgument"/> objects in the collection to be manipulated.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentPosition">
            <summary>
            Defines possible values for specifying positions for PCLI command arguments and arguments to PCLI itself.
            </summary>
            <remarks>
            <para>
            Members of this enumeration are used to specify relative positions of PCLI command arguments. All arguments
            given a position of <see cref="F:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentPosition.End"/> will appear after arguments with a position of <see cref="F:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentPosition.Middle"/>
            or <see cref="F:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentPosition.Start"/>. Similarly, arguments with a position of <see cref="F:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentPosition.Middle"/> will appear after
            those with a position of <see cref="F:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentPosition.Start"/> but before those with a position of <see cref="F:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentPosition.End"/>.
            </para>
            <para>
            No order is guaranteed for arguments with the same position. That is, if two arguments have a position of
            <see cref="F:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentPosition.Start"/>, it is not possible to specify which one is output to the command line first.
            </para>
            <para>
            The <see cref="F:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentPosition.BeforePCLICommand"/> member is special in that it ensures the argument will appear before
            the PCLI command name. This is useful when the argument is to PCLI itself, not the PCLI command.
            </para>
            </remarks>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentPosition.BeforePCLICommand">
            <summary>
            Arguments that should appear before the PCLI command argument. This is useful for arguments to PCLI
            itself (as opposed to the PCLI command).
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentPosition.Start">
            <summary>
            PCLI command arguments that should appear before other PCLI command arguments.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentPosition.Middle">
            <summary>
            PCLI command arguments that should appear before other arguments with a position of <see cref="F:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentPosition.End"/>
            but after other arguments with a position of <see cref="F:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentPosition.Start"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentPosition.End">
            <summary>
            PCLI command arguments that should appear after other PCLI command arguments.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSCreateProjectTask">
            <summary>
            Creates a project in a PVCS repository.
            </summary>
            <remarks>
            <para>
            This task uses the <c>createproject</c> PCLI command to create the project in the PVCS repository.
            </para>
            </remarks>
            <example>
              <para>
              Creates a project called <c>Songs</c> in the project database specified by the <c>project-database</c>
              property. The workfile location for the project is set to <c>C:\Work\Songs</c>.
              </para>
              <code>
                <![CDATA[
            <pvcscreateproject projectdatabase="${project-database}" workfilelocation="C:\Work\Songs" entity="/Songs"/>
                ]]>
              </code>
            </example>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSCreateProjectTask._workfileLocation">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSCreateProjectTask.WorkfileLocation"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSCreateProjectTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)">
            <see cref="M:NAnt.Contrib.Tasks.PVCS.PVCSTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)"/>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSCreateProjectTask.WorkfileLocation">
            <summary>
            Gets or sets the workfile location for the created project.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-w</c> parameter to the <c>pcli createproject</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSCreateProjectTask.SupportsIncludeSubprojects">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask.SupportsIncludeSubprojects"/>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSDeleteGroupTask">
            <summary>
            Removes a specified promotion group from versioned files.
            </summary>
            <remarks>
            <para>
            This task uses the <c>deletegroup</c> PCLI command to remove the promotion group from the versioned files.
            </para>
            </remarks>
            <example>
              <para>
              Removes the <c>DEV</c> promotion group from <c>App.ico</c> in the project database specified by the
              <c>project-database</c> property.
              </para>
              <code>
                <![CDATA[
            <pvcsdeletegroup projectdatabase="${project-database}" promotiongroup="DEV" entity="/App.ico"/>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Removes the <c>DEV</c> promotion group all files in the project database specified by the
              <c>project-database</c> property.
              </para>
              <code>
                <![CDATA[
            <pvcsdeletegroup projectdatabase="${project-database}" promotiongroup="DEV" entity="/" includesubprojects="true"/>
                ]]>
              </code>
            </example>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSDeleteGroupTask._promotionGroup">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSDeleteGroupTask.PromotionGroup"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSDeleteGroupTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)">
            <see cref="M:NAnt.Contrib.Tasks.PVCS.PVCSTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)"/>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSDeleteGroupTask.PromotionGroup">
            <summary>
            Gets or sets the promotion group to delete.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-g</c> parameter to the <c>pcli deletegroup</c> command.
            </para>
            </remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSDeleteLabelTask">
            <summary>
            Removes a label from specified versioned files or projects.
            </summary>
            <remarks>
            <para>
            This task uses the <c>deletelabel</c> PCLI command to remove the version label from the versioned files.
            </para>
            </remarks>
            <example>
              <para>
              Removes the label called <c>My Label</c> from the versioned file called <c>App.ico</c> from the project
              database specified by the <c>project-database</c> property.
              </para>
              <code>
                <![CDATA[
            <pvcsdeletelabel projectdatabase="${project-database}" versionlabel="My Label">
                <entities>
                    <entity name="/App.ico"/>
                </entities>
            </pvcsdeletelabel>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Removes the label called <c>My Label</c> from all files at and below both <c>folder1</c> and <c>folder2</c>
              in the project database specified by the <c>project-database</c> property.
              </para>
              <code>
                <![CDATA[
            <pvcsdeletelabel projectdatabase="${project-database}" versionlabel="My Label" includesubprojects="true">
                <entities>
                    <entity name="/folder1"/>
                    <entity name="/folder2"/>
                </entities>
            </pvcsdeletelabel>
                ]]>
              </code>
            </example>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSDeleteLabelTask._versionLabel">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSDeleteLabelTask.VersionLabel"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSDeleteLabelTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)">
            <see cref="M:NAnt.Contrib.Tasks.PVCS.PVCSTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)"/>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSDeleteLabelTask.VersionLabel">
            <summary>
            Gets or sets the version label to remove.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-v</c> parameter to the <c>pcli deletelabel</c> command.
            </para>
            </remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSDeleteTask">
            <summary>
            Deletes folder, projects, versioned items and workspaces in a PVCS repository.
            </summary>
            <remarks>
            <para>
            This task uses the <c>delete</c> PCLI command to delete the items.
            </para>
            </remarks>
            <example>
            <para>
              Deletes the versioned file called <c>App.ico</c> from the project database specified by the
              <c>project-database</c> property.
              </para>
              <code>
                <![CDATA[
            <pvcsdelete projectdatabase="${project-database}">
                <entities>
                    <entity name="/App.ico"/>
                </entities>
            </pvcsdelete>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Deletes the files called <c>file1.txt</c> and <c>file2.txt</c> from the project called <c>folder</c> in the
              project database specified by the <c>project-database</c> property.
              </para>
              <code>
                <![CDATA[
            <pvcsdelete projectdatabase="${project-database}" projectpath="/folder">
                <entities>
                    <entity name="file1.txt"/>
                    <entity name="file2.txt"/>
                </entities>
            </pvcsdelete>
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSDeleteTask.SupportsIncludeSubprojects">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask.SupportsIncludeSubprojects"/>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSDeleteUsersTask">
            <summary>
            Deletes the specified users from the PVCS access control database.
            </summary>
            <remarks>
            <para>
            This task uses the <c>deleteuser</c> PCLI command to delete the users.
            </para>
            </remarks>
            <example>
              <para>
              Deletes the users called <c>kb</c>, <c>kv</c> and <c>tb</c> from the project database specified by the
              <c>project-database</c> property.
              </para>
              <code>
                <![CDATA[
            <pvcsdeleteusers projectdatabase="${project-database}">
                <entities>
                    <entity name="kb"/>
                    <entity name="kv"/>
                    <entity name="tb"/>
                </entities>
            </pvcsdeleteusers>
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSDeleteUsersTask.SupportsIncludeSubprojects">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSProjectDatabaseTask.SupportsIncludeSubprojects"/>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSDeleteUsersTask.PCLICommandName">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSTask.PCLICommandName"/>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSGetTask">
            <summary>
            Gets files from a PVCS repository.
            </summary>
            <remarks>
            <para>
            This task uses the <c>get</c> PCLI command to get the versioned files from PVCS.
            </para>
            </remarks>
            <example>
              <para>
              Gets the versioned file called <c>App.ico</c> from the project database specified by the
              <c>project-database</c> property.
              </para>
              <code>
                <![CDATA[
            <pvcsget projectdatabase="${project-database}">
                <entities>
                    <entity name="/App.ico"/>
                </entities>
            </pvcsget>
                ]]>
              </code>
            </example>
            <example>
            <para>
            Gets the versioned file called <c>App.ico</c> from the project database specified by the
            <c>project-database</c> property. The file is also locked.
            </para>
            <code>
            <![CDATA[
            <pvcsget projectdatabase="${project-database}" lock="true">
                <entities>
                    <entity name="/App.ico"/>
                </entities>
            </pvcsget>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Gets all revisions assigned the <c>SYSTEST</c> promotion group from the project database specified by the
              <c>project-database</c> property. The workfiles are touched after the get operation.
              </para>
              <code>
                <![CDATA[
            <pvcsget projectdatabase="${project-database}" includesubprojects="true" promotiongroup="SYSTEST" touch="true">
                <entities>
                    <entity name="/"/>
                </entities>
            </pvcsget>
                ]]>
              </code>
            </example>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSGetTask._baseProjectPath">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSGetTask.BaseProjectPath"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSGetTask._location">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSGetTask.Location"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSGetTask._lock">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSGetTask.Lock"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSGetTask._makeWritable">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSGetTask.MakeWritable"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSGetTask._maxDateTime">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSGetTask.MaxDateTime"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSGetTask._overrideWorkfileLocation">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSGetTask.OverrideWorkfileLocation"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSGetTask._promotionGroup">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSGetTask.PromotionGroup"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSGetTask._revision">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSGetTask.Revision"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSGetTask._touch">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSGetTask.Touch"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSGetTask._updateOnly">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSGetTask.UpdateOnly"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSGetTask._versionLabel">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSGetTask.VersionLabel"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSGetTask.#ctor">
            <summary>
            Constructs and initializes an instance of <c>PVCSGetTask</c>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSGetTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)">
            <see cref="M:NAnt.Contrib.Tasks.PVCS.PVCSTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)"/>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSGetTask.BaseProjectPath">
            <summary>
            Gets or sets the base project path.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-bp</c> parameter to the <c>pcli get</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSGetTask.Location">
            <summary>
            Gets or sets an alternative location for workfiles.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-a</c> parameter to the <c>pcli get</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSGetTask.Lock">
            <summary>
            Gets or sets a value indicating whether revisions involved in the get operation should be locked.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-l</c> parameter to the <c>pcli get</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSGetTask.MakeWritable">
            <summary>
            Gets or sets whether the workfiles should be made writable.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-w</c> parameter to the <c>pcli get</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSGetTask.MaxDateTime">
            <summary>
            Gets or sets the maximum date and time of workfiles to retrieve.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-d</c> parameter to the <c>pcli get</c> command.
            </para>
            <para>
            If this property has not yet been set, it will return <c>DateTime.MaxValue</c>.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSGetTask.OverrideWorkfileLocation">
            <summary>
            Gets or sets a value indicating whether the workfile location for files should be overridden.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-o</c> parameter to the <c>pcli get</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSGetTask.PromotionGroup">
            <summary>
            Gets or sets the promotion group to get.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-g</c> parameter to the <c>pcli get</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSGetTask.Revision">
            <summary>
            Gets or sets the revision to get against.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-r</c> parameter to the <c>pcli get</c> command.
            </para>
            <para>
            If this property has not yet been set, it will return <c>Double.MaxValue</c>.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSGetTask.Touch">
            <summary>
            Gets or sets a value indicating whether workfiles should be touched after the get.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-t</c> parameter to the <c>pcli get</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSGetTask.UpdateOnly">
            <summary>
            Gets or sets a value indicating whether workfiles should only be gotten if they are newer than the
            current workfile.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-u</c> parameter to the <c>pcli get</c> command (without specifying a
            date or time).
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSGetTask.VersionLabel">
            <summary>
            Gets or sets the version label to get against.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-v</c> parameter to the <c>pcli get</c> command.
            </para>
            </remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSLabelTask">
            <summary>
            Assigns a version label to a revision of the specified versioned files.
            </summary>
            <remarks>
            <para>
            This task uses the <c>label</c> PCLI command to label the items.
            </para>
            </remarks>
            <example>
              <para>
              Labels all files in the project database specified by the <c>project-database</c> property. The label
              applied is <c>Beta</c>.
              </para>
              <code>
                <![CDATA[
            <pvcslabel projectdatabase="${project-database}" versionlabel="Beta" includesubprojects="true">
                <entities>
                    <entity name="/"/>
                </entities>
            </pvcslabel>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Labels revision <c>1.8</c> of <c>App.ico</c> as <c>Dodgy</c> in the project database specified by the
              <c>project-database</c> property.
              </para>
              <code>
                <![CDATA[
            <pvcslabel projectdatabase="${project-database}" versionlabel="Dodgy" revision="1.8">
                <entities>
                    <entity name="App.ico"/>
                </entities>
            </pvcslabel>
                ]]>
              </code>
            </example>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSLabelTask._floating">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSLabelTask.Floating"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSLabelTask._revision">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSLabelTask.Revision"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSLabelTask._versionLabel">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSLabelTask.VersionLabel"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSLabelTask.#ctor">
            <summary>
            Constructs and initializes an instance of <c>PVCSLabel</c>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSLabelTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)">
            <see cref="M:NAnt.Contrib.Tasks.PVCS.PVCSTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)"/>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSLabelTask.Floating">
            <summary>
            Gets or sets a value indicating whether the label should "float" to the newest revision.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-f</c> parameter to the <c>pcli label</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSLabelTask.Revision">
            <summary>
            Gets or sets the revision to label.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-r</c> parameter to the <c>pcli label</c> command.
            </para>
            <para>
            If this property has not yet been set, it will return <c>Double.MaxValue</c>.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSLabelTask.VersionLabel">
            <summary>
            Gets or sets the version label to assign.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-v</c> parameter to the <c>pcli label</c> command.
            </para>
            </remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSLockTask">
            <summary>
            Locks a revision of the specified versioned files.
            </summary>
            <remarks>
            <para>
            This task uses the <c>lock</c> PCLI command to lock the versioned files.
            </para>
            </remarks>
            <example>
              <para>
              Locks <c>App.ico</c> in the project database specified by the <c>project-database</c> property.
              </para>
              <code>
                <![CDATA[
            <pvcslock projectdatabase="${project-database}">
                <entities>
                    <entity name="/App.ico"/>
                </entities>
            </pvcslock>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Locks all files at and below <c>folder</c> in the project database specified by the <c>project-database</c>
              property.
              </para>
              <code>
                <![CDATA[
            <pvcslock projectdatabase="${project-database}" includesubprojects="true">
                <entities>
                    <entity name="/folder"/>
                </entities>
            </pvcslock>
                ]]>
              </code>
            </example>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSLockTask._noBranching">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSLockTask.NoBranching"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSLockTask._noMultilock">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSLockTask.NoMultilock"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSLockTask._promotionGroup">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSLockTask.PromotionGroup"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSLockTask._revision">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSLockTask.Revision"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSLockTask._yesToBranching">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSLockTask.YesToBranching"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSLockTask._yesToMultilock">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSLockTask.YesToMultilock"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSLockTask.#ctor">
            <summary>
            Constructs and initializes an instance of <c>PVCSLock</c>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSLockTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)">
            <see cref="M:NAnt.Contrib.Tasks.PVCS.PVCSTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)"/>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSLockTask.NoBranching">
            <summary>
            Gets or sets a value indicating whether locking files will take place if checking in those files would
            result in a branch.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-nb</c> parameter to the <c>pcli lock</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSLockTask.NoMultilock">
            <summary>
            Gets or sets a value indicating whether already locked revisions will be locked.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-nm</c> parameter to the <c>pcli lock</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSLockTask.PromotionGroup">
            <summary>
            Gets or sets the promotion group to assign the locked revision.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-g</c> parameter to the <c>pcli lock</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSLockTask.Revision">
            <summary>
            Gets or sets the revision to lock.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-r</c> parameter to the <c>pcli lock</c> command.
            </para>
            <para>
            If this property has not yet been set, it will return <c>Double.MaxValue</c>.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSLockTask.YesToBranching">
            <summary>
            Gets or sets a value indicating whether revisions will be locked even if that will result in a branch
            upon check in.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-yb</c> parameter to the <c>pcli lock</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSLockTask.YesToMultilock">
            <summary>
            Gets or sets a value indicating whether revisions will be locked even if that will result in multiple
            locks against the same revision.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-ym</c> parameter to the <c>pcli lock</c> command.
            </para>
            </remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSPromoteGroupTask">
            <summary>
            Promotes versioned files to the next promotion group.
            </summary>
            <remarks>
            <para>
            This task uses the <c>promotegroup</c> PCLI command to promote versioned files.
            </para>
            </remarks>
            <example>
              <para>
              Promotes all files in the root of the project database specified by the <c>project-database</c> property.
              The files are promoted from the <c>DEV</c> promotion group to the next. Promotion will not take place across
              branches.
              </para>
              <code>
                <![CDATA[
            <pvcspromotegroup projectdatabase="${project-database}" promotiongroup="DEV" entity="/" acrossbranches="false"/>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Promotes all files in the project database specified by the <c>project-database</c> property. The files are
              promoted from the <c>SYSTEST</c> promotion group to the next. Promotion will take place across branches.
              </para>
              <code>
                <![CDATA[
            <pvcspromotegroup projectdatabase="${project-database}" promotiongroup="SYSTEST" entity="/" includesubprojects="true" acrossbranches="true"/>
                ]]>
              </code>
            </example>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSPromoteGroupTask._acrossBrances">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSPromoteGroupTask.AcrossBranches"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSPromoteGroupTask._promotionGroup">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSPromoteGroupTask.PromotionGroup"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSPromoteGroupTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)">
            <see cref="M:NAnt.Contrib.Tasks.PVCS.PVCSTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)"/>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSPromoteGroupTask.AcrossBranches">
            <summary>
            Gets or sets a value indicating whether the promotion may occur across branches.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-nb</c> and <c>-yb</c> parameters to the <c>pcli promotegroup</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSPromoteGroupTask.PromotionGroup">
            <summary>
            Gets or sets the promotion group to be promoted.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-g</c> parameter to the <c>pcli promotegroup</c> command.
            </para>
            </remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSPutTask">
            <summary>
            Puts files into a PVCS repository.
            </summary>
            <remarks>
            <para>
            This task uses the <c>put</c> PCLI command to put the files into PVCS.
            </para>
            </remarks>
            <example>
              <para>
              Puts the file called <c>App.ico</c> into the project database specified by the <c>project-database</c>
              property. The description for the change is <c>Added more colour</c>.
              </para>
              <code>
                <![CDATA[
            <pvcsput projectdatabase="${project-database}" description="Added more colour">
                <entities>
                    <entity name="/App.ico"/>
                </entities>
            </pvcsput>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Puts all files into the project database specified by the <c>project-database</c> property. The description
              for the changes is <c>Major changes</c>. Even if the workfiles have not been changed, they will result in a
              new revision in PVCS.
              </para>
              <code>
                <![CDATA[
            <pvcsput projectdatabase="${project-database}" description="Major changes" checkinunchanged="true" includesubprojects="true">
                <entities>
                    <entity name="/"/>
                </entities>
            </pvcsput>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Puts <c>file.txt</c> and all files in <c>folder</c> into the project database specified by the
              <c>project-database</c> property. The description for the changes is <c>Some changes</c>. A new branch is
              forcibly created via the <c>forcebranch</c> attribute. Leading and trailing whitespace is ignored when
              determining whether the workfile has been altered.
              </para>
              <code>
                <![CDATA[
            <pvcsput projectdatabase="${project-database}" description="Some changes" forcebranch="true" ignorespaces="true">
                <entities>
                    <entity name="/folder"/>
                    <entity name="/file.txt"/>
                </entities>
            </pvcsput>
                ]]>
              </code>
            </example>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSPutTask._baseProjectPath">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.BaseProjectPath"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSPutTask._checkInUnchanged">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.CheckInUnchanged"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSPutTask._description">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.Description"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSPutTask._floatLabel">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.FloatLabel"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSPutTask._forceBranch">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.ForceBranch"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSPutTask._ignoreSpaces">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.IgnoreSpaces"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSPutTask._keepWorkfile">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.KeepWorkfile"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSPutTask._location">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.Location"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSPutTask._lock">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.Lock"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSPutTask._overrideWorkfileLocation">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.OverrideWorkfileLocation"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSPutTask._promotionGroup">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.PromotionGroup"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSPutTask._reassignLabelIfExists">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.ReassignLabelIfExists"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSPutTask._revision">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.Revision"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSPutTask._useSameDescription">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.UseSameDescription"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSPutTask._versionLabel">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.VersionLabel"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.#ctor">
            <summary>
            Constructs and initializes an instance of <c>PVCSPut</c>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)">
            <see cref="M:NAnt.Contrib.Tasks.PVCS.PVCSTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)"/>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.BaseProjectPath">
            <summary>
            Gets or sets the base project path.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-bp</c> parameter to the <c>pcli put</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.CheckInUnchanged">
            <summary>
            Gets or sets a value indicating whether unchanged workfiles should be checked in.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-yf</c> parameter to the <c>pcli put</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.Description">
            <summary>
            Gets or sets the description to be applied to the checked in revisions.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-m</c> parameter to the <c>pcli put</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.FloatLabel">
            <summary>
            Gets or sets a value indicating whether the version label specified by <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.VersionLabel"/>
            should float.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-fv</c> parameter to the <c>pcli put</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.ForceBranch">
            <summary>
            Gets or sets a value indicating whether a new branch will be created.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-fb</c> parameter to the <c>pcli put</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.IgnoreSpaces">
            <summary>
            Gets or sets a value indicating whether leading and trailing spaces should be ignored when determining
            whether the revision has changed.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-b</c> parameter to the <c>pcli put</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.KeepWorkfile">
            <summary>
            Gets or sets a value indicating whether the workfile should kept in its original state.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-k</c> parameter to the <c>pcli put</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.Location">
            <summary>
            Gets or sets an alternative location for workfiles.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-a</c> parameter to the <c>pcli put</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.Lock">
            <summary>
            Gets or sets a value indicating the files should be locked after the put operation.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-l</c> parameter to the <c>pcli put</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.OverrideWorkfileLocation">
            <summary>
            Gets or sets a value indicating whether the workfile location for files should be overridden.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-o</c> parameter to the <c>pcli put</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.PromotionGroup">
            <summary>
            Gets or sets the promotion in use. If a promotion group is specified, this option identifies the
            promotion group to which the revision is currently assigned. If no promotion group is specified (ie.
            this property is set to an empty string), this option indicates that one is not identifying the
            revision by promotion group.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-g</c> parameter to the <c>pcli put</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.ReassignLabelIfExists">
            <summary>
            Gets or sets a value indicating whether the version label specified by <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.VersionLabel"/>
            should be reassigned if it already exists.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-yv</c> parameter to the <c>pcli put</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.Revision">
            <summary>
            Gets or sets the revision number to use for the new revision.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-r</c> parameter to the <c>pcli put</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.UseSameDescription">
            <summary>
            Gets or sets a value indicating whether the same description should be used for all versioned items.
            This is <c>true</c> by default.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-ym</c> parameter to the <c>pcli put</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSPutTask.VersionLabel">
            <summary>
            Gets or sets the version label to assign to the new revisions.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-v</c> parameter to the <c>pcli put</c> command.
            </para>
            </remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSRenameLabelTask">
            <summary>
            Renames a label in a PVCS repository.
            </summary>
            <remarks>
            <para>
            This task uses the <c>renamelabel</c> PCLI command to rename the label.
            </para>
            </remarks>
            <example>
              <para>
              Renames the label on <c>App.ico</c> from <c>Beater</c> to <c>Beta</c> in the project database specified by
              the <c>project-database</c> property.
              </para>
              <code>
                <![CDATA[
            <pvcsrenamelabel projectdatabase="${project-database}" from="Beater" to="Beta">
                <entities>
                    <entity name="App.ico"/>
                </entities>
            </pvcsrenamelabel>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Renames the label on all files from <c>Alfa</c> to <c>Alpha</c> in the project database specified by the
              <c>project-database</c> property.
              </para>
              <code>
                <![CDATA[
            <pvcsrenamelabel projectdatabase="${project-database}" from="Alfa" to="Alpha" includesubprojects="true">
                <entities>
                    <entity name="/"/>
                </entities>
            </pvcsrenamelabel>
                ]]>
              </code>
            </example>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSRenameLabelTask._from">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSRenameLabelTask.From"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSRenameLabelTask._to">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSRenameLabelTask.To"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSRenameLabelTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)">
            <see cref="M:NAnt.Contrib.Tasks.PVCS.PVCSTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)"/>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSRenameLabelTask.From">
            <summary>
            Gets or sets the existing label.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-vf</c> parameter to the <c>pcli renamelabel</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSRenameLabelTask.To">
            <summary>
            Gets or sets the new label.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-vt</c> parameter to the <c>pcli renamelabel</c> command.
            </para>
            </remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSUnlockTask">
            <summary>
            Unlocks revisions of versioned files in a PVCS repository.
            </summary>
            <remarks>
            <para>
            This task uses the <c>unlock</c> PCLI command to perform the unlock operation.
            </para>
            </remarks>
            <example>
              <para>
              Unlocks <c>App.ico</c> in the project database specified by the <c>project-database</c> property.
              </para>
              <code>
                <![CDATA[
            <pvcsunlock projectdatabase="${project-database}">
                <entities>
                    <entity name="/App.ico"/>
                </entities>
            </pvcsunlock>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Unlocks all files in the project specified by the <c>project-database</c> property. Locks by all users are
              removed.
              </para>
              <code>
                <![CDATA[
            <pvcsunlock projectdatabase="${project-database}" includesubprojects="true" unlockmode="AllUsers">
                <entities>
                    <entity name="/"/>
                </entities>
            </pvcsunlock>
                ]]>
              </code>
            </example>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSUnlockTask._revision">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSUnlockTask.Revision"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSUnlockTask._unlockMode">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSUnlockTask.UnlockMode"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSUnlockTask._user">
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSUnlockTask.User"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSUnlockTask.#ctor">
            <summary>
            Constructs and initializes an instance of <c>PVCSUnlock</c>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.PVCS.PVCSUnlockTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)">
            <see cref="M:NAnt.Contrib.Tasks.PVCS.PVCSTask.AddCommandLineArguments(NAnt.Contrib.Tasks.PVCS.PVCSCommandArgumentCollection)"/>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSUnlockTask.Revision">
            <summary>
            Gets or sets the revision number to use for the new revision.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-r</c> parameter to the <c>pcli unlock</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSUnlockTask.UnlockMode">
            <summary>
            Gets or sets the unlock mode for the operation.
            </summary>
            <remarks>
            <para>
            This is equivalent to the <c>-u</c> parameter to the <c>pcli unlock</c> command.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.PVCS.PVCSUnlockTask.User">
            <summary>
            Gets or sets the user whose locked files are to be unlocked. This is relevant only when
            <see cref="P:NAnt.Contrib.Tasks.PVCS.PVCSUnlockTask.UnlockMode"/> is set to <see cref="F:NAnt.Contrib.Tasks.PVCS.PVCSUnlockTask.PVCSUnlockMode.SpecifiedUser"/>.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.PVCS.PVCSUnlockTask.PVCSUnlockMode">
            <summary>
            Specifies possible modes for the <see cref="T:NAnt.Contrib.Tasks.PVCS.PVCSUnlockTask"/> task.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSUnlockTask.PVCSUnlockMode.CurrentUser">
            <summary>
            All locks held by the current user are removed.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSUnlockTask.PVCSUnlockMode.SpecifiedUser">
            <summary>
            All locks held by a specified user are removed.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.PVCS.PVCSUnlockTask.PVCSUnlockMode.AllUsers">
            <summary>
            All locks held by all users are removed.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.RecordTask">
            <summary>
            A task that records the build's output to a file. Loosely based on Ant's 
            <a href="http://ant.apache.org/manual/CoreTasks/recorder.html">Record</a>
            task.
            </summary>
            <remarks>
            This task allows you to record the build's output, or parts of it to a 
            file. You can start and stop recording at any place in the build process.
            </remarks>
            <example>
              <code>
                <![CDATA[
            <record name="${outputdir}\Buildlog.txt" level="Info" action="Start"/>
            <record name="${outputdir}\Buildlog.txt" action="Close"/>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.RecordTask.ExecuteTask">
            <summary>
            This is where the work is done.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RecordTask.LogName">
            <summary>
            Name of destination file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RecordTask.Action">
            <summary>
            Action to apply to this log instance - either <see cref="F:NAnt.Contrib.Tasks.RecordTask.ActionType.Start"/>,
            <see cref="F:NAnt.Contrib.Tasks.RecordTask.ActionType.Stop"/>, <see cref="F:NAnt.Contrib.Tasks.RecordTask.ActionType.Close"/> or
            <see cref="F:NAnt.Contrib.Tasks.RecordTask.ActionType.Flush"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RecordTask.AutoFlush">
            <summary>
            Determines whether the recorder will flush it's buffer after every 
            write to it. The default is <see langword="false"/>.
            </summary>
            <remarks>
            Effective only with the <see cref="F:NAnt.Contrib.Tasks.RecordTask.ActionType.Start"/> action.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.RecordTask.ThresholdLevel">
            <summary>
            Determine the level of logging - either <see cref="F:NAnt.Core.Level.Debug"/>, 
            <see cref="F:NAnt.Core.Level.Verbose"/>, <see cref="F:NAnt.Core.Level.Info"/>, 
            <see cref="F:NAnt.Core.Level.Warning"/> or <see cref="F:NAnt.Core.Level.Error"/>. 
            The default is <see cref="F:NAnt.Core.Level.Info"/>.
            </summary>
            <remarks>
            Effective only with the <see cref="F:NAnt.Contrib.Tasks.RecordTask.ActionType.Start"/> action.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.RollingFolderDeletionTask.DateCompareFileSystemInfo.Compare(System.IO.FileSystemInfo,System.IO.FileSystemInfo)">
            <summary>
            Compare the last dates of the File infos
            </summary>
            <param name="fi1">First FileInfo to check</param>
            <param name="fi2">Second FileInfo to check</param>
            <returns></returns>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SchemaValidatedTask">
            <summary>
            Abstract <see cref="T:NAnt.Core.Task"/> that validates inheriting classes against 
            an XML schema of the same name.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SchemaValidatedTask.Initialize">
            <summary>
            Initializes the task and verifies parameters.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SchemaValidatedTask.Task_OnSchemaValidate(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Occurs when a validation error is raised.
            </summary>
            <param name="sender">The object that sent the event.</param>
            <param name="args">Validation arguments passed in.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SchemaValidatedTask.ExpandPropertiesInNodes(System.Xml.XmlNodeList)">
            <summary>
            Recursively expands properties of all attributes of 
            a nodelist and their children.
            </summary>
            <param name="Nodes">The nodes to recurse.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SchemaValidatedTask.SchemaObject">
            <summary>
            Returns the object from the Schema wrapper after 
            <see cref="M:NAnt.Contrib.Tasks.SchemaValidatedTask.Initialize"/> is called.
            </summary>
            <value>The object from the Schema wrapper after <see cref="M:NAnt.Contrib.Tasks.SchemaValidatedTask.Initialize"/> is called.</value>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SchemaValidatorAttribute">
            <summary>
            Indicates that class should be validated by an XML Schema.
            </summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SchemaValidatorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Tasks.SchemaValidatorAttribute"/>
            class.
            </summary>
            <param name="schemaType">The <see cref="T:System.Type"/> of the object created by <see cref="T:NAnt.Contrib.Tasks.XsdTask"/> to represent the root node of your task.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SchemaValidatorAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Tasks.SchemaValidatorAttribute"/>
            class.
            </summary>
            <param name="schemaType">The <see cref="T:System.Type"/> of the object created by <see cref="T:NAnt.Contrib.Tasks.XsdTask"/> to represent the root node of your task.</param>
            <param name="xmlNamespace"></param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SchemaValidatorAttribute.ValidatorType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> of the object created by 
            <see cref="T:NAnt.Contrib.Tasks.XsdTask"/> to represent the root node of your task.
            </summary>
            <value>
            The <see cref="T:System.Type"/> of the object created by <see cref="T:NAnt.Contrib.Tasks.XsdTask"/>
            to represent the root node of your task.
            </value>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SchemeType">
            <summary>
            Defines possible reference counting scheme types for the <see cref="T:NAnt.Contrib.Tasks.GacTask">GAC</see> tasks.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.SchemeType.None">
            <summary>
            Specifies that no reference counting scheme will be used when performing the GAC task.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.SchemeType.UninstallKey">
            <summary>
            Specifies that registry-related reference counting will be used when performing the GAC task.
            </summary>
            <remarks>
            When the scheme type is set to <c>UninstallKey</c>, the related scheme ID should be set to the name of the application
            set in the <c>HKLM\Software\Microsoft\Windows\CurrentVersion</c> registry key.
            </remarks>
            
        </member>
        <member name="F:NAnt.Contrib.Tasks.SchemeType.FilePath">
            <summary>
            Specifies that file-based reference counting will be used when performing the GAC task.
            </summary>
            <remarks>
            When the scheme type is set to <c>FilePath</c>, the related scheme ID should be set to the full path to the executable
            file that installs the assembly.
            </remarks>
            
        </member>
        <member name="F:NAnt.Contrib.Tasks.SchemeType.Opaque">
            <summary>
            Specifies that custom information will be supplied to accommodate reference counting.
            </summary>
            <remarks>
            When the scheme type is set to <c>Opaque</c>, the related scheme ID can be set to any custom piece of information.
            </remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ScpTask">
            <summary>
            Copies a file to a remote server using scp.
            </summary>
            <remarks>
              <para>Copies a file using scp to a remote server.</para>
              <para>The Username Environment variable is used.</para>
            </remarks>
            <example>
              <para>Copy a single file to a remote server and path.</para>
              <code>
                <![CDATA[
            <scp file="myfile.zip" server="myServer" path="~" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.ProgramName">
            <summary>
            The program to execute. The default is "scp".
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.Options">
            <summary>
            The command line arguments.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.FileName">
            <summary>
            The file to transfer.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.ServerName">
            <summary>
            The server to send the file to.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.RemotePath">
            <summary>
            The path on the remote server. The default is "~".
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.UserName">
            <summary>
            The username to connect as.  The default is the value of the 
            <c>USERNAME</c> environment variable.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.ProgramPathSep">
            <summary>
            The path separator used by the program. The default is "/".
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.ProgramFileName">
            <summary>
            Gets the filename of the external program to start.
            </summary>
            <value>
            The filename of the external program.
            </value>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.ProgramArguments">
            <summary>
            Gets the command-line arguments for the external program.
            </summary>
            <value>
            The command-line arguments for the external program.
            </value>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ScpTask.BaseDirectory">
            <summary>
            The directory in which the command will be executed.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SlingshotTask">
            <summary>
            Converts a Visual Studio.NET Solution to a NAnt build file or nmake file.
            </summary>
            <example>
              <para>
              Convert the solution <c>MySolution.sln</c> to the NAnt build file 
              <c>MySolution.build</c> and call the new build file.
              </para>
              <code>
            <![CDATA[
            <slingshot solution="MySolution.sln" format="nant" output="MySolution.build"> 
                <parameters>
                    <option name="build.basedir" value="..\bin"/>
                </parameters> 
            </slingshot>
            <nant buildfile="MySolution.build"/>
            ]]>
              </code>
            </example>
            <example>
              <para>
              Convert the solution <c>MySolution.sln</c> to the NAnt build file 
              <c>MySolution.build</c>.  As the solution contains one or more web 
              projects, one or more maps needs to be specified.
              </para>
              <code>
            <![CDATA[
            <slingshot solution="MySolution.sln" format="nant" output="MySolution.build">
                <parameters>
                    <option name="build.basedir" value="..\bin"/>
                </parameters> 
                <maps>
                    <option name="http://localhost" value="C:\Inetpub\wwwroot"/>
                </maps>
            </slingshot>
            ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SlingshotTask.CreateSolutionWriter(System.String)">
            <summary>
            Creates the <see cref="T:SLiNgshoT.Core.SolutionWriter"/> for the specified format.
            </summary>
            <returns>
            The <see cref="T:SLiNgshoT.Core.SolutionWriter"/> for the specified format, or 
            <see langword="null"/> if an unknown format was specified.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SlingshotTask.OptionCollectionToHashtable(NAnt.Core.Types.OptionCollection,System.String)">
            <summary>
            Converts an <see cref="T:NAnt.Core.Types.OptionCollection"/> to a <see cref="T:System.Collections.Hashtable"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SlingshotTask.Solution">
            <summary>
            The Visual Studio.NET solution file to convert.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SlingshotTask.Format">
            <summary>
            The output file format - either <c>nant</c> or <c>nmake</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SlingshotTask.Output">
            <summary>
            The output file name.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SlingshotTask.Maps">
            <summary>
            Mappings from URI to directories.  These are required for web projects.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SlingshotTask.Parameters">
            <summary>
            Parameters to pass to SLiNgshoT.  The parameter <c>build.basedir</c> is required.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.AddTask">
            <summary>
            Used to add files to a Visual SourceSafe database.  If the file is currently
            in the SourceSafe database a message will be logged but files will continue to be added.
            </summary>
            <remarks>
            This version does not support recursive adds.  Only adds in the root directory will be added to the
            SourceSafe database.
            </remarks>
            <example>
              <code><![CDATA[
                <vssadd dbpath="C:\SourceSafeFolder\srcsafe.ini" user="user1" password="" path="$/Somefolder">
                  <fileset basedir="C:\SourceFolder\">
                    <include name="*.dll"/>
                  </fileset>
                </vssadd>
              ]]></code>
            </example>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.BaseTask">
            <summary>
            The base abstract class for all Visual Source Safe Tasks.  
            Provides the core attributes, and functionality for opening an item 
            in a Visual Source Safe database.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SourceSafe.BaseTask.Open">
            <summary>
            Opens the Source Safe database and sets the reference to the specified
            item and version.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SourceSafe.BaseTask.GetFileTimestampFlags(NAnt.Contrib.Tasks.SourceSafe.FileTimestamp)">
            <summary>
            Gets the <see cref="T:SourceSafeTypeLib.VSSFlags"/> value corresponding with the 
            specified <see cref="T:NAnt.Contrib.Tasks.SourceSafe.FileTimestamp"/>.
            </summary>
            <param name="timestamp">A <see cref="T:NAnt.Contrib.Tasks.SourceSafe.FileTimestamp"/>.</param>
            <returns>
            An <see cref="T:System.Int32"/> representing the <see cref="T:SourceSafeTypeLib.VSSFlags"/> value
            for the <paramref name="timestamp"/>.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.BaseTask.DBPath">
            <summary>
            The path to the folder that contains "srcsafe.ini".
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.BaseTask.Path">
            <summary>
            The Visual SourceSafe project or file path you wish the perform the
            action on (starting with "$/").
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.BaseTask.Password">
            <summary>
            The password to use to login to the SourceSafe database.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.BaseTask.UserName">
            <summary>
            The name of the user needed to access the Visual SourceSafe database.
            When no <see cref="P:NAnt.Contrib.Tasks.SourceSafe.BaseTask.UserName"/> is specified and "Use network
            name for automatic user log in" is enabled for the Visual SourceSafe
            database, then the current Windows username will be used to log in.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.BaseTask.Login">
            <summary>
            The name of the user needed to access the Visual SourceSafe database.
            When no <see cref="P:NAnt.Contrib.Tasks.SourceSafe.BaseTask.UserName"/> is specified and "Use network
            name for automatic user log in" is enabled, then the current
            Windows username will be used to log in.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.BaseTask.Version">
            <summary>
            A version of the path to reference. Accepts multiple forms, 
            including the label, version number, or date of the version. 
            If omitted, the latest version is used.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SourceSafe.AddTask.ExecuteTask">
            <summary>
            Main task execution method
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SourceSafe.AddTask.CreateProjectPath(System.String)">
            <summary>
            Create project hierarchy in vss
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.AddTask.Comment">
            <summary>
            Places a comment on all files added into the SourceSafe repository.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.AddTask.AddFileSet">
            <summary>
            List of files that should be added to SourceSafe.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.FileTimestamp">
            <summary>
            Defines how the local timestamp of files retrieved from a SourceSafe
            database should be set.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.SourceSafe.FileTimestamp.Current">
            <summary>
            The timestamp of the local file is set to the current date and time.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.SourceSafe.FileTimestamp.Modified">
            <summary>
            The timestamp of the local file is set to the file's last 
            modification date and time. 
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.SourceSafe.FileTimestamp.Updated">
            <summary>
            The timestamp of the local file is set to the date and time that 
            the file was last checked in to the database.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.CheckinTask">
            <summary>
            Used to checkin files into Visual Source Safe.
            </summary>
            <example>
              <para>Checkin all files from an absolute directory to a local sourcesafe database.</para>
              <code><![CDATA[
                <vsscheckin 
                  user="myusername" 
                  password="mypassword" 
                  localpath="C:\Dev\Latest"
                  recursive="true"
                  writable="true"
                  dbpath="C:\VSS\srcsafe.ini"
                  path="$/MyProduct"
                  comment="NAnt checkin"
                />
              ]]></code>
            </example>
            <example>
              <para>Checkin a file from a relative directory to a remote sourcesafe database.</para>
              <code><![CDATA[
                <vsscheckin 
                  user="myusername" 
                  password="mypassword" 
                  localpath="Latest\myFile.cs"
                  recursive="false"
                  writable="true"
                  dbpath="\\MyServer\VSS\srcsafe.ini"
                  path="$/MyProduct/myFile.cs"
                  comment="NAnt checkin"
                />
              ]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.CheckinTask.Comment">
            <summary>
            The comment for the new version.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.CheckinTask.LocalPath">
            <summary>
            The path to the local working directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.CheckinTask.Recursive">
            <summary>
            Determines whether to perform a recursive checkin. 
            The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.CheckinTask.Writable">
            <summary>
            Determines whether to leave the file(s) as writable. 
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.CheckoutTask">
            <summary>
            Task used to checkout files from Visual Source Safe.
            </summary>
            <example>
              <para>Checkout the latest files from a local sourcesafe database.</para>
              <code><![CDATA[
                <vsscheckout 
                  user="myusername" 
                  password="mypassword" 
                  localpath="C:\Dev\Latest"
                  recursive="true"
                  writable="true"
                  dbpath="C:\VSS\srcsafe.ini"
                  path="$/MyProduct"
                />
              ]]></code>
            </example>
            <example>
              <para>Checkout a file from a remote sourcesafe database.  Put it in a relative directory.</para>
              <code><![CDATA[
                <vsscheckout 
                  user="myusername" 
                  password="mypassword" 
                  localpath="Latest"
                  recursive="false"
                  writable="true"
                  dbpath="\\MyServer\VSS\srcsafe.ini"
                  path="$/MyProduct/myFile.cs"
                />
              ]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.CheckoutTask.LocalPath">
            <summary>
            The path to the local working directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.CheckoutTask.Recursive">
            <summary>
            Determines whether to perform a recursive checkout.
            The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.CheckoutTask.Writable">
            <summary>
            Determines whether to leave the file(s) as writable. 
            The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.CheckoutTask.FileTimestamp">
            <summary>
            Set the behavior for timestamps of local files. The default is
            <see cref="F:FileTimestamp.Current" />.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.DeleteTask">
            <summary>
            Used to delete or Destroy files or projects in Visual Source Safe.
            </summary>
            <example>
              <para>Delete a project from a local sourcesafe database.</para>
              <code><![CDATA[
                <vssdelete 
                  user="myusername" 
                  password="mypassword" 
                  dbpath="C:\VSS\srcsafe.ini"
                  path="$/MyProduct"
                />
              ]]></code>
            </example>
            <example>
              <para>Delete a file from the remote sourcesafe database.</para>
              <code><![CDATA[
                <vsscheckin 
                  user="myusername" 
                  password="mypassword" 
                  dbpath="\\MyServer\VSS\srcsafe.ini"
                  path="$/MyProduct/myFile.cs"
                />
              ]]></code>
            </example>
            <example>
              <para>Destroy a project from a local sourcesafe database.</para>
              <code><![CDATA[
                <vssdelete 
                  user="myusername" 
                  password="mypassword" 
                  dbpath="C:\VSS\srcsafe.ini"
                  path="$/MyProduct"
                  Destroy="true"
                />
              ]]></code>
            </example>
            <example>
              <para>Destroy a file from the remote sourcesafe database.</para>
              <code><![CDATA[
                <vssdelete 
                  user="myusername" 
                  password="mypassword" 
                  dbpath="\\MyServer\VSS\srcsafe.ini"
                  path="$/MyProduct/myFile.cs"
                  Destroy="true"
                />
              ]]></code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SourceSafe.DeleteTask.DeleteItem">
            <summary>
            Deletes the item unless <see cref="P:NAnt.Contrib.Tasks.SourceSafe.DeleteTask.Destroy"/> is <see langword="true"/>
            then the item is destroyed.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.DeleteTask.Destroy">
            <summary>
            Determines whether or not the item is Destroyed. 
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.DiffTask">
            <summary>
            Used to generate differences in a vss database. It will show all changes to a project
            after the specified label.
            </summary>
            <remarks>
            This only shows differences between the current version and the version specified.
            </remarks>
            <example>
              <code><![CDATA[
                       <vssdiff
                           dbpath='ss.ini'
                           path='$/My Project'
                           label='My Label'
                           user='ssuser'
                           outputfile='diff.xml'
                       />
              ]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.DiffTask.Label">
            <summary>
            The value of the label to compare to. Required.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.DiffTask.OutputFile">
            <summary>
            The output file to generate (xml)
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.GetTask">
            <summary>
            Used to retrieve an item or project from a Visual Source Safe database.
            </summary>
            <example>
              <para>Get the latest files from a local sourcesafe database.</para>
              <code><![CDATA[
                <vssget
                  user="myusername"
                  password="mypassword"
                  localpath="C:\Dev\Latest"
                  recursive="true"
                  replace="true"
                  writable="true"
                  dbpath="C:\VSS\srcsafe.ini"
                  path="$/MyProduct"
                />
              ]]></code>
            </example>
            <example>
              <para>Get the latest version of a file from a remote sourcesafe database.  Put it in a relative directory.</para>
              <code><![CDATA[
                <vssget
                  user="myusername"
                  password="mypassword"
                  localpath="Latest"
                  recursive="true"
                  replace="true"
                  writable="true"
                  dbpath="\\MyServer\VSS\srcsafe.ini"
                  path="$/MyProduct/myFile.cs"
                />
              ]]></code>
            </example>
            <example>
              <para>Get the latest version of a file from a remote sourcesafe database. Remove any deleted files from local image.</para>
              <code><![CDATA[
                <vssget
                  user="myusername"
                  password="mypassword"
                  localpath="C:\Dev\Latest"
                  recursive="true"
                  replace="true"
                  writable="true"
                  removedeleted="true"
                  dbpath="\\MyServer\VSS\srcsafe.ini"
                  path="$/MyProduct/myFile.cs"
                />
              ]]></code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SourceSafe.GetTask.RemoveDeletedFromLocalImage">
            <summary>
            Checks to see if we should remove local copies of deleted files, and starts
            the scan.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SourceSafe.GetTask.RemoveDeletedFromLocalImage(SourceSafeTypeLib.IVSSItem,System.String)">
            <summary>
            Scans the Project Item for deleted files and removes their local
            copies from the local image of the project. Obeys the recursive setting
            (and thus optionally calls itself recursively).
            </summary>
            <param name="item">The VSS Item (project) to check for deletions</param>
            <param name="localPathPrefix">The path to the folder of the item being processed</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.GetTask.LocalPath">
            <summary>
            The path to the local working directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.GetTask.Recursive">
            <summary>
            Determines whether to perform the get recursively.
            The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.GetTask.Replace">
            <summary>
            Determines whether to replace writable files.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.GetTask.Writable">
            <summary>
            Determines whether the files will be writable.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.GetTask.RemoveDeleted">
            <summary>
            If <see cref="T:System.IO.Path"/> refers to a project, determines whether files
            marked "deleted" in the repository will be removed from the local
            copy. The default is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.GetTask.UseModificationTime">
            <summary>
            Determines whether the timestamp on the local copy
            will be the modification time (if false or omitted, 
            the checkout time will be used)
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.GetTask.FileTimestamp">
            <summary>
            Set the behavior for timestamps of local files. The default is
            <see cref="F:FileTimestamp.Current" />.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.History">
            <summary>
            Generates an XML file showing all changes made to a Visual SourceSafe
            project/file between specified labels or dates (by a given user).
            </summary>
            <example>
              <para>
              Write all changes between "Release1" and "Release2" to XML file 
              "changelog.xml".
              </para>
              <code>
                <![CDATA[
            <vsshistory
                dbpath="C:\VSS\srcsafe.ini"
                path="$/My Project"
                fromlabel="Release1"
                tolabel="Release2"
                output="changelog.xml" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Write all changes between January 1st 2004 and March 31st 2004 to XML 
              file "history.xml".
              </para>
              <code>
                <![CDATA[
            <vsshistory
                dbpath="C:\VSS\srcsafe.ini"
                path="$/My Project"
                fromdate="01/01/2004"
                todate="03/31/2004"
                output="history.xml"
                />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.History.FromLabel">
            <summary>
            The value of the label to start comparing to. If it is not included, 
            the compare will start with the very first history item.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.History.ToLabel">
            <summary>
            The value of the label to compare up to. If it is not included,
            the compare will end with the last history item.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.History.FromDate">
            <summary>
            Start date for comparison.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.History.ToDate">
            <summary>
            End date for comparison.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.History.Output">
            <summary>
            Output file to save history to (as XML).
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.History.Recursive">
            <summary>
            Determines whether to perform the comparison recursively.
            The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.History.User">
            <summary>
            Name of the user whose changes you want to see.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.History.VersionFlags">
            <summary>
            Gets the flags that should be used to retrieve the history of
            <see cref="T:System.IO.Path"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.History.Login">
            <summary>
            Override to avoid exposing the corresponding attribute to build 
            authors.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.History.Version">
            <summary>
            Override to avoid exposing the corresponding attribute to build 
            authors.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.LabelTask">
            <summary>
            Used to apply a label to a Visual Source Safe item.
            </summary>
            <example>
              <para>Label all files in a local sourcesafe database. (Automatically applies the label recursively)</para>
              <code><![CDATA[
                <vsslabel 
                  user="myusername" 
                  password="mypassword" 
                  dbpath="C:\VSS\srcsafe.ini"
                  path="$/MyProduct"
                  comment="NAnt label"
                  label="myLabel"
                />
              ]]></code>
            </example>
            <example>
              <para>Label a file in a remote sourcesafe database.</para>
              <code><![CDATA[
                <vsslabel 
                  user="myusername" 
                  password="mypassword" 
                  dbpath="\\MyServer\VSS\srcsafe.ini"
                  path="$/MyProduct/myFile.cs"
                  comment="NAnt label"
                  label="myLabel"
                />
              ]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.LabelTask.Comment">
            <summary>
            The label comment.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.LabelTask.Label">
            <summary>
            The name of the label.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SourceSafe.UndoCheckoutTask">
            <summary>
            Task is used to undo a checkout from SourceSafe
            </summary>
            <example>
              <para>Undo a checkout of all of the files from a local sourcesafe database.</para>
              <code><![CDATA[
                <vssundocheckout 
                  user="myusername" 
                  password="mypassword" 
                  localpath="C:\Dev\Latest"
                  recursive="true"
                  dbpath="C:\VSS\srcsafe.ini"
                  path="$/MyProduct"
                />
              ]]></code>
            </example>
            <example>
              <para>Checkout a file from a remote sourcesafe database.  Put it in a relative directory.</para>
              <code><![CDATA[
                <vssundocheckout 
                  user="myusername" 
                  password="mypassword" 
                  localpath="Latest"
                  recursive="false"
                  dbpath="\\MyServer\VSS\srcsafe.ini"
                  path="$/MyProduct/myFile.cs"
                />
              ]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.UndoCheckoutTask.LocalPath">
            <summary>
            The path to the local working directory. This is required if you wish to 
            have your local file replaced with the latest version from SourceSafe.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SourceSafe.UndoCheckoutTask.Recursive">
            <summary>
            Determines whether to perform a recursive undo of the checkout.
            The default is <see langword="true" />.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SqlTask">
            <summary>
            A task to execute arbitrary SQL statements against a OLEDB data source.
            </summary>
            <remarks>
            You can specify a set of sql statements inside the
            sql element, or execute them from a text file that contains them. You can also
            choose to execute the statements in a single batch, or execute them one by one
            (even inside a transaction, if you want to).
            </remarks>
            <example>
              <para>
              Execute a set of statements inside a transaction.
              </para>
              <code>
                <![CDATA[
            <sql
                connstring="Provider=SQLOLEDB;Data Source=localhost; Initial Catalog=Pruebas; Integrated Security=SSPI"
                transaction="true"
                delimiter=";"
                delimstyle="Normal"
            >
                INSERT INTO jobs (job_desc, min_lvl, max_lvl) VALUES('My Job', 22, 45);
                INSERT INTO jobs (job_desc, min_lvl, max_lvl) VALUES('Other Job', 09, 43);
                SELECT * FROM jobs;
            </sql>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Execute a set of statements from a file and write all query results 
              to a file.
              </para>
              <code>
                <![CDATA[
            <sql
                connstring="Provider=SQLOLEDB;Data Source=localhost; Initial Catalog=Pruebas; Integrated Security=SSPI"
                transaction="true"
                delimiter=";"
                delimstyle="Normal"
                print="true"
                source="sql.txt"
                output="${outputdir}/results.txt"
            />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Execute a SQL script generated by SQL Server Enterprise Manager.
              </para>
              <code>
                <![CDATA[
            <sql
                connstring="Provider=SQLOLEDB;Data Source=localhost; Initial Catalog=Pruebas; Integrated Security=SSPI"
                transaction="true"
                delimiter="GO"
                delimstyle="Line"
                print="true"
                source="pubs.xml"
                batch="false"
                output="${outputdir}/results.txt"
            />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SqlTask.Initialize">
            <summary>
            Initializes task and ensures the supplied attributes are valid.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SqlTask.ExecuteTask">
            <summary>
            This is where the work is done.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SqlTask.ExecuteStatements(NAnt.Contrib.Util.SqlHelper)">
            <summary>
            Executes the SQL Statements one by one.
            </summary>
            <param name="sqlHelper"></param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SqlTask.ExecuteStatementsInBatch(NAnt.Contrib.Util.SqlHelper)">
            <summary>
            Executes the SQL statements in a single batch.
            </summary>
            <param name="sqlHelper"></param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SqlTask.ProcessResults(System.Data.IDataReader,System.IO.TextWriter)">
            <summary>
            Process a result set.
            </summary>
            <param name="results">Result set.</param>
            <param name="writer"><see cref="T:System.IO.TextWriter"/> to write output to.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.ConnectionString">
            <summary>
            Connection string used to access database.
            This should be an OleDB connection string.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.Encoding">
            <summary>
            The encoding of the files containing SQL statements. The default is
            the system's current ANSI code page.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.Source">
            <summary>
            File where the sql statements are defined.
            </summary>
            <remarks>
            You cannot specify both a source and an inline set of statements.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.Delimiter">
            <summary>
            String that separates statements from one another.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.Batch">
            <summary>
            If true, the statements will be executed as a single batch.
            If false, they will be executed one by one. Default is true.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.ExpandProperties">
            <summary>
            If true, the any nant-style properties on the sql will be
            expanded before execution. Default is true.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.CommandTimeout">
            <summary>
            Command timeout to use when creating commands.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.DelimiterStyle">
            <summary>
            Kind of delimiter used. Allowed values are Normal or Line.
            </summary>
            <remarks>
            Delimiters can be of two kinds: Normal delimiters are
            always specified inline, so they permit having two
            different statements in the same line. Line delimiters,
            however, need to be in a line by their own.
            Default is Normal.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.Print">
            <summary>
            If set to true, results from the statements will be
            output to the build log.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.Output">
            <summary>
            If set, the results from the statements will be output to the 
            specified file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.UseTransaction">
            <summary>
            If set to <see langword="true" />, all statements will be executed
            within a single transaction. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.Append">
            <summary>
            Whether output should be appended to or overwrite
            an existing file. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.ShowHeaders">
            <summary>
            If set to <see langword="true" />, prints headers for result sets.
            The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.QuoteChar">
            <summary>
            The character(s) to surround result columns with when printing, the 
            default is an empty string.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SqlTask.OutputWriter">
            <summary>
            Gets the underlying <see cref="T:System.IO.TextWriter"/> to which output will 
            be written if <see cref="P:NAnt.Contrib.Tasks.SqlTask.Output"/> is set.
            </summary>
            <value>
            A <see cref="T:System.IO.TextWriter"/> for the file specified in <see cref="P:NAnt.Contrib.Tasks.SqlTask.Output"/>,
            or <see langword="null"/> if <see cref="P:NAnt.Contrib.Tasks.SqlTask.Output"/> is not set.
            </value>
        </member>
        <member name="T:NAnt.Contrib.Tasks.StarTeam.LabelTask">
            <summary>
            Allows creation of view labels in StarTeam repositories.
            </summary>
            <remarks>
            <para>Often when building projects you wish to label the source control repository.</para>
            <para>By default this task creates view labels with the build option turned on.</para>
            <para>This task was ported from the Ant task http://jakarta.apache.org/ant/manual/OptionalTasks/starteam.html#stlabel </para>
            <para>You need to have the StarTeam SDK installed for this task to function correctly.</para>
            </remarks>
            <example>
              <para>Creates a label in a StarTeam repository.</para>
              <code>
                <![CDATA[
            <!-- 
              constructs a 'url' containing connection information to pass to the task 
              alternatively you can set each attribute manually 
            -->
            <property name="ST.url" value="user:pass@serverhost:49201/projectname/viewname" />
            <stlabel label="3.1 (label title goes here)" description="This is a label description" url="${ST.url}" />
                ]]>
              </code>
            </example>
        </member>
        <member name="T:NAnt.Contrib.Tasks.StarTeam.StarTeamTask">
            <summary>
            Base star team task.
            </summary>
            <remarks>
            <para> 
            Common super class for all StarTeam tasks. At this level of the hierarchy we are concerned only with obtaining a
            connection to the StarTeam server.  The subclass <see cref="T:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask"/>, abstracts tree-walking 
            behavior common to many subtasks.
            </para>
            <para>This class ported from the Ant task http://jakarta.apache.org/ant/manual/OptionalTasks/starteam.html </para>
            <para>You need to have the StarTeam SDK installed for StarTeam tasks to function correctly.</para>
            </remarks>
            <seealso cref="T:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask"/>
            <author> <a href="mailto:jcyip@thoughtworks.com">Jason Yip</a></author>
            <author> <a href="mailto:stevec@ignitesports.com">Steve Cohen</a></author>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamTask._username">
            <value> The username of the connection</value>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamTask._password">
            <value> The username of the connection</value>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamTask._servername">
            <value> name of Starteam server to connect to</value>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamTask._serverport">
            <value> port of Starteam server to connect to</value>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamTask._projectname">
            <value> name of Starteam project to connect to</value>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamTask._viewname">
            <value> name of Starteam view to connect to</value>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamTask._server">
            <value>The starteam server through which all activities will be done.</value>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.createSnapshotView(StarTeam.StView)">
            <summary>
            Derived classes must override this method to instantiate a view configured appropriately to its task.
            </summary>
            <param name="rawview">the unconfigured <code>View</code></param>
            <returns>the view appropriately configured.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.openView">
            <summary>
            All tasks will call on this method to connect to StarTeam and open the view for processing.  
            </summary>
            <returns>the a view to be used for processing.</returns>
            <seealso cref="M:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.createSnapshotView(StarTeam.StView)"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.getUserName(System.Int32)">
            <summary> Returns the name of the user or a blank string if the user is not found.</summary>
            <param name="userID">a user's ID</param>
            <returns>the name of the user</returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.servername">
            <summary>
            Name of StarTeamServer.
            </summary>
            <remarks>
            Required if <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url"/> is not set. If you wish to set all 
            connection parameters at once set <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url"/>.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.serverport">
            <summary>
            Port number of the StarTeam connection.
            </summary>
            <remarks>
            Required if <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url"/> is not set. If you wish to set all 
            connection parameters at once set <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url"/>.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.projectname">
            <summary>
            The name of the StarTeam project to be acted on
            </summary>
            <remarks>
            Required if <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url"/> is not set. If you wish to set all 
            connection parameters at once set <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url"/>.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.viewname">
            <summary>
            The name of the StarTeam view to be acted on.
            </summary>
            <remarks>
            Required if <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url"/> is not set. If you wish to set all 
            connection parameters at once set <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url"/>.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.username">
            <summary>
            The StarTeam user name used for login.
            </summary>
            <remarks>
            Required if <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url"/> is not set. If you wish to set all 
            connection parameters at once set <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url"/>.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.password">
            <summary> 
            The password used for login.
            </summary>
            <remarks>
            Required if <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url"/> is not set. If you wish to set all 
            connection parameters at once set <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url"/>.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.url">
            <summary> 
            One stop to set all parameters needed to connect to a StarTeam server.
            </summary>
            <remarks>
            <para>If you do not wish to specify a url you can set each parameter individually. 
            You must set all connection parameters for the task to be able to connect to the StarTeam server.</para>
            </remarks>
            <example>
            <para>Here is how to configure the url string.</para>
            <code>servername:portnum/project/view</code>
            <para>You can optionally specify a username and password.</para>
            <code>username:password@servername:portnum/project/view</code>
            </example>
            <seealso cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.servername"/>
            <seealso cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.serverport"/>
            <seealso cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.projectname"/>
            <seealso cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.viewname"/>
            <seealso cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.username"/>
            <seealso cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamTask.password"/>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.LabelTask._labelName">
            <summary> The name of the label to be set in Starteam.</summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.LabelTask._description">
            <summary> The label description to be set in Starteam.</summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.LabelTask._isBuildLabel">
            <summary> Is the label being created a build label.</summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.LabelTask._labelAsOfDate">
            <summary> If set the datetime to set the label as of.</summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.LabelTask._isAsOfDateSet">
            <summary> Kludgy flag to keep track if date has been set. 
            Please kill this if you can. Here based on experiences I have had with VB.NET</summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.LabelTask._isRevision">
            <summary> Does user wish to make a revision label?</summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.LabelTask.createSnapshotView(StarTeam.StView)">
            <summary> 
            Override of base-class abstract function creates an appropriately configured view.  
            For labels this a view configured as of this.lastBuild.
            </summary>
            <param name="raw">the unconfigured <code>View</code></param>
            <returns>the snapshot <code>View</code> appropriately configured.</returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.LabelTask.Label">
            <summary> 
            The name to be given to the label; required.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.LabelTask.BuildLabel">
            <summary> Should label be marked build : default is true</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.LabelTask.RevisionLabel">
            <summary> 
            Should label created be a revision label. The default is 
            <see langword="false"/>.
            </summary>
            <remarks>
            <see cref="P:NAnt.Contrib.Tasks.StarTeam.LabelTask.BuildLabel"/> has no effect if this is set to <see langword="true"/>
            as revision labels cannot have a build status.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.LabelTask.Description">
            <summary> Optional description of the label to be stored in the StarTeam project.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.LabelTask.LastBuild">
            <summary> 
            Optional: If this property is set the label will be created as of the datetime specified. 
            Please provide a datetime format that can be parsed via 
            <see cref="M:System.DateTime.Parse(System.String,System.IFormatProvider)"/>.
            </summary>
            <remarks>
            This property is ignored when <see cref="P:NAnt.Contrib.Tasks.StarTeam.LabelTask.RevisionLabel"/> set to 
            <see langword="true"/>.
            </remarks>
        </member>
        <member name="T:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel">
            <summary>
            Task for supporting labeling of repositories with incremented version 
            numbers. The version number calculated will be concatenated to the 
            <see cref="P:NAnt.Contrib.Tasks.StarTeam.LabelTask.Label"/>.
            </summary>
            <remarks>
            <para>
            Instruments root of repository with <c>versionnumber.xml</c> file.
            </para>
            <para>
            If this file is not present, it is created and checked into StarTeam. 
            The default version number is 1.0.0. By default the build number is 
            incremented. Properties are present to allow setting and incrementing 
            of major, minor, and build versions.
            </para>
            <para>
            When label is created, properties are set to expose version information 
            and the new label :
            </para>
            <list type="bullet">
                <item>
                    <description>label</description>
                </item>
                <item>
                    <description>Version.text</description>
                </item>
                <item>
                    <description>Version.major</description>
                </item>
                <item>
                    <description>Version.minor</description>
                </item>
                <item>
                    <description>Version.build</description>
                </item>
            </list>
            <note>
            Incrementing or setting major or minor versions does NOT reset the 
            build version.
            </note>
            </remarks>
            <example>
              <para>Increment the build version.</para>
              <code>
                <![CDATA[
            <stautolabel url="${ST.url}" />
                ]]>
              </code>
            </example>
            <example>
              <para>Set the major version.</para>
              <code>
                <![CDATA[
            <stautolabel majorversion="2" url="${ST.url}" />
                ]]>
              </code>
            </example>
            <example>
              <para>Increment the minor version.</para>
              <code>
                <![CDATA[
            <stautolabel incrementminor="true" url="${ST.url}" />
                ]]>
              </code>
            </example>
            <example>
              <para>Example <c>versionnumber.xml</c> file.</para>
              <code>
                <![CDATA[
            <?xml version="1.0"?>
            <stautolabel>
                <version major="1" minor="0" build="0" />
            </stautolabel>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.ExecuteTask">
            <summary>
            Looks for versionnumber.xml at root of repository. 
            Updates the xml in this file to correspond with properties set by user and checks in changes. 
            A label is then created based on properties set. 
            </summary>
            <remarks>
            Default behavior is to <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.IncrementBuild"/> number. 
            If user sets <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.MajorVersion"/>, <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.MinorVersion"/>, or <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.BuildVersion"/> no incrementing is done 
            and the exact version set and/or read from versionnumber.xml is used.
            <para>The title of the Label is the <see cref="P:NAnt.Contrib.Tasks.StarTeam.LabelTask.Label"/> property concatenated with the version number Major.Minor.Build</para>
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.getVersionStFile(StarTeam.StView)">
            <summary>
            Locate the <c>versionnumber.xml</c> file in the repository. If it 
            is not present, the file is created. The file is checked out 
            exclusively for editing.
            </summary>
            <param name="snapshot">StarTeam view we are working with.</param>
            <returns>
            StarTeam file handle containing version xml.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.createVersionStFile(StarTeam.StFolder)">
            <summary>
            Creates the versionumber.xml file in the repository.
            </summary>
            <param name="stFolder">StarTeam folder desired to put the versionnumber.xml files into</param>
            <returns>StarTeam File handle to the created file.</returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.VersionFile">
            <summary> 
            Allows user to specify the filename where the version xml is stored. 
            The default is <c>versionnumber.xml</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.IncrementMajor">
            <summary> 
            Increment major version number. The default is <see langword="false"/>.
            If <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.MajorVersion"/> is set, this property is ignored.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.IncrementMinor">
            <summary> 
            Increment minor version number. The default is <see langword="false"/>. 
            If <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.MinorVersion"/> is set, this property is ignored.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.IncrementBuild">
            <summary> 
            Increment build version number. The default is <see langword="true"/>.
            If <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.BuildVersion"/> is set, this property is ignored.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.MajorVersion">
            <summary> 
            Major version number used for label.  If this value is set, 
            <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.IncrementMajor"/> is ignored.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.MinorVersion">
            <summary> 
            Minor version number used for label. If this value is set, 
            <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.IncrementMinor"/> is ignored.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.BuildVersion">
            <summary> 
            Build version number used for label. 
            If this value is set. <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamAutoLabel.IncrementBuild"/> is ignored.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin">
            <summary>
            Task to check in files to StarTeam repositories. 
            </summary>
            <remarks>
            <para>You add files to the repository that are not controlled by setting <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin.adduncontrolled"/>.</para>
            <para>This task was ported from the Ant task http://jakarta.apache.org/ant/manual/OptionalTasks/starteam.html#stcheckin </para>
            <para>You need to have the StarTeam SDK installed for this task to function correctly.</para>
            </remarks>
            <example>
              <para>Recursively checks in all files in the project.</para>
              <code>
                <![CDATA[
            <!-- 
              constructs a 'url' containing connection information to pass to the task 
              alternatively you can set each attribute manually 
            -->
            <property name="ST.url" value="user:pass@serverhost:49201/projectname/viewname" />
            <stcheckin forced="true" rootstarteamfolder="/" recursive="true" url="${ST.url}" />
                ]]>
              </code>
            </example>
        </member>
        <member name="T:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask">
            <summary>
            Base for tree based star team tasks.
            </summary>
            <remarks>
            <para>
            Abstracts tree-walking behavior common to many subtasks.
            </para>
            <para>
            This class provides tree iteration functionality. Derived classes will implement their specific task 
            functionally using the visitor pattern, specifically by implementing the method <see cref="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.visit(StarTeam.StFolder,System.IO.FileInfo)"/>
            </para>
            <para>This class ported from the Ant task http://jakarta.apache.org/ant/manual/OptionalTasks/starteam.html </para>
            <para>You need to have the StarTeam SDK installed for StarTeam tasks to function correctly.</para>
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.ExecuteTask">
            <summary>
            Does the work of opening the supplied Starteam view and calling 
            the <see cref="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.visit(StarTeam.StFolder,System.IO.FileInfo)"/> method setting the pattern in motion to perform the task.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.getLabelID(StarTeam.StView)">
            <summary> 
            Helper method calls on the StarTeam API to retrieve an ID number for the specified view, corresponding to this.label.
            </summary>
            <returns>The Label identifier or <c>-1</c> if no label was provided.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.visit(StarTeam.StFolder,System.IO.FileInfo)">
            <summary> Derived classes must override this class to define actual processing to be performed on each folder in the tree defined for the task</summary>
            <param name="rootStarteamFolder">the StarTeam folderto be visited</param>
            <param name="rootLocalFolder">the local mapping of rootStarteamFolder</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.testPreconditions">
            <summary> 
            Derived classes must override this method to define tests for any preconditons required by the task.  
            This method is called at the beginning of the ExecuteTask method. 
            </summary>
            <seealso cref="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.ExecuteTask"/>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.listLocalFiles(System.IO.FileInfo)">
            <summary> 
            Gets the collection of the local file names in the supplied directory.
            We need to check this collection against what we find in Starteam to
            understand what we need to do in order to synch with the repository.
            </summary>
            <remarks>
            The goal is to keep track of which local files are not controlled by StarTeam.
            </remarks>
            <param name="localFolder">Local folder to scan</param>
            <returns>hashtable whose keys represent a file or directory in localFolder.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.delistLocalFile(System.Collections.Hashtable,System.IO.FileInfo)">
            <summary> 
            Removes file being worked with from the <see cref="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.listLocalFiles(System.IO.FileInfo)"/> generated hashtable.
            </summary>
            <remarks>
            The goal is to keep track of which local files are not controlled by StarTeam.
            </remarks>
            <param name="localFiles">Hashtable of the current directory's file|dire</param>
            <param name="thisfile">file to remove from list.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.IsIncluded(System.String)">
            <summary>
            Evaluates defined <see cref="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.Includes"/> and <see cref="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.Excludes"/> patterns against a filename. 
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.ToRegexPattern(System.String)">
            <summary>
                Lifted/Modified from <see cref="T:NAnt.Core.DirectoryScanner"/> to convert patterns to match filenames to regularexpressions.
            </summary>
            <param name="nantPattern">Search pattern - meant to be just a filename with no path info</param>
            <remarks>The directory seperation code in here most likely is overkill.</remarks>
            <returns>Regular expresssion for searching matching file names</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.populatePatterns(System.Collections.Specialized.StringCollection,System.Collections.Specialized.StringCollection@)">
            <summary>
            Convert path patterns to regularexpression patterns. Stored in the given string collection.
            </summary>
            <param name="paths">collection of paths to expand into regular expressions</param>
            <param name="patterns">collection to store the given regularexpression patterns</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.rootstarteamfolder">
            <summary>
            Root StarTeam folder to begin operations on. Defaults to the root of the view.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.RootLocalFolder">
            <summary>
            Root Local folder where files are to be checkout/in or manipulated. Defaults to the StarTeam default folder. 
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.Includes">
            <summary>
            Accepts comma de-limited list of expressions to include in tree operations. 
            If nothing is set ALL filespecs are included.
            </summary>
            <example>
            <para>Match all C# files in the directory</para>
            <code>*.cs</code>
            </example>
            <remarks>
            Expressions should be just for filename matching. 
            Technically relative directory information is accepted but will never match.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.Excludes">
            <summary>
            Accepts comma de-limited list of expressions to exclude from tree operations. 
            If nothing is specified. NO filespecs are excluded.
            </summary>
            <example>
            <para>Match <b>No</b> C# files in the directory</para>
            <code>*.cs</code>
            </example>
            <remarks>
            <para>
            If a excludes pattern is set with no <see cref="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.Includes"/> patterns present includes defaults to "*"
            </para>
            Expressions should be just for filename matching. 
            Technically relative directory information is accepted but will never match.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.recursive">
             <summary>
            Default : true - should tasks recurse through tree.
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.Forced">
            <summary>
            Default : false - force check in/out actions regardless of the status that StarTeam is maintaining for the file. 
            </summary>
            <remarks>
            <para>If <see cref="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.RootLocalFolder"/> is set then this property should be set <c>true</c>. 
            Otherwise the checkout will be based on how the repository compares to local target folder.
            </para>
            <para>Note that if forced is not on. Files with status Modified and Merge will not be processed.</para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.Label">
            <summary> 
            Label used for checkout. If no label is set latest state of repository is checked out.
            </summary>
            <remarks>
            The label must exist in starteam or an exception will be thrown. 
            </remarks>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin.starTeamLockTypeStatics">
            <summary>classes used to access static values</summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin.starteamFolderFactory">
            <summary>Facotry classes used when files and folders are added to the repository. Populated when adduncontrolled is enabled.</summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin._createFolders">
            <value> will folders be created for new items found with the checkin.</value>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin._comment">
            <value> The comment which will be stored with the checkin.</value>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin._addUncontrolled">
            <value> holder for the add Uncontrolled attribute.  If true, all local files not in StarTeam will be added to the repository.</value>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin._lockStatus">
            <value> This attribute tells whether unlocked files on checkin (so that other users may access them) checkout or to 
            leave the checkout status alone (default).
            </value>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin.createSnapshotView(StarTeam.StView)">
            <summary>
            Override of base-class abstract function creates an appropriately configured view.  For checkins this is
            always the current or "tip" view.
            </summary>
            <param name="raw">the unconfigured <code>View</code></param>
            <returns>the snapshot <code>View</code> appropriately configured.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin.testPreconditions">
            <summary> Implements base-class abstract function to define tests for any preconditons required by the task</summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin.visit(StarTeam.StFolder,System.IO.FileInfo)">
            <summary> Implements base-class abstract function to perform the checkin operation on the files in each folder of the tree.</summary>
            <param name="starteamFolder">the StarTeam folder to which files will be checked in</param>
            <param name="targetFolder">local folder from which files will be checked in</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin.addUncontrolledItems(System.Collections.Hashtable,StarTeam.StFolder)">
            <summary> Adds to the StarTeam repository everything on the local machine that is not currently in the repository.</summary>
            <param name="localFiles">Hasttable containing files missing in the repository for the current folder</param>
            <param name="folder">StarTeam folder to which these items are to be added.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin.add(StarTeam.StFolder,System.IO.FileInfo)">
            <summary> Adds the file or directpry to the repository.</summary>
            <param name="parentFolder">StarTeam folder underwhich items will be added.</param>
            <param name="file">the file or directory to add</param>
            <returns>true if the file was successfully added otherwise false.</returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin.adduncontrolled">
            <summary> 
            if true, any files or folders NOT in StarTeam will be added to the repository.  Defaults to "false".
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckin.unlocked">
            <summary> 
            Set to do an unlocked checkout; optional, default is false; 
            If true, file will be unlocked so that other users may change it.  If false, lock status will not change. 
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout">
            <summary>
            Task to check out files from StarTeam repositories. 
            </summary>
            <remarks>
            <para>You can check out by <see cref="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.Label"/> and control the type of lock with <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout.locktype"/>.</para>
            <para>You can delete files that are not in source control by setting <see cref="P:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout.deleteuncontrolled"/>.</para>
            <para>This task was ported from the Ant task http://jakarta.apache.org/ant/manual/OptionalTasks/starteam.html#stcheckout </para>
            <para>You need to have the StarTeam SDK installed for this task to function correctly.</para>
            </remarks>
            <example>
              <para>Recursively checks out all files in the project with an exclusive lock.</para>
              <code>
                <![CDATA[
            <!-- 
              constructs a 'url' containing connection information to pass to the task 
              alternatively you can set each attribute manually 
            -->
            <property name="ST.url" value="user:pass@serverhost:49201/projectname/viewname" />
            <stcheckout locktype="exclusive" rootstarteamfolder="/" recursive="true" url="${ST.url}" />
                ]]>
              </code>
            </example>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout._createDirs">
            <value> holder for the createDirs property.</value>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout._deleteUncontrolled">
            <value> holder for the deleteUncontrolled property.</value>
        </member>
        <member name="F:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout._lockStatus">
            <value> holder for the lockstatus property. </value>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout.createSnapshotView(StarTeam.StView)">
            <summary> 
            Override of base-class abstract function creates an appropriately configured view for checkout. 
            If a label is specified it is used otherwise the current view of the repository is used.
            </summary>
            <param name="raw">the unconfigured <code>StarTeam View</code></param>
            <returns>the snapshot <code>StarTeam View</code> appropriately configured.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout.testPreconditions">
            <summary> Implements base-class abstract function to define tests for any preconditons required by the task</summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout.visit(StarTeam.StFolder,System.IO.FileInfo)">
            <summary> 
            Implements base-class abstract function to perform the checkout operation on the files in each folder of the tree.
            </summary>
            <param name="starteamFolder">the StarTeam folder from which files to be checked out</param>
            <param name="targetFolder">the local mapping of the starteam folder</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout.deleteUncontrolledItems(System.Collections.Hashtable)">
            <summary> 
            Deletes everything on the local machine that is not in the repository.
            </summary>
            <param name="localFiles">Hashtable containing filenames to be deleted</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout.delete(System.IO.FileInfo)">
            <summary> Utility method to delete the file (and it's children) from the local drive.</summary>
            <param name="file">the file or directory to delete.</param>
            <returns>was the file successfully deleted</returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout.createworkingdirs">
            <summary> 
            Default : true - Create directories that are in the Starteam repository even if they are empty.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout.deleteuncontrolled">
            <summary> 
            <b>Not fully tested CAREFUL</b> Default : false - Should all local files <b>NOT</b> in StarTeam be deleted?
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.StarTeam.StarTeamCheckout.locktype">
            <summary> 
            What type of lock to apply to files checked out.
            <list type="bullet">
              <listheader>
                <term>LockType</term>
              </listheader>
              <item>
                <term>unchanged</term>
                <description>default: do not make any changes to the lock state of items.</description>
              </item>
              <item>
                <term>exclusive</term>
                <description>Exclusively lock items. No other users can update the object while it is exclusively locked.</description>
              </item>
              <item>
                <term>nonexclusive</term>
                <description>Put a non-exclusive lock on the item.</description>
              </item>
              <item>
                <term>unlocked</term>
                <description>Remove locks from all items checked out. This accompanied by force would effectively override a lock and replace local contents with the current version.</description>
              </item>
            </list>
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.StarTeam.StarTeamLabel">
            <summary>
            Allows creation of view labels in StarTeam repositories.
            </summary>
            <remarks>
            <para>Often when building projects you wish to label the source control repository.</para>
            <para>By default this task creates view labels with the build option turned on.</para>
            <para>This task was ported from the Ant task http://jakarta.apache.org/ant/manual/OptionalTasks/starteam.html#stlabel </para>
            <para>You need to have the StarTeam SDK installed for this task to function correctly.</para>
            </remarks>
            <example>
              <para>Creates a label in a StarTeam repository.</para>
              <code>
                <![CDATA[
            <!-- 
              constructs a 'url' containing connection information to pass to the task 
              alternatively you can set each attribute manually 
            -->
            <property name="ST.url" value="user:pass@serverhost:49201/projectname/viewname" />
            <stlabel label="3.1 (label title goes here)" description="This is a label description" url="${ST.url}" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamLabel.ExecuteTask">
            <summary>
            This method does the work of creating the new view and checking it 
            into Starteam.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.StarTeam.StarTeamList">
            <summary>
            List items in StarTeam repositories.
            </summary>
            <remarks>
            <para>This task was ported from the Ant task http://jakarta.apache.org/ant/manual/OptionalTasks/starteam.html#stlist </para>
            <para>You need to have the StarTeam SDK installed for this task to function correctly.</para>
            </remarks>
            <example>
              <para>Lists all files in a StarTeam repository.</para>
              <code>
                <![CDATA[
            <!-- 
              constructs a 'url' containing connection information to pass to the task 
              alternatively you can set each attribute manually 
            -->
            <property name="ST.url" value="user:pass@serverhost:49201/projectname/viewname" />
            <stlist rootstarteamfolder="/" recursive="true" url="${ST.url}" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamList.createSnapshotView(StarTeam.StView)">
            <summary>
            Override of base-class abstract function creates an appropriately configured view for checkoutlists. 
            The current view or a view of the label specified <see cref="P:NAnt.Contrib.Tasks.StarTeam.TreeBasedTask.Label"/>.
            </summary>
            <param name="raw">the unconfigured <c>View</c></param>
            <returns>the snapshot <c>View</c> appropriately configured.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamList.testPreconditions">
            <summary>Required base-class abstract function implementation is a no-op here.</summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.StarTeam.StarTeamList.visit(StarTeam.StFolder,System.IO.FileInfo)">
            <summary> Implements base-class abstract function to perform the checkout
            operation on the files in each folder of the tree.</summary>
            <param name="starteamFolder">the StarTeam folder from which files to be checked out</param>
            <param name="targetFolder">the local mapping of rootStarteamFolder</param>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SurroundSCM.SSCMBatch">
            <summary>
            Processes <see href="http://www.seapine.com/surroundscm.html">Surround SCM</see> batch files.
            </summary>
            <remarks>
            Processes the batch commands found in the input file. Each line in the 
            input file should contain a single Surround SCM command including proper 
            command line options. The sscm command, Surround SCM server address, 
            port number, username and password are not required for each command line.
            </remarks>
            <example>
              <para>
              Run the batch file <c>${src}/sscm.batch</c> on the server at localhost,
              port 4900 with username 'administrator' and a blank password. All script
              output is directed to the console.
              </para>
              <code>
            &lt;sscmbatch
                serverconnect=&quot;localhost:4900&quot;
                serverlogin=&quot;administrator:&quot;
                input=&quot;${src}/sscm.batch&quot;
            /&gt;
              </code>
            </example>
            <example>
              <para>
              Run the batch file <c>${src}/sscm.batch</c> on the server at localhost, 
              port 4900 with username 'administrator' and a blank password. All script 
              output is redirected to <c>${dist}/sscm.batch.out</c>.
              </para>
              <code>
            &lt;sscmbatch
                serverconnect=&quot;localhost:4900&quot;
                serverconnect=&quot;administrator:&quot;
                input=&quot;${src}/sscm.batch&quot;
                output=&quot;${dist}/sscm.batch.out&quot;
            /&gt;
              </code>
            </example>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SurroundSCM.SSCMTask">
            <summary>
            <see href="http://www.seapine.com/surroundscm.html">Surround SCM</see>
            abstract task base.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SurroundSCM.SSCMTask.WriteCommandLineArguments(System.Text.StringBuilder)">
            <summary>
            Writes the task-specific arguments to the specified 
            <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="argBuilder">The <see cref="T:System.Text.StringBuilder"/> to write the task-specific arguments to.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMTask.ServerConnect">
            <summary>
            The address and port number of the Surround SCM server host computer. 
            Format is server:port. If not entered, the last saved connection 
            parameters are used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMTask.ServerLogin">
            <summary>
            The username and password used to login to the Surround SCM server. 
            Format is username:password. If not entered, the last saved login 
            parameters are used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMTask.ExeName">
            <summary>
            Override ExeName paramater to sscm.exe for Surround SCM.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMTask.ProgramArguments">
            <summary>
            Gets the command line arguments for the external program.
            </summary>
            <value>
            The command line arguments for the external program.
            </value>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SurroundSCM.SSCMBatch.WriteCommandLineArguments(System.Text.StringBuilder)">
            <summary>
            Writes the task-specific arguments to the specified 
            <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="argBuilder">The <see cref="T:System.Text.StringBuilder"/> to write the task-specific arguments to.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMBatch.InputFile">
            <summary>
            File to read commands from.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMBatch.OutputFile">
            <summary>
            File to direct all standard output to. When executing commands from 
            the input file, all output is written to this file instead of being 
            displayed on the screen.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SurroundSCM.SSCMBranch">
            <summary>
            Creates new branches for <see href="http://www.seapine.com/surroundscm.html">Surround SCM</see>.
            </summary>
            <example>
              <para>
              Create a new Baseline branch 'Widget 1.0' from branch 'Mainline', 
              repository 'Mainline/Widget' with the given comments. All files 
              are branched at the tip version.
              </para>
              <code>
            &lt;sscmbranch
                serverconnect=&quot;localhost:4900&quot;
                serverlogin=&quot;administrator:&quot;
                branch=&quot;Widget 1.0&quot;
                repository=&quot;Mainline/Widget&quot;
                parent=&quot;Mainline&quot;
                comment=&quot;Branch for continuing Widget 1.0 development&quot;
                type=&quot;baseline&quot;
            /&gt;
              </code>
            </example>
            <example>
              <para>
              Create a new Workspace branch 'MyWidgetDevelopment' from branch 
              'Widget 1.0', repository 'Mainline/Widget'. All files are branched 
              at the tip version.
              </para>
              <code>
            &lt;sscmbranch
                serverconnect=&quot;localhost:4900&quot;
                serverlogin=&quot;administrator:&quot;
                branch=&quot;MyWidgetDevelopment&quot;
                repository=&quot;Mainline/Widget&quot;
                parent=&quot;Widget 1.0&quot;
            /&gt;
              </code>
            </example>
            <example>
              <para>
              Create a new Snapshot branch 'Build as of 12-1-03' from branch 
              'Widget 1.0', repository 'Mainline/Widget' with the given comments. 
              All files are branched at their version as of 12-01-03.
              </para>
              <code>
            &lt;sscmbranch
                serverconnect=&quot;localhost:4900&quot;
                serverlogin=&quot;administrator:&quot;
                name=&quot;Build as of 12-1-03&quot;
                repository=&quot;Mainline/Widget&quot;
                branch=&quot;Widget 1.0&quot;
                comment=&quot;Snapshot of source as it was on December 1st, 2003&quot;
                timestamp=&quot;2003120300:00:00&quot;
                type=&quot;snapshot&quot;
            /&gt;
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SurroundSCM.SSCMBranch.WriteCommandLineArguments(System.Text.StringBuilder)">
            <summary>
            Writes the task-specific arguments to the specified 
            <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="argBuilder">The <see cref="T:System.Text.StringBuilder"/> to write the task-specific arguments to.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMBranch.Branch">
            <summary>
            The name of the branch you want to create.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMBranch.Repository">
            <summary>
            The full repository path.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMBranch.ParentBranch">
            <summary>
            The parent branch you want to create the new, child branch from. 
            If not specified, the mainline branch is used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMBranch.Comment">
            <summary>
            Specifies a comment for the branch operation.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMBranch.ByLabel">
            <summary>
            Specifies which parent branch file versions are copied into the 
            child branch.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMBranch.ByTimestamp">
            <summary>
            Specifies which parent branch file versions are copied into the 
            child branch. Format is yyyymmddhh:mm:ss. If <see cref="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMBranch.ByLabel"/>
            attribute is specified, this parameter is ignored.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMBranch.IncludeRemoved">
            <summary>
            Include removed files when creating a branch with the 
            <see cref="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMBranch.ByLabel"/> or <see cref="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMBranch.ByTimestamp"/> option. 
            The default is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMBranch.Type">
            <summary>
            Specifies the type of branch you want to create. Possible values are
            <c>workspace</c>, <c>baseline</c>, or <c>snapshot</c>. The default is 
            <c>workspace</c>.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckin">
            <summary>
            Checks in files in <see href="http://www.seapine.com/surroundscm.html">Surround SCM</see>
            repository.
            </summary>
            <remarks>
            Check in updated Surround SCM files with changes, removes the lock on 
            the files, and makes changes available to other users.
            </remarks>
            <example>
              <para>
              Check In all files and repositories from repository 'Mainline/Widget' 
              recursively from the 'Widget 1.0' branch to the working directory setup 
              for user 'administrator'. This call outputs the progress of the Check In 
              to the console.
              </para>
              <code>
            &lt;sscmcheckin
                serverconnect=&quot;localhost:4900&quot;
                serverlogin=&quot;administrator:&quot;
                file=&quot;/&quot;
                branch=&quot;Widget 1.0&quot;
                repository=&quot;Mainline/Widget&quot;
                recursive=&quot;true&quot;
                comment=&quot;I made some changes&quot;
            /&gt;
              </code>
            </example>
            <example>
              <para>
              Check in file 'Mainline/Widget/Widget.java' from the 'Widget 1.0' 
              branch from the working directory setup for user 'administrator' 
              with comment 'I made some changes'. Set the 'Release 1.1.1' label 
              to this new version, even if the label already exists on an earlier 
              version.
              </para>
              <code>
            &lt;sscmcheckin
                serverconnect=&quot;localhost:4900&quot;
                serverlogin=&quot;administrator:&quot;
                file=&quot;Widget.java&quot;
                branch=&quot;Widget 1.0&quot;
                repository=&quot;Mainline/Widget&quot;
                comment=&quot;I made some changes&quot;
                label=&quot;Release 1.1.1&quot;
                overwritelabel=&quot;true&quot;
            /&gt;
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckin.WriteCommandLineArguments(System.Text.StringBuilder)">
            <summary>
            Writes the task-specific arguments to the specified 
            <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="argBuilder">The <see cref="T:System.Text.StringBuilder"/> to write the task-specific arguments to.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckin.Branch">
            <summary>
            Surround SCM branch name. The default is pulled from the local 
            working directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckin.Repository">
            <summary>
            Surround SCM repository path. The default is pulled from the local 
            working directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckin.File">
            <summary>
            File or repository name. Can be / or empty, which means the 
            repository specified by the repository option or the default 
            repository.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckin.Comment">
            <summary>
            Comment for the check-in.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckin.SkipAutomerge">
            <summary>
            Force check in without merge. Ignores code changes checked in after 
            the user's last checkout or merge. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckin.GetLocal">
            <summary>
            Get file after check in. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckin.KeepLocked">
            <summary>
            Keep the lock after check in. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckin.Label">
            <summary>
            A label for the check in code.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckin.OverwriteLabel">
            <summary>
            Overwrite previous label on file. The default is 
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckin.Quiet">
            <summary>
            Do not list repository and local full path of the Surround 
            SCM server. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckin.Recursive">
            <summary>
            Recursively check in all files and sub-repositories.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckin.TtpDatabase">
            <summary>
            The TestTrack Pro database configuration name.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckin.TtpLogin">
            <summary>
            The TestTrack Pro username and password.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckin.TtpDefects">
            <summary>
            The TestTrack Pro defect number(s) for attachment. Format is "#:#:#:#".
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckin.Writable">
            <summary>
            Make file writable after check in. The default is 
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckin.ForceUpdate">
            <summary>
            Update version even if no changes. The default is 
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckin.DeleteLocal">
            <summary>
            Remove local file after check in. The default is 
            <see langword="false" />.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckout">
            <summary>
            Checks out files from a <see href="http://www.seapine.com/surroundscm.html">Surround SCM</see>
            repository.
            </summary>
            <remarks>
            You can check out single files, multiple files, or a full repository. 
            Surround SCM creates a read-write copy of the files in the working 
            directory.
            </remarks>
            <example>
              <para>
              Check Out all files and repositories from repository 'Mainline/Widget' 
              recursively from the 'Widget 1.0' branch to the working directory setup 
              for user 'administrator'. This call forces the file retrieval from the 
              server even if the local file is current and overwrites any writable
              local files with the server copy.
              </para>
              <code>
            &lt;sscmcheckout
                serverconnect=&quot;localhost:4900&quot;
                serverlogin=&quot;administrator:&quot;
                file=&quot;/&quot;
                branch=&quot;Widget 1.0&quot;
                repository=&quot;Mainline/Widget&quot;
                recursive=&quot;true&quot;
                force=&quot;true&quot;
                comment=&quot;This is my Check Out comment&quot;
            /&gt;
              </code>
            </example>
            <example>
              <para>
              Check Out version 1 of the file 'Mainline/Widget/Widget.java' exclusively 
              from the 'Widget 1.0' branch to the working directory setup for user 
              'administrator'. Writable local files are not overwritten, even if they 
              are out of date.
              </para>
              <code>
            &lt;sscmcheckout
                serverconnect=&quot;localhost:4900&quot;
                serverlogin=&quot;administrator:&quot;
                quiet=&quot;true&quot;
                file=&quot;Widget.java&quot;
                branch=&quot;Widget 1.0&quot;
                repository=&quot;Mainline/Widget&quot;
                overwrite=&quot;false&quot;
                writable=&quot;true&quot;
                version=&quot;1&quot;
                exclusive=&quot;true&quot;
            /&gt;
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckout.WriteCommandLineArguments(System.Text.StringBuilder)">
            <summary>
            Writes the task-specific arguments to the specified 
            <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="argBuilder">The <see cref="T:System.Text.StringBuilder"/> to write the task-specific arguments to.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckout.Branch">
            <summary>
            Surround SCM branch name. The default is pulled from the local 
            working directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckout.Repository">
            <summary>
            Surround SCM repository path. The default is pulled from the local 
            working directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckout.File">
            <summary>
            File or repository name. Can be / or empty, which means the 
            repository specified by the <see cref="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckout.Repository"/> attribute
            or the default repository.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckout.Comment">
            <summary>
            Comment for the check-out.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckout.Force">
            <summary>
            Force file retrieval from server regardless of the local copy status.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckout.Quiet">
            <summary>
            Do not list repository and local full path of the Surround SCM server.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckout.Recursive">
            <summary>
            Recursively get files and sub-repositories. The default is 
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckout.Overwrite">
            <summary>
            Specifies whether to overwrite local writable files. The default is
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckout.Timestamp">
            <summary>
            Specifies how to set the local file's date/time. Possible values are
            <c>current</c>, <c>modify</c> or <c>checkin</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckout.Exclusive">
            <summary>
            Exclusively lock the files. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckout.Version">
            <summary>
            Specifies the file version to check out. Ignored if no specific 
            filename is set using the <see cref="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMCheckout.File"/> attribute.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SurroundSCM.SSCMFreeze">
            <summary>
            Freezes branches in a <see href="http://www.seapine.com/surroundscm.html">Surround SCM</see>
            repository.
            </summary>
            <remarks>
            Freezing a branch prevents any code changes being made to files in the 
            branch. When a branch is frozen, it is locked and no changes can be 
            made to it.
            </remarks>
            <example>
              <para>
              Freeze the 'Widget 1.0' branch off of the mainline 'Mainline' on the 
              server at localhost, port 4900 with username 'administrator' and a 
              blank password. 
              </para>
              <code>
            &lt;sscmfreeze
            serverconnect=&quot;localhost:4900&quot;
            serverlogin=&quot;administrator:&quot;
            mainline=&quot;Mainline&quot;
            branch=&quot;Widget 1.0&quot;
            /&gt;
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SurroundSCM.SSCMFreeze.WriteCommandLineArguments(System.Text.StringBuilder)">
            <summary>
            Writes the task-specific arguments to the specified 
            <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="argBuilder">The <see cref="T:System.Text.StringBuilder"/> to write the task-specific arguments to.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMFreeze.Branch">
            <summary>
            Surround SCM branch name.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMFreeze.Mainline">
            <summary>
            Surround SCM mainline branch name. The default is pulled from the 
            local working directory.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SurroundSCM.SSCMGet">
            <summary>
            Gets files from a <see href="http://www.seapine.com/surroundscm.html">Surround SCM</see>
            repository.
            </summary>
            <remarks>
            You can get a single file, multiple files, or a repository. A read-only 
            copy of the file is created in the specified directory.
            </remarks>
            <example>
              <para>
              Get all files and repositories from repository 'Mainline/Widget' 
              recursively from the 'Widget 1.0' branch to the working directory 
              setup for user 'administrator'. This call forces the file retrieval 
              from the server even if the local file is current and overwrites any 
              local files that are writable with the server copy.
              </para>
              <code>
            &lt;sscmget
                serverconnect=&quot;localhost:4900&quot;
                serverlogin=&quot;administrator:&quot;
                file=&quot;/&quot;
                branch=&quot;Widget 1.0&quot;
                repository=&quot;Mainline/Widget&quot;
                recursive=&quot;true&quot;
                force=&quot;true&quot;
                overwrite=&quot;true&quot;
            /&gt;
              </code>
            </example>
            <example>
              <para>
              Get version 1 of the file 'Mainline/Widget/Widget.java' from the 
              'Widget 1.0' branch to the working directory setup for user 'administrator'.
              Writable local files are not overwritten, even if they are out of date.
              </para>
              <code>
            &lt;sscmget
                serverconnect=&quot;localhost:4900&quot;
                serverlogin=&quot;administrator:&quot;
                quiet=&quot;true&quot;
                file=&quot;Widget.java&quot;
                branch=&quot;Widget 1.0&quot;
                repository=&quot;Mainline/Widget&quot;
                overwrite=&quot;false&quot;
                writable=&quot;true&quot;
                version=&quot;1&quot;
            /&gt;
              </code>
            </example>
            <example>
              <para>
              Get all files and repositories labeled with 'Release 1.0.0' (even those 
              removed from Surround) from repository 'Mainline/Widget' recursively 
              from the 'Widget 1.0' branch to the '${build}/src' directory. Writable 
              local files are overwritten with the server copy.
              </para>
              <code>
            &lt;sscmget
                serverconnect=&quot;localhost:4900&quot;
                serverlogin=&quot;administrator:&quot;
                quiet=&quot;true&quot;
                file=&quot;/&quot;
                branch=&quot;Widget 1.0&quot;
                repository=&quot;Mainline/Widget&quot;
                recursive=&quot;true&quot;
                label=&quot;Release 1.0.1&quot;
                destdir=&quot;${build}/src&quot;
                overwrite=&quot;true&quot;
            /&gt;
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SurroundSCM.SSCMGet.WriteCommandLineArguments(System.Text.StringBuilder)">
            <summary>
            Writes the task-specific arguments to the specified 
            <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="argBuilder">The <see cref="T:System.Text.StringBuilder"/> to write the task-specific arguments to.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMGet.Branch">
            <summary>
            Surround SCM branch name. The default is pulled from the local 
            working directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMGet.Repository">
            <summary>
            Surround SCM repository path. The default is pulled from the local 
            working directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMGet.File">
            <summary>
            File or repository name. Can be / or empty, which means the repository 
            specified by the <see cref="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMGet.Repository"/> attribute or the default 
            repository.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMGet.DestinationDirectory">
            <summary>
            The local directory you want to get the files to. If 
            <see cref="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMGet.File"/> is a repository, a subrepository with the same 
            name as the repository is created and files are copied to it. If 
            <see cref="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMGet.File"/> is specified as / or not set, files are copied to 
            the local directory. If not specified, files are copied to the 
            working directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMGet.Writable">
            <summary>
            Make local file editable or writable. The default is 
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMGet.Force">
            <summary>
            Force file retrieval from server regardless of the local copy status.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMGet.ByLabel">
            <summary>
            Label to search for when getting a file. If a file version is 
            specified, this parameter is ignored.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMGet.ByTimestamp">
            <summary>
            Timestamp to use when getting files. Format is yyyymmddhh:mm:ss. 
            If <see cref="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMGet.ByLabel"/> is specified, this parameter is ignored. 
            Requires Surround SCM 3.0 or later.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMGet.IncludeRemoved">
            <summary>
            Include removed files when getting files by label or timestamp. 
            The default is <see langword="true" />. Ignored if a label or 
            timestamp is not specified.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMGet.Quiet">
            <summary>
            Do not list repository and local full path of files. The default is 
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMGet.Recursive">
            <summary>
            Recursively get files and sub-repositories. The default is 
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMGet.Overwrite">
            <summary>
            Specifies whether to overwrite local writable files. The default is
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMGet.Timestamp">
            <summary>
            Specifies how to set the local file's date/time. Possible values are
            <c>current</c>, <c>modify</c> or <c>checkin</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMGet.Version">
            <summary>
            The file version to get. Ignored if a filename is not specified in 
            the <see cref="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMGet.File"/> attribute.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SurroundSCM.SSCMLabel">
            <summary>
            Creates file or repository labels for a <see href="http://www.seapine.com/surroundscm.html">Surround SCM</see>
            repository.
            </summary>
            <remarks>
            Labels provide a way to mark a specific version of a file or repository. 
            You can create labels for single files, multiple files, or all files in 
            a repository. When you create a label, a new entry is created in the history.
            The file, and the version number, do not change. Existing 'Release 1.0.1' 
            labels on a file will be moved to the tip version of the file.
            </remarks>
            <example>
              <para>
              Label all files under the 'Mainline/Widget' repository recursively in 
              the 'Widget 1.0' branch with 'Release 1.0.1' and the given comment.
              </para>
              <code>
            &lt;sscmlabel
                serverconnect=&quot;localhost:4900&quot;
                serverlogin=&quot;administrator:&quot;
                branch=&quot;Widget 1.0&quot;
                repository=&quot;Mainline/Widget&quot;
                file=&quot;readme.txt&quot;
                recursive=&quot;true&quot;
                label=&quot;Release 1.0.1&quot;
                overwritelabel=&quot;false&quot;
                comment=&quot;This labels the final build for the release of Widget 1.0.1.&quot;
            /&gt;
              </code>
            </example>
            <example>
              <para>
              Label all files under the 'Mainline/Widget' repository recursively in 
              the 'Widget 1.0' branch with 'Release 1.0.1' and no comments.
              </para>
              <code>
            &lt;sscmlabel
                serverconnect=&quot;localhost:4900&quot;
                serverlogin=&quot;administrator:&quot;
                branch=&quot;Widget 1.0&quot;
                repository=&quot;Mainline/Widget&quot;
                file=&quot;readme.txt&quot;
                recursive=&quot;true&quot;
                label=&quot;Release 1.0.1&quot;
            /&gt;
              </code>
            </example>
            <example>
              <para>
              Label version 4 of the file 'Mainline/Widget/Widget.java' in the 
              'Widget 1.0' branch with 'Release 1.0.1' and the given comment. An 
              existing 'Release 1.0.1' label on this file to be moved to version 4 
              of the file.
              </para>
              <code>
            &lt;sscmlabel
                serverconnect=&quot;localhost:4900&quot;
                serverlogin=&quot;administrator:&quot;
                branch=&quot;Widget 1.0&quot;
                repository=&quot;Mainline/Widget&quot;
                file=&quot;readme.txt&quot;
                label=&quot;Release 1.0.1&quot;
                overwritelabel=&quot; true&quot; 
                comment=&quot; This labels the final build for the release of Widget 1.0.1.&quot; 
                version=&quot; 4&quot; 
            /&gt;
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SurroundSCM.SSCMLabel.WriteCommandLineArguments(System.Text.StringBuilder)">
            <summary>
            Writes the task-specific arguments to the specified 
            <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="argBuilder">The <see cref="T:System.Text.StringBuilder"/> to write the task-specific arguments to.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMLabel.Branch">
            <summary>
            Surround SCM branch name. The default is pulled from the local 
            working directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMLabel.Repository">
            <summary>
            Surround SCM repository path. The default is pulled from the local 
            working directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMLabel.File">
            <summary>
            File or repository name. Can be / or empty, which means the 
            repository specified by the <see cref="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMLabel.Repository"/> attribute
            or the default repository.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMLabel.Label">
            <summary>
            The new label to create.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMLabel.Recursive">
            <summary>
            Recursively label all files. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMLabel.Overwrite">
            <summary>
            Overwrite the existing label. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMLabel.Comment">
            <summary>
            Comment for the label.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMLabel.Version">
            <summary>
            The file version to label. Ignored if a filename is not specified in 
            the <see cref="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMLabel.File"/> attribute.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.SurroundSCM.SSCMUnFreeze">
            <summary>
            Unlocks frozen branches for a <see href="http://www.seapine.com/surroundscm.html">Surround SCM</see>
            repository.
            </summary>
            <example>
              <para>
              Unfreeze the 'Widget 1.0' branch off of the mainline 'Mainline' on the 
              server at localhost, port 4900 with username 'administrator' and a 
              blank password.
              </para>
              <code>
            &lt;sscmunfreeze
                serverconnect=&quot;localhost:4900&quot;
                serverlogin=&quot;administrator:&quot;
                mainline=&quot;Mainline&quot;
                branch=&quot;Widget 1.0&quot;
            /&gt;
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.SurroundSCM.SSCMUnFreeze.WriteCommandLineArguments(System.Text.StringBuilder)">
            <summary>
            Writes the task-specific arguments to the specified 
            <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="argBuilder">The <see cref="T:System.Text.StringBuilder"/> to write the task-specific arguments to.</param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMUnFreeze.Branch">
            <summary>
            Surround SCM branch name.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.SurroundSCM.SSCMUnFreeze.Mainline">
            <summary>
            Surround SCM mainline branch name. The default is pulled from the local working directory.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Svn.AbstractSvnTask">
            <summary>
            A base class for creating tasks for executing CVS client commands on a 
            CVS repository.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.SVN_HOME">
            <summary>
            An environment variable that holds path information about where
            svn is located.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.ARG_PREFIX">
            <summary>
            The prefix used for command arguments.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.SVN_EXE">
            <summary>
            The name of the svn executable.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.SVN_RSH">
            <summary>
            Environment variable that holds the executable name that is used for
            ssh communication.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.SVN_PASSFILE">
            <summary>
            Name of the password file that is used to cash password settings.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Tasks.Svn.AbstractSvnTask"/> 
            class.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.PrepareProcess(System.Diagnostics.Process)">
            <summary>
            Build up the command line arguments, determine which executable is being
            used and find the path to that executable and set the working 
            directory.
            </summary>
            <param name="process">The process to prepare.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.AppendCommandOptions">
            <summary>
            Append the command line options or commen names for the options
            to the generic options collection.  This is then piped to the
            command line as a switch.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.GetSvnExePath">
            <summary>
            Gets the full path of the svn executable.
            </summary>
            <exception cref="T:NAnt.Core.BuildException">
            Exception is thrown when Subversion client 
            executable cannot be found.
            </exception>
            <returns>
            The full path of the svn executable.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.SetPropertiesDefaults">
            <summary>
            Set default values for non-requiered parameters.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.VcsExeName">
            <summary>
            The name of the executable.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.PassFileName">
            <summary>
            The name of the password file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.VcsHomeEnv">
            <summary>
            Name of the home environment variable.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.SshEnv">
            <summary>
            The name of the ssh/ rsh environment variable.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.ExeName">
            <summary>
            The full path of the svn executable.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.Root">
             <summary>
             <para>
             TODO: Add more documentation when I understand all svn root possibilities/
             protocols.
             The svn root is usually in the form of a URL from which the server, protocol
             and path information can be derived.  Although the path to the repository
             can also be determined from this the information is more implicit
             than explicit.  For example a subversion root URL of:
            
             http://svn.collab.net/repos/svn/trunk/doc/book/tools
            
             would have the following components:
                 protocol:       http/ web_dav
                 username:       anonymous
                 servername:     svn.collab.net
                 repository:     /repos/svn
                 server path:    /trunk/doc/book/tools
                 
                 In addition the revision path or branch can also be determined as
                 subversion stores this information as a seperate physical directory.
                 In this example:
                 
                 revision: trunk
             </para>
             </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.UserName">
            <summary>
            The user performing the checkout.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.Password">
            <summary>
            The pasword to use to login to svn.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.Interactive">
            <summary>
            Indicates whether the task should be interactive or not.  This is
            set to <see langword="false" /> by default, and I don't see a reason
            to expose this to the NAnt task.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.Ssh">
            <summary>
            The executable to use for ssh communication.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.CommandName">
            <summary>
            The command to execute.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.Quiet">
            <summary>
            Specifies whether to print as little information as possible.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.AbstractSvnTask.IsRootUsed">
            <summary>
            Determines if the root is used for the command based on 
            the command name.  Returns <code>true</code> if the root
            is used, otherwise returns <code>false</code>.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Svn.SvnCheckoutTask">
            <summary>
            Executes the svn checkout command.
            </summary>
            <example>
              <para>Checkout Gentle.NET.</para>
              <code>
                <![CDATA[
            <svn-update
                destination="c:/dev/src/gentle.net" 
                uri="http://www.mertner.com/svn/repos/projects/gentle" 
                recursive="true"
                verbose="false"
                username="anonymoose"
                password="Canada" 
                revision="HEAD"
                cache-auth="false"
                config-dir="c:\home"
            />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Svn.SvnCheckoutTask.#ctor">
            <summary>
            Initialize the task, and set the default parameters.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.SvnCheckoutTask.CommandName">
            <summary>
            Gets the svn command to execute.
            </summary>
            <value>
            The svn command to execute. The default value is "checkout".
            </value>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.SvnCheckoutTask.Recursive">
            <summary>
            <see langword="true" /> if the command should be executed recursively.
            The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.SvnCheckoutTask.Revision">
            <summary>
            The revision to checkout.  If no revision is specified then subversion
            will return the <code>HEAD</code>.
            </summary>
            <remarks>
            A revision argument can be one of:
                   NUMBER       revision number
                   "{" DATE "}" revision at start of the date
                   "HEAD"       latest in repository
                   "BASE"       base rev of item's working copy
                   "COMMITTED"  last commit at or before BASE
                   "PREV"       revision just before COMMITTED
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.SvnCheckoutTask.CacheAuth">
            <summary>
            <see langword="true" /> if the authentiction token should be cached
            locally.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.SvnCheckoutTask.ConfigDir">
            <summary>
            The location of the configuration directory.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Svn.SvnTask">
            <summary>
            Executes the svn command specified by the command attribute.
            </summary>
            <example>
              <para>Checkout Gentle.NET.</para>
              <code>
                <![CDATA[
            <svn command="checkout" 
                 destination="c:\dev\src\gentle.net" 
                 svnroot="http://www.mertner.com/svn/repos/projects/gentle" 
                 password="" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.SvnTask.CommandName">
            <summary>
            The svn command to execute.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Svn.SvnUpdateTask">
            <summary>
            Executes the svn update specified by the command attribute.
            </summary>
            <example>
              <para>Update Gentle.NET.</para>
              <code>
                <![CDATA[
            <svn-update
                destination="c:\dev\src\gentle.net" 
                uri="http://www.mertner.com/svn/repos/projects/gentle" 
                recursive="true"
                quiet="true"
                username="anonymoose"
                password="Canada" 
                revision="HEAD"
                cach-auth="false"
                config-dir="c:\home"
            />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Svn.SvnUpdateTask.CommandName">
            <summary>
            Gets the svn command to execute.
            </summary>
            <value>
            The svn command to execute. The default value is "update".
            </value>
        </member>
        <member name="T:NAnt.Contrib.Tasks.TypedCollectionTask">
             <summary>Generates collection classes based on a given XML specification file. Code generation is in the specified language.</summary>
            <remarks>
               <para>See the <a href="http://www.sellsbrothers.com/tools/">CollectionGen tool page</a> for more information.</para>
            </remarks>
             <example>   
               <code>
             <![CDATA[
             <typedcollection language="CSharp">
                <fileset>
                    <include name="collections.xml" />
                </fileset>
            </typedcollection>
             ]]>
               </code>
             </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.TypedCollectionTask.GenerateCollectionClasses(System.String,System.String)">
            <summary>
            The actual generation work is done here.
            </summary>
            <param name="path"></param>
            <param name="language"></param>
        </member>
        <member name="P:NAnt.Contrib.Tasks.TypedCollectionTask.Language">
            <summary>The language to generate collection classes for.  Valid values are "CSharp" or "VB".</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.TypedCollectionTask.FileName">
            <summary>The name of the template file for collection generation. This is provided as an alternate to using the task's fileset.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.TypedCollectionTask.TypedCollFileSet">
            <summary>
            All files in this fileset will be run thru the collection generator.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.ValidateXmlTask">
            <summary>
            Validates a set of XML files based on a set of XML Schemas (XSD).
            </summary>
            <example>
              <code>
                <![CDATA[
            <validatexml>
                <schemas>
                    <schema source="rcf-schema.xsd" />
                    <schema namespace="urn:schemas-company-com:base" source="base-schema.xsd" />
                </schemas>
                <files>
                    <include name="*.xml" />
                </files>
            </validatexml>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.ValidateXmlTask.ExecuteTask">
            <summary>
            This is where the work is done.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ValidateXmlTask.XmlFiles">
            <summary>
            The XML files that must be validated.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.ValidateXmlTask.Schemas">
            <summary>
            The XML Schemas (XSD) to use for validation.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Vb6Task">
            <summary>
            Compiles Microsoft Visual Basic 6 programs.
            </summary>
            <remarks>
              <para>
              Uses the VB6.EXE executable included with the Visual Basic 6
              environment.
              </para>
              <para>
              The compiler uses the settings and source files specified in the 
              project or group file.
              </para>
            </remarks>
            <example>
              <para>
              Build the project <c>HelloWorld.vbp</c> in the <c>build</c> directory.
              </para>
              <code>
                <![CDATA[
            <vb6 project="HelloWorld.vbp" outdir="build" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Check compiled property "vb6.compiled"
              </para>
              <code>
                <![CDATA[
            <echo message="Compiled sucessfully" if="${vb6.compiled}" />
            <echo message="Compilation not needed" if="${not vb6.compiled}" />
                ]]>
              </code>    
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Vb6Task.ExecuteTask">
            <summary>
            Compiles the Visual Basic project or project group.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Vb6Task.ParseGroupFile(System.IO.FileInfo)">
            <summary>
            Parses a VB group file and extract the file names of the sub-projects 
            in the group.
            </summary>
            <param name="groupFile">The file name of the group file.</param>
            <returns>
            A string collection containing the list of sub-projects in the group.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Vb6Task.ProjectNeedsCompiling(System.String)">
            <summary>
            Determines if a VB project needs to be recompiled by comparing the timestamp of 
            the project's files and references to the timestamp of the last built version.
            </summary>
            <param name="projectFile">The file name of the project file.</param>
            <returns>
            <see langword="true" /> if the project should be compiled; otherwise,
            <see langword="false" />.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Vb6Task.VB6GetTypeLibFile(System.Guid,System.UInt16,System.UInt16,System.UInt32)">
            <summary>
            VB6 uses a special algorithm to search for the typelib file. It doesn't 
            rely on the API function QueryPathOfRegTypeLib, because VB could use a newer
            version of the TLB.
            
            The algorithm used by VB is not perfect and has some flaws, which you could
            get a newer version even if your requested version is installed. This is because
            the algorithm iterates the registry beneath the Guid - entry by entry - from the 
            beginning and returns the first TLB version that is higher or equal to the 
            requested version.
            
            pseudo code:
            1. open the key HKEY_CLASSES_ROOT\TypeLib\{Guid}
            2. If the key exists:
                3. Foreach version under the key that has the requested culture entry:
                    4. If the version higher or equal to the requested version:
                        5. Get the TLB filename and returns it
            </summary>
            <param name="guid">The guid of the tlb to look for</param>
            <param name="major">The major version number of the tlb</param>
            <param name="minor16">The minor version number of the tlb. If you parse minor from a string, treat the string as hex value.</param>
            <param name="lcid">The culture id</param>
            <returns>null if couldn't find a match, otherwise it returns the file.</returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.Vb6Task.ParseProjectFile(System.String,NAnt.Core.Types.FileSet,NAnt.Core.Types.FileSet)">
            <summary>
            Parses a VB project file and extracts the source files, reference files, and 
            the name of the compiled file for the project.
            </summary>
            <param name="projectFile">The filename of the project file.</param>
            <param name="sources">
            A fileset representing the source files of the project, which will
            populated by the method.
            </param>
            <param name="references">
            A fileset representing the references of the project, which will
            populated by the method.
            </param>
            <returns>A string containing the output file name for the project.</returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Vb6Task.OutDir">
            <summary>
            Output directory for the compilation target.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Vb6Task.ProjectFile">
            <summary>
            Visual Basic project or group file.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Vb6Task.CheckReferences">
            <summary>
            Determines whether project references are checked when deciding 
            whether the project needs to be recompiled. The default is 
            <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Vb6Task.ErrorFile">
            <summary>
            The file to which the Visual Basic compiler should log errors.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Vb6Task.Conditionals">
            <summary>
            Tells Visual Basic which values to use for conditional compilation
            constants.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Vb6Task.CompiledProperty">
            <summary>
            The name of a property in which will be set to <see langword="true" /> 
            if compilation was needed and done without errors (default: "vb6.compiled")
            This can be used for touching the compilation files if
            vb6 autoincrement is set to true to avoid recompilation without any 
            other changes.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Vb6Task.ProgramFileName">
            <summary>
            Gets the filename of the external program to start.
            </summary>
            <value>
            The filename of the external program.
            </value>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Vb6Task.ProgramArguments">
            <summary>
            Gets the command-line arguments for the external program.
            </summary>
            <value>
            The command-line arguments for the external program.
            </value>
        </member>
        <member name="T:NAnt.Contrib.Tasks.VersionTask">
            <summary>
            Increments a four-part version number stored in a text file. The resulting 
            version number is written back to the file and exposed using NAnt properties.
            </summary>
            <remarks>
              <para>
              The version number format in the text file is 
              Major.Minor.Build.Revision, e.g. 1.0.5.25.
              </para>
              <list type="table">
                <item>
                  <term>Major</term>
                  <description>Set in file.</description>
                </item>
                <item>
                  <term>Minor</term>
                  <description>Set in file.</description>
                </item>
                <item>
                  <term>Build</term>
                  <description>Can be incremented by setting the <see cref="P:NAnt.Contrib.Tasks.VersionTask.BuildType"/> parameter.</description>
                </item>
                <item>
                  <term>Revision</term>
                  <description>Can be incremented by setting the <see cref="P:NAnt.Contrib.Tasks.VersionTask.RevisionType"/> parameter.</description>
                </item>
              </list>
              <para>The following NAnt properties are created:</para>
              <list type="table"> 
                <item>
                  <term><c>prefix</c>.version</term>
                  <description>The complete version number, i.e. Major.Minor.Build.Revision</description>
                </item>
                <item>
                  <term><c>prefix</c>.major</term>
                  <description>The major component of the version number.</description>
                </item>
                <item>
                  <term><c>prefix</c>.minor</term>
                  <description>The minor component of the version number.</description>
                </item>
                <item>
                  <term><c>prefix</c>.build</term>
                  <description>The build component of the version number.</description>
                </item>
                <item>
                  <term><c>prefix</c>.revision</term>
                  <description>The revision component of the version number.</description>
                </item>
              </list>
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Tasks.VersionTask.ReadVersionFromFile">
            <summary>
            Reads a version string from <see cref="P:NAnt.Contrib.Tasks.VersionTask.Path"/> and returns it as a
            <see cref="T:System.Version"/> instance.
            </summary>
            <returns>
            A <see cref="T:System.Version"/> instance representing the version string in
            <see cref="P:NAnt.Contrib.Tasks.VersionTask.Path"/>.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.VersionTask.WriteVersionToFile(System.Version)">
            <summary>
            Writes the specified version to <see cref="P:NAnt.Contrib.Tasks.VersionTask.Path"/>.
            </summary>
            <param name="version">The version to write to <see cref="P:NAnt.Contrib.Tasks.VersionTask.Path"/>.</param>
        </member>
        <member name="M:NAnt.Contrib.Tasks.VersionTask.CalculateMonthDayBuildNumber">
            <summary>
            Calculates the build number based on the number of months since the 
            start date.
            </summary>
            <returns>
            The build number based on the number of months since the start date.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.VersionTask.CalculateSecondsSinceMidnight">
            <summary>
            Calculates the number of seconds since midnight. 
            start date.
            </summary>
            <returns>
            The number of seconds since midnight.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.VersionTask.CalculateBuildNumber(System.Int32)">
            <summary>
            Calculates the build number of the version number based on 
            <see cref="P:NAnt.Contrib.Tasks.VersionTask.BuildType"/>.
            </summary>
            <returns>
            The build number.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.VersionTask.CalculateVersion">
            <summary>
            Calculates the complete version.
            </summary>
            <returns>
            The version.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Tasks.VersionTask.CalculateRevisionNumber(System.Version,System.Int32)">
            <summary>
            Calculates the revision number of the version number based on RevisionType specified
            </summary>
            <returns>
            The revision number.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Tasks.VersionTask.Prefix">
            <summary>
            The string to prefix the properties with. The default is 
            <c>'buildnumber.'</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.VersionTask.StartDate">
            <summary>
            Start of project. Date from which to calculate build number. 
            Required if <see cref="F:NAnt.Contrib.Tasks.VersionTask.BuildNumberAlgorithm.MonthDay"/> is used as 
            <see cref="P:NAnt.Contrib.Tasks.VersionTask.BuildType"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.VersionTask.Path">
            <summary>
            Path to the file containing the current version number. The default 
            file is <c>'build.number'</c> in the project base directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.VersionTask.BuildType">
            <summary>
            The algorithm for generating build number. The default is
            <see cref="F:NAnt.Contrib.Tasks.VersionTask.BuildNumberAlgorithm.MonthDay"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.VersionTask.RevisionType">
            <summary>
            The algorithm for generating revision number. The default is
            <see cref="F:NAnt.Contrib.Tasks.VersionTask.RevisionNumberAlgorithm.Automatic"/>.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.VersionTask.BuildNumberAlgorithm">
            <summary>
            Defines possible algorithms to generate the build number.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.VersionTask.BuildNumberAlgorithm.MonthDay">
            <summary>
            Use the number of months since start of project * 100 + current 
            day in month as build number.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.VersionTask.BuildNumberAlgorithm.Increment">
            <summary>
            Increment an existing build number.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.VersionTask.BuildNumberAlgorithm.NoIncrement">
            <summary>
            Use an existing build number (and do not increment it).
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.VersionTask.RevisionNumberAlgorithm">
            <summary>
            Defines possible algorithms to generate the revision number.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.VersionTask.RevisionNumberAlgorithm.Automatic">
            <summary>
            Use the number of seconds since the start of today / 10.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.VersionTask.RevisionNumberAlgorithm.Increment">
            <summary>
            Increment an existing revision number.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.WaitForExitTask">
            <summary>
            Waits for a given process on the local computer to exit.
            </summary>
            <remarks>
              <para>
              When used in combination with the <see cref="T:NAnt.Core.Tasks.ExecTask"/>, it allows
              processed to be spawned for a certain duration or task, and then 
              wait until the process is finished before continueing.
              </para>
              <para>
              When the process identified by <see cref="P:NAnt.Contrib.Tasks.WaitForExitTask.ProcessId"/> is no longer
              running, then the outcome is considered successful.
              </para>
            </remarks>
            <example>
              <para>
              Starts two batch processes, and waits for them to finish.
              </para>
              <code>
                <![CDATA[
            <exec program="batch1.exe" pidproperty="batch1.pid" spawn="true" />
            <exec program="batch2.exe" pidproperty="batch2.pid" spawn="true" />
            <waitforexit pid="${batch1.pid}" />
            <waitforexit pid="${batch2.pid}" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WaitForExitTask.ProcessId">
            <summary>
            The unique identifier of the process to wait for.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WaitForExitTask.TimeOut">
            <summary>
            The maximum amount of time to wait until the process is exited,
            expressed in milliseconds.  The default is to wait indefinitely.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Web.ApplicationPool">
            <summary>
            Allows an IIS application pool to be controlled.
            </summary>
            <example>
              <para>
              Starts the &quot;StsAdminAppPool&quot; application pool on server
              &quot;SV-ARD-WEB&quot;.
              </para>
              <code>
                <![CDATA[
            <iisapppool action="Start" pool="StsAdminPool" server="SV-ARD-WEB" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Stops and restarts the &quot;DefaultAppPool&quot; application pool
              on server &quot;SV-ARD-WEB&quot;.
              </para>
              <code>
                <![CDATA[
            <iisapppool action="Restart" pool="DefaultAppPool" server="SV-ARD-WEB" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.ApplicationPool.Server">
            <summary>
            The name of the server on which to perform the action. The default
            is the local computer.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.ApplicationPool.PoolName">
            <summary>
            The name of the application pool on which to perform the action.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.ApplicationPool.Action">
            <summary>
            The action that should be performed on the application pool.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Web.ApplicationPool.ApplicationPoolAction">
            <summary>
            Defines the actions that can be performed on an application pool.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Web.ApplicationPool.ApplicationPoolAction.Start">
            <summary>
            Starts the application pool.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Web.ApplicationPool.ApplicationPoolAction.Stop">
            <summary>
            Stops the application pool.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Web.ApplicationPool.ApplicationPoolAction.Restart">
            <summary>
            Stops and restarts the application pool.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Web.ApplicationPool.ApplicationPoolAction.Recycle">
            <summary>
            Recycles an application pool.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory">
            <summary>
            Creates or modifies a virtual directory of a web site hosted on Internet
            Information Server.
            </summary>
            <remarks>
              <para>
              If the virtual directory does not exist it is created, and if it already
              exists it is modified. Only the IIS-properties specified will be set. If set
              by other means (e.g. the Management Console), the unspecified properties retain their current value, 
              otherwise they are inherited from the parent. 
              </para>
              <para>
              For a list of optional parameters see <see href="ms-help://MS.VSCC/MS.MSDNVS/iisref/html/psdk/asp/aore8v5e.htm">IIsWebVirtualDir</see>.
              </para>
              <para>
              More information on metabase parameters is available <see href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/iissdk/iis/alphabeticmetabasepropertylist.asp">here</see>.
            </para>
            </remarks>
            <example>
              <para>
              Create a virtual directory named <c>Temp</c> pointing to <c>c:\temp</c> 
              on the local machine.
              </para>
              <code>
                <![CDATA[
            <mkiisdir dirpath="c:\temp" vdirname="Temp" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Create a virtual directory named <c>Temp</c> pointing to <c>c:\temp</c> 
              on machine <c>Staging</c>.
              </para>
              <code>
                <![CDATA[
            <mkiisdir iisserver="Staging" dirpath="c:\temp" vdirname="Temp" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Configure the home directory of for http://svc.here.dev/ to point to
              D:\Develop\Here and require authentication
              </para>
              <code>
                <![CDATA[
            <mkiisdir iisserver="svc.here.dev" dirpath="D:\Develop\Here" vdirname="/" authanonymous="false"/>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Create a virtual directory named <c>WebServices/Dev</c> pointing to 
              <c>c:\MyProject\dev</c> on the web site running on port <c>81</c> of
              machine <c>MyHost</c>.
              </para>
              <code>
                <![CDATA[
            <mkiisdir iisserver="MyHost:81" dirpath="c:\MyProject\dev" vdirname="WebServices/Dev" />
                ]]>
              </code>
              Note that if <c>WebServices</c> is neither an existing virtual directory nor an
              existing physical subdirectory of the web root, your IIS Management Console
              will get confused. Even though <c>http://MyHost:81/WebServices/Dev/theService.asmx</c>
              may be a perfectly working webservice, the Management Console will not show it.
            </example>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Web.WebBase">
            <summary>
            Base class for all IIS-related task.
            </summary>
            <remarks>
            Basically this class hold the logic to determine the IIS version as well
            as the IIS server/port determination/checking logic.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.WebBase.VirtualDirectory">
            <summary>
            Name of the IIS virtual directory.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.WebBase.Server">
            <summary>
            The IIS server, which can be specified using the format <c>[host]:[port]</c>. 
            The default is <c>localhost:80</c>.
            </summary>
            <remarks>
            <para>
            This allows for targeting a specific virtual site on a physical box.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.WebBase.Website">
            <summary>
            The website on the IIS server.  
            </summary>
            <remarks>
            <para>
            This allows for targeting a specific virtual site on a physical box.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.WebBase.Version">
            <summary>
            Gets the version of IIS corresponding with the current OS.
            </summary>
            <value>
            The version of IIS corresponding with the current OS.
            </value>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Web.WebBase.IISVersion">
            <summary>
            Defines the IIS versions supported by the IIS tasks.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AppFriendlyName">
            <summary>
            The user-friendly name of the package or application.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.DirPath">
            <summary>
            The file system path.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessExecute">
            <summary>
            Indicates whether the file or the contents of the folder may be 
            executed, regardless of file type. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessNoRemoteExecute">
            <summary>
            Indicates whether remote requests to execute applications are denied; 
            only requests from the same computer as the IIS server succeed if 
            <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessExecute"/> is set to <see langword="true"/>. You 
            cannot set <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessNoRemoteExecute"/> to <see langword="false"/>
            to enable remote requests, and set <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessExecute"/> to 
            <see langword="false"/> to disable local requests. The default is
            <see langword="false"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessNoRemoteRead">
            <summary>
            Indicates whether remote requests to view files are denied; 
            only requests from the same computer as the IIS server succeed if 
            <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessExecute"/> is set to <see langword="true"/>. You 
            cannot set <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessNoRemoteRead"/> to <see langword="false"/>
            to enable remote requests, and set <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessRead"/> to 
            <see langword="false"/> to disable local requests. The default is
            <see langword="false"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessNoRemoteScript">
            <summary>
            A value of true indicates that remote requests to view dynamic content are denied; only requests from the same computer as the IIS server succeed if the AccessScript property is set to true. You cannot set AccessNoRemoteScript to false to enable remote requests, and set AccessScript to false to disable local requests.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessNoRemoteWrite">
            <summary>
            indicates that remote requests to create or change files are denied; only requests from the same computer as the IIS server succeed if the AccessWrite property is set to true. You cannot set AccessNoRemoteWrite to false to enable remote requests, and set AccessWrite to false to disable local requests.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessRead">
            <summary>
            Indicates whether the file or the contents of the folder may be 
            read. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessSource">
            <summary>
            Indicates whether users are allowed to access source code if either 
            Read or Write permissions are set. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessScript">
            <summary>
            Indicates whether the file or the contents of the folder may be 
            executed if they are script files or static content. The default
            is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessSsl">
            <summary>
            Indicates whether file access requires SSL file permission processing, 
            with or without a client certificate. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccesssSl128">
            <summary>
            Indicates whether file access requires SSL file permission processing 
            with a minimum key size of 128 bits, with or without a client 
            certificate. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessSslMapCert">
            <summary>
            Indicates whether SSL file permission processing maps a client 
            certificate to a Microsoft Windows ® operating system user-account. 
            <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessSslNegotiateCert"/> must also be set to 
            <see langword="true"/> for the mapping to occur. The default is
            <see langword="false"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessSslNegotiateCert">
            <summary>
            Indicates whether SSL file access processing requests a certificate 
            from the client. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessSslRequireCert">
            <summary>
            Indicates whether SSL file access processing requests a certificate 
            from the client. If the client provides no certificate, the connection 
            is closed. <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessSslNegotiateCert"/> must also be set to 
            <see langword="true"/> when using <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessSslRequireCert"/>.
            The default is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AccessWrite">
            <summary>
            Indicates whether users are allowed to upload files and their 
            associated properties to the enabled directory on your server or 
            to change content in a Write-enabled file. The default is
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AnonymousPasswordSync">
            <summary>
            Indicates whether IIS should handle the user password for anonymous 
            users attempting to access resources. The default is 
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AppCreate">
            <summary>
            Specifies what type of application to create for this virtual directory. 
            The default is <see cref="F:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AppType.Pooled"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AppAllowClientDebug">
            <summary>
            Specifies whether ASP client-side debugging is enabled. The default
            is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AppAllowDebugging">
            <summary>
            Specifies whether ASP debugging is enabled on the server. The default
            is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AppPoolId">
            <summary>
            Specifies the application pool where the application is routed
            (IIS 6.0 or higher).
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspAllowSessionState">
            <summary>
            Enables session state persistence for the ASP application. The 
            default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspBufferingOn">
            <summary>
            Specifies whether output from an ASP application will be buffered. 
            If <see langword="true" />, all output from the application is 
            collected in the buffer before the buffer is flushed to the client. 
            With buffering on, the ASP application has to completely process the 
            ASP script before the client receives any output. The default is 
            <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspEnableApplicationRestart">
            <summary>
            Determines whether an ASP application can be automatically restarted. 
            When changes are made to Global.asa or metabase properties that affect 
            an application, the application will not restart unless the 
            <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspEnableApplicationRestart"/> property is set to 
            <see langword="false"/>. The default is <see langword="true"/>.
            </summary>
            <remarks>
            When this property is changed from <see langword="false"/> to 
            <see langword="true"/>, the application immediately restarts.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspEnableAspHtmlFallback">
            <summary>
            Controls the behavior of ASP when a new request is to be rejected 
            due to a full request queue. If <see langword="true" />, an .htm file 
            with a similar name as the requested .asp file, will be sent instead 
            of the .asp file. The naming convention for the .htm file is the 
            name of the .asp file with _asp appended.  The default is
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspEnableChunkedEncoding">
            <summary>
            Specifies whether HTTP 1.1 chunked transfer encoding is enabled for 
            the World Wide Web Publishing Service (WWW service). The default is
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspErrorsToNTLog">
            <summary>
            Specifies which ASP errors are written to the Windows event log. 
            </summary>
            <remarks>
              <para>
              ASP errors are written to the client browser and to the IIS log files 
              by default. <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspLogErrorRequests"/> is set to <see langword="true"/>
              by default, and is modified by <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspErrorsToNTLog"/> in 
              the following way:
              </para>
              <para>
              If <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspLogErrorRequests"/> is set to <see langword="false"/>, 
              then ASP errors are not written to the Windows event log, regardless 
              of the value of <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspErrorsToNTLog"/>.
              </para>
              <para> 
              If <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspLogErrorRequests"/> is set to <see langword="true"/>, 
              and if IIS fails to write an item to the IIS log file, the item is 
              written to the Windows event log as a warning, regardless of the 
              value of <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspErrorsToNTLog"/>. 
              </para>
              <para>
              If <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspLogErrorRequests"/> is set to <see langword="true"/>
              and <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspErrorsToNTLog"/> is set to <see langword="false"/>, 
              then only the most serious ASP errors are sent to the Windows event log. 
              Serious ASP error numbers are: 100, 101, 102, 103, 104, 105, 106, 107, 
              115, 190, 191, 192, 193, 194, 240, 241, and 242.
              </para>
              <para>
              If <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspLogErrorRequests"/> is set to <see langword="true"/>
              and <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspErrorsToNTLog"/> is set to <see langword="true"/>, 
              then all ASP errors are written to the Windows event log.
              </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspEnableParentPaths">
            <summary>
            Specifies whether an ASP page allows paths relative to the current 
            directory. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspEnableTypelibCache">
            <summary>
            Specifies whether type libraries are cached on the server. The 
            default is <see langword="true" />.
            </summary>
            <remarks>
              <para>
              The World Wide Web Publishing Service (WWW service) setting for 
              this property is applicable to all in-process and pooled out-of-process
              application nodes, at all levels.
              </para>
              <para>
              Metabase settings at the Web server level or lower are ignored
              for in-process and pooled out-of-process applications. However, 
              settings at the Web server level or lower are used if that node
              is an isolated out-of-process application.
              </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspExceptionCatchEnable">
            <summary>
            Specifies whether ASP pages trap exceptions thrown by components. 
            If set to <see langword="false" />, the Microsoft Script Debugger tool
            does not catch exceptions sent by the component that you are debugging.
            The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspLogErrorRequests">
            <summary>
            Controls whether the Web server writes ASP errors to the application 
            section of the Windows event log. The default is <see langword="true"/>.
            </summary>
            <remarks>
              <para>
              ASP errors are written to the client browser and to the IIS log files 
              by default. <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspLogErrorRequests"/> is set to <see langword="true"/>
              by default, and is modified by <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspErrorsToNTLog"/> in 
              the following way:
              </para>
              <para>
              If <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspLogErrorRequests"/> is set to <see langword="false"/>, 
              then ASP errors are not written to the Windows event log, regardless 
              of the value of <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspErrorsToNTLog"/>.
              </para>
              <para> 
              If <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspLogErrorRequests"/> is set to <see langword="true"/>, 
              and if IIS fails to write an item to the IIS log file, the item is 
              written to the Windows event log as a warning, regardless of the 
              value of <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspErrorsToNTLog"/>. 
              </para>
              <para>
              If <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspLogErrorRequests"/> is set to <see langword="true"/>
              and <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspErrorsToNTLog"/> is set to <see langword="false"/>, 
              then only the most serious ASP errors are sent to the Windows event log. 
              Serious ASP error numbers are: 100, 101, 102, 103, 104, 105, 106, 107, 
              115, 190, 191, 192, 193, 194, 240, 241, and 242.
              </para>
              <para>
              If <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspLogErrorRequests"/> is set to <see langword="true"/>
              and <see cref="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspErrorsToNTLog"/> is set to <see langword="true"/>, 
              then all ASP errors are written to the Windows event log.
              </para>
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspScriptErrorSentToBrowser">
            <summary>
            Specifies whether the Web server writes debugging specifics
            (file name, error, line number, description) to the client browser, 
            in addition to logging them to the Windows Event Log. The default
            is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspThreadGateEnabled">
            <summary>
            Indicates whether IIS thread gating is enabled (only applies to IIS 4 and 5).
            The default is <see langword="false" />.
            </summary>
            <remarks>
            IIS performs thread gating to dynamically control the number of 
            concurrently executing threads, in response to varying load conditions. 
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspTrackThreadingModel">
            <summary>
            Specifies whether IIS checks the threading model of any components 
            that your application creates. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AuthAnonymous">
            <summary>
            Specifies Anonymous authentication as one of the possible authentication
            schemes returned to clients as being available. The default is
            <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AuthBasic">
            <summary>
            Specifies Basic authentication as one of the possible authentication 
            schemes returned to clients as being available. The default is
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AuthNtlm">
            <summary>
            Specifies Integrated Windows authentication as one of the possible 
            authentication schemes returned to clients as being available. The
            default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AuthPersistSingleRequest">
            <summary>
            Specifies that authentication persists only for a single request on 
            a connection. IIS resets the authentication at the end of each request, 
            and forces re-authentication on the next request of the session.
            </summary>
            <remarks>
            [IIS 6.0] When the AuthPersistSingleRequest flag is set to true when 
            using NTLM authentication, IIS 6.0 automatically reauthenticates every 
            request, even those on the same connection.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AuthPersistSingleRequestIfProxy">
            <summary>
            Specifies authentication will persist only across single requests 
            on a connection if the connection is by proxy. Applies to IIS 5.0 
            and 5.1. The default is <see langword="false" />
            </summary>
            <remarks>
            IIS will reset the authentication at the end of the request if the current authenticated 
            request is by proxy and it is not the special case where IIS is running MSPROXY
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AuthPersistSingleRequestAlwaysIfProxy">
            <summary>
            Specifies whether authentication is valid for a single request 
            if by proxy. IIS will reset the authentication at the end of the 
            request and force re-authentication on the next request if the 
            current authenticated request is by proxy of any type. Applies to
            IIS 5.0 and 5.1. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.CacheControlNoCache">
            <summary>
            Specifies whether the HTTP 1.1 directive to prevent caching of content
            should be sent to clients. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.CacheIsapi">
            <summary>
            Indicates whether ISAPI extensions are cached in memory after first 
            use. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.ContentIndexed">
            <summary>
            Specifies whether the installed content indexer should index content 
            under this directory tree. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.CpuAppEnabled">
            <summary>
            Specifies whether process accounting and throttling should be performed 
            for ISAPI extensions and ASP applications. The default is
            <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.CpuCgiEnabled">
            <summary>
            Indicates whether IIS should perform process accounting for CGI 
            applications. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.CreateCgiWithNewConsole">
            <summary>
            Indicates whether a CGI application runs in its own console. The
            default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.CreateProcessAsUser">
            <summary>
            Specifies whether a CGI process is created in the system context 
            or in the context of the requesting user. The default is
            <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.DirBrowseShowDate">
            <summary>
            Specifies whether date information is displayed when browsing 
            directories. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.DirBrowseShowExtension">
            <summary>
            Specifies whether file extensions are displayed when browsing 
            directories. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.DirBrowseShowLongDate">
            <summary>
            Specifies whether date information is displayed in extended format 
            when displaying directories. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.DirBrowseShowSize">
            <summary>
            Specifies whether file size information is displayed when displaying 
            directories. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.DirBrowseShowTime">
            <summary>
            Specifies whether file creation time is displayed when browsing 
            directories. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.DontLog">
            <summary>
            Specifies whether client requests are written to the IIS log files.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.EnableDefaultDoc">
            <summary>
            When set to true, the default document (specified by the DefaultDoc property) for a directory is loaded when the directory is browsed.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.EnableDirBrowsing">
            <summary>
            Specifies whether directory browsing is enabled. The default is
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.EnableDocFooter">
            <summary>
            Enables or disables custom footers. The default is 
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.EnableReverseDns">
            <summary>
            Enables or disables reverse Domain Name Server (DNS) lookups for 
            the World Wide Web Publishing Service (WWW service). The default is
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.SsiExecDisable">
            <summary>
            Specifies whether server-side include (SSI) #exec directives are 
            disabled under this path. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.UncAuthenticationPassthrough">
            <summary>
            
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AspScriptErrorMessage">
            <summary>
            
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.DefaultDoc">
            <summary>
            One or more file names of default documents that will be returned to 
            the client if no file name is included in the client's request.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.UncUserName">
            <summary>
            Specifies the user name for Universal Naming Convention (UNC) virtual 
            roots.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.UncPassword">
            <summary>
            Specifies the encrypted password used to gain access to UNC 
            (Universal Naming Convention) virtual roots.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AppType">
            <summary>
            The different ways a (virtual) directory in IIS can be configured 
            as an application.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AppType.None">
            <summary>
            Virtual directory is not configured as an application.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AppType.InProcess">
            <summary>
            Virtual directory is configured as an in-process application.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AppType.Pooled">
            <summary>
            Virtual directory is configured as a pooled out-of-process 
            application. For IIS4 this is the same as <see cref="F:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AppType.OutOfProcess"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Tasks.Web.CreateVirtualDirectory.AppType.OutOfProcess">
            <summary>
            Virtual directory is configured as an out-of-process application.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Web.DeleteVirtualDirectory">
            <summary>
            Deletes a virtual directory from a given web site hosted on Internet 
            Information Server.
            </summary>
            <example>
              <para>
              Delete a virtual directory named <c>Temp</c> from the web site running
              on port <c>80</c> of the local machine. If more than one web site is
              running on port <c>80</c>, take the web site bound to the hostname 
              <c>localhost</c> if existent or bound to no hostname otherwise.
              </para>
              <code>
                <![CDATA[
            <deliisdir vdirname="Temp" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Delete a virtual directory named <c>Temp</c> from the website running 
              on port <c>81</c> of machine <c>MyHost</c>.
              </para>
              <code>
                <![CDATA[
            <deliisdir iisserver="MyHost:81" vdirname="Temp" />
                ]]>
              </code>
            </example>
        </member>
        <member name="T:NAnt.Contrib.Tasks.Web.VirtualDirectoryInfo">
            <summary>
            Lists the configuration settings of a specified virtual directory in a
            web site hosted on Internet Information Server.
            </summary>
            <example>
              <para>
              List the settings of a virtual directory named <c>Temp</c>.
              </para>
              <code>
                <![CDATA[
            <iisdirinfo vdirname="Temp" />
                ]]>
              </code>
            </example>
        </member>
        <member name="T:NAnt.Contrib.Tasks.WsdlTask">
            <summary>Generates code for web service clients and xml web services
            using ASP.NET from WSDL contract files, XSD Schemas and .discomap
            discovery documents. Can be used in conjunction with .disco files.</summary>
            <example>
              <para>Generate a proxy class for a web service.</para>
              <code><![CDATA[<wsdl path="http://www.somewhere.com/myservice.wsdl"
                language="CS" namespace="MyCompany.MyService" outfile="MyService.cs" />]]></code>
            </example>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Path">
            <summary>URL or Path to a WSDL, XSD, or .discomap document.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.NoLogo">
            <summary>Suppresses the banner.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Language">
            <summary>Language of generated code. 'CS', 'VB', 'JS',
            or the fully-qualified name of a class implementing
            System.CodeDom.Compiler.CodeDomCompiler. </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.ForServer">
            <summary>Compiles server-side ASP.NET abstract classes
            based on the web service contract. The default is to
            create client side proxy classes. </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Namespace">
            <summary>Microsoft.NET namespace of generated classes.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.OutFile">
            <summary>Output filename of the created proxy. Default name is derived from the service name.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Protocol">
            <summary>Override default protocol to implement. Choose from 'SOAP',
            'HttpGet', 'HttpPost', or a custom protocol as specified in the
            configuration file.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Username">
            <summary>Username of an account with credentials to access a
            server that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Password">
            <summary>Password of an account with credentials to access a
            server that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Domain">
            <summary>Domain of an account with credentials to access a
            server that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Proxy">
            <summary>URL of a proxy server to use for HTTP requests.
            The default is to use the system proxy setting.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.ProxyUsername">
            <summary>Username of an account with credentials to access a
            proxy that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.ProxyPassword">
            <summary>Password of an account with credentials to access a
            proxy that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.ProxyDomain">
            <summary>Domain of an account with credentials to access a
            proxy that requires authentication.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.UrlKey">
            <summary>Configuration key to use in the code generation to
            read the default value for the Url property. The default is
            not to read from the config file.</summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.BaseUrl">
            <summary>Base Url to use when calculating the Url fragment.
            The UrlKey attribute must also be specified. </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.Managed">
            <summary>
            Gets a value indiciating whether the external program is a managed
            application which should be executed using a runtime engine, if 
            configured. 
            </summary>
            <value>
            <see langword="ManagedExecutionMode.Auto" />.
            </value>
            <remarks>
            Modifying this property has no effect.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.WsdlTask.ProgramArguments">
            <summary>
            Gets the command-line arguments for the external program.
            </summary>
            <value>
            The command-line arguments for the external program.
            </value>
        </member>
        <member name="T:NAnt.Contrib.Tasks.XsdTask">
            <summary>
            The <see cref="T:NAnt.Contrib.Tasks.XsdTask"/> generates XML schema or common language runtime 
            classes from XDR, XML, and XSD files, or from classes in a runtime assembly.
            </summary>
            <remarks>
            <para>
            The following operations can be performed :
            </para>
            <list type="table">
                <listheader>
                    <term>Operation</term>
                    <description>Description</description>
                </listheader>
                <item>
                    <term>XDR to XSD</term>
                    <description>
                        Generates an XML schema from an XML-Data-Reduced schema file. 
                        XDR is an early XML-based schema format. 
                    </description>
                </item>
                <item>
                    <term>XML to XSD</term>
                    <description>
                        Generates an XML schema from an XML file.
                    </description>
                </item>
                <item>
                    <term>XSD to DataSet</term>
                    <description>
                        Generates common language runtime <see cref="T:System.Data.DataSet"/> 
                        classes from an XSD schema file. The generated classes 
                        provide a rich object model for regular XML data. 
                    </description>
                </item>
                <item>
                    <term>XSD to Classes</term>
                    <description>
                        Generates runtime classes from an XSD schema file. The 
                        generated classes can be used in conjunction with 
                        <see cref="T:System.Xml.Serialization.XmlSerializer"/> to 
                        read and write XML code that follows the schema. 
                    </description>
                </item>
                <item>
                    <term>Classes to XSD</term>
                    <description>
                        Generates an XML schema from a type or types in a runtime 
                        assembly file. The generated schema defines the XML format 
                        used by <see cref="T:System.Xml.Serialization.XmlSerializer"/>. 
                    </description>
                </item>
            </list>
            </remarks>
            <example>
              <para>Compile a XML Schema.</para>
              <code>
                <![CDATA[
            <xsd 
                schema="MySchema.xsd" 
                element="MyRootElement" 
                language="CS" 
                namespace="MyCompany.MySchema" 
                outputdir="build\bin"
                uri="http://MySchema'sTargetNamespace" />
                ]]>
              </code>
            </example>
            <example>
              <para>Generate an XML Schema from an assembly.</para>
              <code>
                <![CDATA[
            <xsd assembly="MyAssembly.dll" outputdir="build\Schemas" />
                ]]>
              </code>
            </example>
            <example>
              <para>Generate an XML Schema from an XML document.</para>
              <code>
                <![CDATA[
            <xsd xmldoc="MyDoc.xml" outputdir="build\Schemas" />
                ]]>
              </code>
            </example>
            <example>
              <para>Generate an XML Schema from an XDR Schema.</para>
              <code>
                <![CDATA[
            <xsd xdr="MyOldSchema.xdr" outputdir="build\Schemas" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Contrib.Tasks.XsdTask.Initialize">
            <summary>
            Validates the <see cref="T:NAnt.Core.Task"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Schema">
            <summary>
            XML Schema (.xsd) filename.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Target">
            <summary>
            Target of XML Schema compilation - either <c>classes</c> or 
            <c>dataset</c>. The default is <c>classes</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Element">
            <summary>
            XML element in the Schema to process.
            </summary>
            <remarks>
            TO-DO : turn this into collection of elements !
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Language">
            <summary>
            The language to use for the generated code - either <c>CS</c>, 
            <c>VB</c>, <c>JS</c>, <c>VJC</c> or the fully-qualified name of a 
            class implementing <see cref="T:System.CodeDom.Compiler.CodeDomProvider"/>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Namespace">
            <summary>
            Specifies the runtime namespace for the generated types. The default 
            namespace is <c>Schemas</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.OutputDir">
            <summary>
            The output directory in which to place generated files.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Assembly">
            <summary>
            Assembly (.dll or .exe) to generate an XML Schema for.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Types">
            <summary>
            Types in the assembly for which an XML schema is being created.
            By default all types in the assembly will be included.
            </summary>
            <remarks>
            TO-DO : turn this into collection of types !
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Uri">
            <summary>
            Specifies the URI for the elements in the <see cref="P:NAnt.Contrib.Tasks.XsdTask.Schema"/> to 
            generate code for. 
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.XmlDoc">
            <summary>
            XML document to generate an XML Schema for.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Xdr">
            <summary>
            XDR Schema to generate an XML Schema for.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.Managed">
            <summary>
            Gets a value indiciating whether the external program is a managed
            application which should be executed using a runtime engine, if 
            configured. 
            </summary>
            <value>
            <see langword="ManagedExecutionMode.Auto" />.
            </value>
            <remarks>
            Modifying this property has no effect.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Tasks.XsdTask.ProgramArguments">
            <summary>
            Gets the command-line arguments for the external program.
            </summary>
            <value>
            The command-line arguments for the external program.
            </value>
        </member>
        <member name="T:NAnt.Contrib.Types.Assembly">
            <summary>
            Represents a single assembly in an <see cref="T:NAnt.Contrib.Types.AssemblySet"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.Assembly._culture">
            <summary>
            See <see cref="P:NAnt.Contrib.Types.Assembly.Culture"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.Assembly._if">
            <summary>
            See <see cref="P:NAnt.Contrib.Types.Assembly.If"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.Assembly._name">
            <summary>
            See <see cref="P:NAnt.Contrib.Types.Assembly.Name"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.Assembly._publicKeyToken">
            <summary>
            See <see cref="P:NAnt.Contrib.Types.Assembly.PublicKeyToken"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.Assembly._unless">
            <summary>
            See <see cref="P:NAnt.Contrib.Types.Assembly.Unless"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.Assembly._version">
            <summary>
            See <see cref="P:NAnt.Contrib.Types.Assembly.Version"/>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.Assembly.#ctor">
            <summary>
            Constructs and initializes an instance of <c>Assembly</c>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.Assembly.ToString">
            <summary>
            Converts this <c>Assembly</c> object into it's <c>string</c> representation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NAnt.Contrib.Types.Assembly.Culture">
            <summary>
            The culture for the assembly.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.Assembly.If">
            <summary>
            If <c>true</c> then the assembly will be included. The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.Assembly.Name">
            <summary>
            The name of the assembly.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.Assembly.PublicKeyToken">
            <summary>
            The public key token of the assembly.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.Assembly.Unless">
            <summary>
            Opposite of <see cref="P:NAnt.Contrib.Types.Assembly.If"/>. If <c>false</c> then the assembly will be included. The default is
            <c>false</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.Assembly.Version">
            <summary>
            The version of the assembly.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Types.AssemblySet">
            <summary>
            Represents a set of assemblies via their identity information.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.AssemblySet._assemblyCollection">
            <see cref="P:NAnt.Contrib.Types.AssemblySet.AssemblyCollection"/>
        </member>
        <member name="M:NAnt.Contrib.Types.AssemblySet.#ctor">
            <summary>
            Constructs and initializes an instance of <c>AssemblySet</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.AssemblySet.AssemblyCollection">
            <summary>
            Gets the collection of assemblies added to this assembly set.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.AssemblySet.Assemblies">
            <summary>
            The assemblies to include.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Types.BizTalk.ServiceStatus">
            <summary>
            Indicates the status of a service.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.BizTalk.ServiceStatus.Unbound">
            <summary>
            The service is unbound.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.BizTalk.ServiceStatus.Bound">
            <summary>
            The service is bound.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.BizTalk.ServiceStatus.Stopped">
            <summary>
            The service is enlisted, but not started.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.BizTalk.ServiceStatus.Started">
            <summary>
            The service is started.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Types.ClearCase.TypeKindConverter">
            <summary>
            Specialized <see cref="T:System.ComponentModel.EnumConverter"/> that supports converting
            a <see cref="T:NAnt.Contrib.Types.ClearCase.TypeKind"/> to a string value that can be used in
            ClearCase commandline tools.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.ClearCase.TypeKindConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.ClearCase.TypeKindConverter"/>
            class.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.ClearCase.TypeKindConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Introduces specialized behavior for converting a <see cref="T:NAnt.Contrib.Types.ClearCase.TypeKind"/>
            value to a string that can be used in ClearCase commandline tools.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object. If a <see langword="null"/> is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> which <paramref name="value"/> should be converted to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Types.CodeStatsCount.FileSet">
            <summary>
            The set of files to work on.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.CodeStatsCount.Label">
            <summary>
            The label to apply to the results.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Types.CodeStatsCountCollection">
            <summary>
            Contains a collection of <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> elements.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.CodeStatsCountCollection"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.#ctor(NAnt.Contrib.Types.CodeStatsCountCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.CodeStatsCountCollection"/> class
            with the specified <see cref="T:NAnt.Contrib.Types.CodeStatsCountCollection"/> instance.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.#ctor(NAnt.Contrib.Types.CodeStatsCount[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.CodeStatsCountCollection"/> class
            with the specified array of <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> instances.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.Add(NAnt.Contrib.Types.CodeStatsCount)">
            <summary>
            Adds a <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> to be added to the end of the collection.</param> 
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.AddRange(NAnt.Contrib.Types.CodeStatsCount[])">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> array to the end of the collection.
            </summary>
            <param name="items">The array of <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> elements to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.AddRange(NAnt.Contrib.Types.CodeStatsCountCollection)">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Contrib.Types.CodeStatsCountCollection"/> to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:NAnt.Contrib.Types.CodeStatsCountCollection"/> to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.Contains(NAnt.Contrib.Types.CodeStatsCount)">
            <summary>
            Determines whether a <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> is in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.Contains(System.String)">
            <summary>
            Determines whether a <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> with the specified
            value is in the collection.
            </summary>
            <param name="value">The argument value to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if a <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> with 
            value <paramref name="value"/> is found in the collection; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.CopyTo(NAnt.Contrib.Types.CodeStatsCount[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.        
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param> 
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.IndexOf(NAnt.Contrib.Types.CodeStatsCount)">
            <summary>
            Retrieves the index of a specified <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> object in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> object for which the index is returned.</param> 
            <returns>
            The index of the specified <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/>. If the <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> is not currently a member of the collection, it returns -1.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.Insert(System.Int32,NAnt.Contrib.Types.CodeStatsCount)">
            <summary>
            Inserts a <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> to insert.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:NAnt.Contrib.Types.CodeStatsCountEnumerator"/> for the entire collection.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountCollection.Remove(NAnt.Contrib.Types.CodeStatsCount)">
            <summary>
            Removes a member from the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> to remove from the collection.</param>
        </member>
        <member name="P:NAnt.Contrib.Types.CodeStatsCountCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:NAnt.Contrib.Types.CodeStatsCountCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> with the specified name.
            </summary>
            <param name="value">The name of the <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> to get.</param>
        </member>
        <member name="T:NAnt.Contrib.Types.CodeStatsCountEnumerator">
            <summary>
            Enumerates the <see cref="T:NAnt.Contrib.Types.CodeStatsCount"/> elements of a <see cref="T:NAnt.Contrib.Types.CodeStatsCountCollection"/>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountEnumerator.#ctor(NAnt.Contrib.Types.CodeStatsCountCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.CodeStatsCountEnumerator"/> class
            with the specified <see cref="T:NAnt.Contrib.Types.CodeStatsCountCollection"/>.
            </summary>
            <param name="arguments">The collection that should be enumerated.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true" /> if the enumerator was successfully advanced 
            to the next element; <see langword="false" /> if the enumerator has 
            passed the end of the collection.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.CodeStatsCountEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the 
            first element in the collection.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.CodeStatsCountEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="T:NAnt.Contrib.Types.Filter">
            <summary>
            Individual filter component of <see cref="T:NAnt.Contrib.Types.FilterSet"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.Filter._token">
            <summary>
            Holds the token which will be replaced in the filter operation.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.Filter._value">
            <summary>
            Holsd the value which will replace the token in the filtering operation.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.Filter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.Filter"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.Filter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.Filter"/> class with
            the given token and value.
            </summary>
            <param name="token">The token which will be replaced when filtering.</param>
            <param name="value">The value which will replace the token when filtering.</param>
        </member>
        <member name="P:NAnt.Contrib.Types.Filter.Token">
            <summary>
            The token which will be replaced when filtering.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.Filter.Value">
            <summary>
            The value which will replace the token when filtering.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Types.FilterCollection">
            <summary>
            Contains a collection of <see cref="T:NAnt.Contrib.Types.Filter"/> elements.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.FilterCollection"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.#ctor(NAnt.Contrib.Types.FilterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.FilterCollection"/> class
            with the specified <see cref="T:NAnt.Contrib.Types.FilterCollection"/> instance.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.#ctor(NAnt.Contrib.Types.Filter[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.FilterCollection"/> class
            with the specified array of <see cref="T:NAnt.Contrib.Types.Filter"/> instances.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.Add(NAnt.Contrib.Types.Filter)">
            <summary>
            Adds a <see cref="T:NAnt.Contrib.Types.Filter"/> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.Filter"/> to be added to the end of the collection.</param> 
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.AddRange(NAnt.Contrib.Types.Filter[])">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Contrib.Types.Filter"/> array to the end of the collection.
            </summary>
            <param name="items">The array of <see cref="T:NAnt.Contrib.Types.Filter"/> elements to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.AddRange(NAnt.Contrib.Types.FilterCollection)">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Contrib.Types.FilterCollection"/> to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:NAnt.Contrib.Types.FilterCollection"/> to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.Contains(NAnt.Contrib.Types.Filter)">
            <summary>
            Determines whether a <see cref="T:NAnt.Contrib.Types.Filter"/> is in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.Filter"/> to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.Contains(System.String)">
            <summary>
            Determines whether a <see cref="T:NAnt.Contrib.Types.Filter"/> with the specified
            token is in the collection.
            </summary>
            <param name="token">The token to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if a <see cref="T:NAnt.Contrib.Types.Filter"/> with the given 
            token is found in the collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.CopyTo(NAnt.Contrib.Types.Filter[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.        
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param> 
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.IndexOf(NAnt.Contrib.Types.Filter)">
            <summary>
            Retrieves the index of a specified <see cref="T:NAnt.Contrib.Types.Filter"/> object in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.Filter"/> object for which the index is returned.</param> 
            <returns>
            The index of the specified <see cref="T:NAnt.Contrib.Types.Filter"/>. If the <see cref="T:NAnt.Contrib.Types.Filter"/> is not currently a member of the collection, it returns -1.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.Insert(System.Int32,NAnt.Contrib.Types.Filter)">
            <summary>
            Inserts a <see cref="T:NAnt.Contrib.Types.Filter"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.Filter"/> to insert.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:NAnt.Contrib.Types.FilterEnumerator"/> for the entire collection.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterCollection.Remove(NAnt.Contrib.Types.Filter)">
            <summary>
            Removes a member from the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.Filter"/> to remove from the collection.</param>
        </member>
        <member name="P:NAnt.Contrib.Types.FilterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:NAnt.Contrib.Types.FilterCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NAnt.Contrib.Types.Filter"/> with the specified token.
            </summary>
            <param name="token">The token to get.</param>
        </member>
        <member name="T:NAnt.Contrib.Types.FilterEnumerator">
            <summary>
            Enumerates the <see cref="T:NAnt.Contrib.Types.Filter"/> elements of a <see cref="T:NAnt.Contrib.Types.FilterCollection"/>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterEnumerator.#ctor(NAnt.Contrib.Types.FilterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.FilterEnumerator"/> class
            with the specified <see cref="T:NAnt.Contrib.Types.FilterCollection"/>.
            </summary>
            <param name="arguments">The collection that should be enumerated.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true" /> if the enumerator was successfully advanced 
            to the next element; <see langword="false" /> if the enumerator has 
            passed the end of the collection.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the 
            first element in the collection.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.FilterEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="T:NAnt.Contrib.Types.FilterSet">
            <summary>
            A set of filters to be applied to something.
            </summary>
            <remarks>
            <para>
            A filter set may have begintoken and endtokens defined.
            </para>
            </remarks>
        </member>
        <member name="F:NAnt.Contrib.Types.FilterSet.DefaultTokenStart">
            <summary>
            The default token start string.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.FilterSet.DefaultTokenEnd">
            <summary>
            The default token end string.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.FilterSet"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSet.ReplaceTokens(System.String)">
            <summary>
            Does replacement on the given string with token matching.
            </summary>
            <param name="line">The line to process the tokens in.</param>
            <returns>
            The line with the tokens replaced.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Types.FilterSet.BeginToken">
            <summary>
            The string used to identity the beginning of a token. The default is
            <c>@</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.FilterSet.EndToken">
            <summary>
            The string used to identify the end of a token. The default is
            <c>@</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.FilterSet.Filters">
            <summary>
            The filters to apply.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Types.FilterSetCollection">
            <summary>
            Contains a collection of <see cref="T:NAnt.Contrib.Types.FilterSet"/> elements.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.FilterSetCollection"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.#ctor(NAnt.Contrib.Types.FilterSetCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.FilterSetCollection"/> class
            with the specified <see cref="T:NAnt.Contrib.Types.FilterSetCollection"/> instance.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.#ctor(NAnt.Contrib.Types.FilterSet[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.FilterSetCollection"/> class
            with the specified array of <see cref="T:NAnt.Contrib.Types.FilterSet"/> instances.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.Add(NAnt.Contrib.Types.FilterSet)">
            <summary>
            Adds a <see cref="T:NAnt.Contrib.Types.FilterSet"/> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.FilterSet"/> to be added to the end of the collection.</param> 
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.AddRange(NAnt.Contrib.Types.FilterSet[])">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Contrib.Types.FilterSet"/> array to the end of the collection.
            </summary>
            <param name="items">The array of <see cref="T:NAnt.Contrib.Types.FilterSet"/> elements to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.AddRange(NAnt.Contrib.Types.FilterSetCollection)">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Contrib.Types.FilterSetCollection"/> to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:NAnt.Contrib.Types.FilterSetCollection"/> to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.Contains(NAnt.Contrib.Types.FilterSet)">
            <summary>
            Determines whether a <see cref="T:NAnt.Contrib.Types.FilterSet"/> is in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.FilterSet"/> to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.CopyTo(NAnt.Contrib.Types.FilterSet[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.        
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param> 
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.IndexOf(NAnt.Contrib.Types.FilterSet)">
            <summary>
            Retrieves the index of a specified <see cref="T:NAnt.Contrib.Types.FilterSet"/> object in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.FilterSet"/> object for which the index is returned.</param> 
            <returns>
            The index of the specified <see cref="T:NAnt.Contrib.Types.FilterSet"/>. If the <see cref="T:NAnt.Contrib.Types.FilterSet"/> is not currently a member of the collection, it returns -1.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.Insert(System.Int32,NAnt.Contrib.Types.FilterSet)">
            <summary>
            Inserts a <see cref="T:NAnt.Contrib.Types.FilterSet"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.FilterSet"/> to insert.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:NAnt.Contrib.Types.FilterSetEnumerator"/> for the entire collection.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.Remove(NAnt.Contrib.Types.FilterSet)">
            <summary>
            Removes a member from the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.FilterSet"/> to remove from the collection.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.ReplaceTokens(System.String)">
            <summary>
            Does replacement on the given string with token matching.
            </summary>
            <param name="line">The line to process the tokens in.</param>
            <returns>
            The line with the tokens replaced.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetCollection.HasFilters">
            <summary>
            Checks to see if there are filters in the collection of filtersets.
            </summary>
            <returns>
            <see langword="true" /> if there are filters in this collection of
            filtersets; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="P:NAnt.Contrib.Types.FilterSetCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="T:NAnt.Contrib.Types.FilterSetEnumerator">
            <summary>
            Enumerates the <see cref="T:NAnt.Contrib.Types.FilterSet"/> elements of a <see cref="T:NAnt.Contrib.Types.FilterSetCollection"/>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetEnumerator.#ctor(NAnt.Contrib.Types.FilterSetCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.FilterSetEnumerator"/> class
            with the specified <see cref="T:NAnt.Contrib.Types.FilterSetCollection"/>.
            </summary>
            <param name="arguments">The collection that should be enumerated.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true" /> if the enumerator was successfully advanced 
            to the next element; <see langword="false" /> if the enumerator has 
            passed the end of the collection.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.FilterSetEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the 
            first element in the collection.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.FilterSetEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="T:NAnt.Contrib.Types.GacReference">
            <summary>
            Used to specify reference information when working with the GAC.
            </summary>
            <remarks>
            <para>
            The full details of GAC references can be found in the SDK documentation.
            </para>
            </remarks>
        </member>
        <member name="F:NAnt.Contrib.Types.GacReference._if">
            <summary>
            See <see cref="P:NAnt.Contrib.Types.GacReference.If"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.GacReference._unless">
            <summary>
            See <see cref="P:NAnt.Contrib.Types.GacReference.Unless"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.GacReference._schemeType">
            <summary>
            See <see cref="P:NAnt.Contrib.Types.GacReference.SchemeType"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.GacReference._schemeId">
            <summary>
            See <see cref="P:NAnt.Contrib.Types.GacReference.SchemeId"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.GacReference._schemeDescription">
            <summary>
            See <see cref="P:NAnt.Contrib.Types.GacReference.SchemeDescription"/>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.GacReference.#ctor">
            <summary>
            Constructs and initializes an instance of <c>GacReference</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.GacReference.If">
            <summary>
            If <c>true</c> then the entity will be included. The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.GacReference.SchemeType">
            <summary>
            The scheme type to use when working with GAC references. The default 
            is <see cref="F:SchemeType.None" />, which means that references will 
            not be used by the GAC task.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.GacReference.SchemeId">
            <summary>
            The scheme ID to use when working with GAC references. This is only 
            relevant if a scheme type other than <see cref="F:SchemeType.None" />
            is specified.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.GacReference.SchemeDescription">
            <summary>
            The scheme description to use when working with GAC references. This 
            is only relevant if a scheme type other than <see cref="F:SchemeType.None" />
            is specified.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.GacReference.Unless">
            <summary>
            Opposite of <see cref="P:NAnt.Contrib.Types.GacReference.If"/>. If <c>false</c> then the entity will be included. The default is
            <c>false</c>.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Types.NUnit2Report.ReportFormat">
            <summary>
            Defines the report types supported by <see cref="T:NAnt.Contrib.Tasks.NUnit2Report.NUnit2ReportTask"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.NUnit2Report.ReportFormat.Frames">
            <summary>
            Report with separate HTML frames.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.NUnit2Report.ReportFormat.NoFrames">
            <summary>
            Frameless report.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Types.PVCS.Entity">
            <summary>
            Represents an entity in an <see cref="T:NAnt.Contrib.Types.PVCS.EntitySet"/>.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Types.PVCS.Entity._name">
            <see cref="P:NAnt.Contrib.Types.PVCS.Entity.Name"/>
        </member>
        <member name="F:NAnt.Contrib.Types.PVCS.Entity._if">
            <see cref="P:NAnt.Contrib.Types.PVCS.Entity.If"/>
        </member>
        <member name="F:NAnt.Contrib.Types.PVCS.Entity._unless">
            <see cref="P:NAnt.Contrib.Types.PVCS.Entity.Unless"/>
        </member>
        <member name="M:NAnt.Contrib.Types.PVCS.Entity.#ctor">
            <summary>
            Constructs and initializes an instance of <c>Entity</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.PVCS.Entity.Name">
            <summary>
            The path for the entity.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.PVCS.Entity.If">
            <summary>
            If <c>true</c> then the entity will be included. The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.PVCS.Entity.Unless">
            <summary>
            Opposite of <see cref="P:NAnt.Contrib.Types.PVCS.Entity.If"/>. If <c>false</c> then the entity will be included. The default is
            <c>false</c>.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Types.PVCS.EntitySet">
            <summary>
            Represents a set of entities to include in a PVCS project database task.
            </summary>
            <seealso cref="T:NAnt.Contrib.Tasks.PVCS.PVCSMultipleEntityTask"/>
        </member>
        <member name="F:NAnt.Contrib.Types.PVCS.EntitySet._entityPaths">
            <see cref="P:NAnt.Contrib.Types.PVCS.EntitySet.EntityPaths"/>
        </member>
        <member name="M:NAnt.Contrib.Types.PVCS.EntitySet.#ctor">
            <summary>
            Constructs and initializes an instance of <c>EntitySet</c>.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.PVCS.EntitySet.EntityPaths">
            <summary>
            Gets the collection of entity paths assigned to this entity set.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.PVCS.EntitySet.Entities">
            <summary>
            The entities to include in the project task.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Types.SchemaElement">
            <summary>
            Represents the an element based on a schema definition.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Types.XmlSchemaReference">
            <summary>
            Represents the schema collection element.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.XmlSchemaReference.Namespace">
            <summary>
            Namespace URI associated with this schema. 
            If not present, it is assumed that the 
            schema's targetNamespace value is to be used.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.XmlSchemaReference.Source">
            <summary>
            Location of this schema. Could be a 
            local file path or an HTTP URL.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection">
            <summary>
            Contains a collection of <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> elements.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.#ctor(NAnt.Contrib.Types.XmlSchemaReferenceCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection"/> class
            with the specified <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection"/> instance.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.#ctor(NAnt.Contrib.Types.XmlSchemaReference[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection"/> class
            with the specified array of <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> instances.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.Add(NAnt.Contrib.Types.XmlSchemaReference)">
            <summary>
            Adds a <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> to be added to the end of the collection.</param> 
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.AddRange(NAnt.Contrib.Types.XmlSchemaReference[])">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> array to the end of the collection.
            </summary>
            <param name="items">The array of <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> elements to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.AddRange(NAnt.Contrib.Types.XmlSchemaReferenceCollection)">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection"/> to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection"/> to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.Contains(NAnt.Contrib.Types.XmlSchemaReference)">
            <summary>
            Determines whether a <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> is in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.Contains(System.String)">
            <summary>
            Determines whether a <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> with the specified
            value is in the collection.
            </summary>
            <param name="value">The argument value to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if a <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> with 
            value <paramref name="value"/> is found in the collection; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.CopyTo(NAnt.Contrib.Types.XmlSchemaReference[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.        
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param> 
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.IndexOf(NAnt.Contrib.Types.XmlSchemaReference)">
            <summary>
            Retrieves the index of a specified <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> object in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> object for which the index is returned.</param> 
            <returns>
            The index of the specified <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/>. If the <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> is not currently a member of the collection, it returns -1.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.Insert(System.Int32,NAnt.Contrib.Types.XmlSchemaReference)">
            <summary>
            Inserts a <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> to insert.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceEnumerator"/> for the entire collection.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceCollection.Remove(NAnt.Contrib.Types.XmlSchemaReference)">
            <summary>
            Removes a member from the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> to remove from the collection.</param>
        </member>
        <member name="P:NAnt.Contrib.Types.XmlSchemaReferenceCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:NAnt.Contrib.Types.XmlSchemaReferenceCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> with the specified name.
            </summary>
            <param name="value">The name of the <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> to get.</param>
        </member>
        <member name="T:NAnt.Contrib.Types.XmlSchemaReferenceEnumerator">
            <summary>
            Enumerates the <see cref="T:NAnt.Contrib.Types.XmlSchemaReference"/> elements of a <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection"/>.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceEnumerator.#ctor(NAnt.Contrib.Types.XmlSchemaReferenceCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceEnumerator"/> class
            with the specified <see cref="T:NAnt.Contrib.Types.XmlSchemaReferenceCollection"/>.
            </summary>
            <param name="arguments">The collection that should be enumerated.</param>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true" /> if the enumerator was successfully advanced 
            to the next element; <see langword="false" /> if the enumerator has 
            passed the end of the collection.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Types.XmlSchemaReferenceEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the 
            first element in the collection.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Types.XmlSchemaReferenceEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="T:NAnt.Contrib.Util.ChecksumHelper">
            <summary>
            Helper class to calculate checksums
            of files.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.ChecksumHelper.#ctor(System.String)">
            <summary>
            Create a new instance
            </summary>
            <param name="providerName">Name of hash algorithm to use</param>
            <exception cref="T:System.ArgumentException">The specified hash algorithm does not exist.</exception>
        </member>
        <member name="M:NAnt.Contrib.Util.ChecksumHelper.CalculateChecksum(System.String)">
            <summary>
            Calculates a checksum for a given file
            and returns it in a hex string
            </summary>
            <param name="filename">name of the input file</param>
            <returns>hex checksum string</returns>
        </member>
        <member name="M:NAnt.Contrib.Util.ChecksumHelper.ChecksumToString(System.Byte[])">
            <summary>
            Converts a checksum value (a byte array)
            into a Hex-formatted string.
            </summary>
            <param name="checksum">Checksum value to convert</param>
            <returns>Hexified string value</returns>
        </member>
        <member name="T:NAnt.Contrib.Util.IRecorder">
            <summary>
            Recorder interface user with the Record task
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.IRecorder.Start">
            <summary>
            Starts recording.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.IRecorder.Stop">
            <summary>
            Stops recording.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.IRecorder.Close">
            <summary>
            Closes the recorder.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.IRecorder.Flush">
            <summary>
            Flushes the recorder.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Util.IRecorder.Name">
            <summary>
            Gets the name of this recorder (possibly a file name).
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Util.IRecorder.Logger">
            <summary>
            Gets The underlying <see cref="T:NAnt.Core.IBuildLogger"/> instance.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Util.IRecorder.AutoFlush">
            <summary>
            Defines whether the underlying writer is automatically flushes or 
            not.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Util.RecorderCollection">
            <summary>
            Keeps track of used recorders
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Util.FileLogListener"/>
            class.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.Flush">
            <summary>
            Flushes buffered build events or messages to the underlying storage.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.BuildStarted(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a build has started.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event is fired before any targets have started.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.BuildFinished(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that the last target has finished.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event will still be fired if an error occurred during the build.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.TargetStarted(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a target has started.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.TargetFinished(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a task has finished.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event will still be fired if an error occurred during the build.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.TaskStarted(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a task has started.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.TaskFinished(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a task has finished.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event will still be fired if an error occurred during the build.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.MessageLogged(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a message has been logged.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            Only messages with a priority higher or equal to the threshold of
            the logger will actually be output in the build log.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.Log(System.String)">
            <summary>
            Empty implementation which allows derived classes to receive the
            output that is generated in this logger.
            </summary>
            <param name="message">The message being logged.</param>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.OutputMessage(NAnt.Core.Level,System.String,System.Int32)">
            <summary>
            Outputs an indented message to the build log if its priority is 
            greather than or equal to the <see cref="P:NAnt.Contrib.Util.FileLogListener.Threshold"/> of the 
            logger.
            </summary>
            <param name="messageLevel">The priority of the message to output.</param>
            <param name="message">The message to output.</param>
            <param name="indentationLength">The number of characters that the message should be indented.</param>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.OutputMessage(NAnt.Core.BuildEventArgs)">
            <summary>
            Outputs an indented message to the build log if its priority is 
            greather than or equal to the <see cref="P:NAnt.Contrib.Util.FileLogListener.Threshold"/> of the 
            logger.
            </summary>
            <param name="e">The event to output.</param>
        </member>
        <member name="M:NAnt.Contrib.Util.FileLogListener.OutputMessage(NAnt.Core.BuildEventArgs,System.Int32)">
            <summary>
            Outputs an indented message to the build log if its priority is 
            greather than or equal to the <see cref="P:NAnt.Contrib.Util.FileLogListener.Threshold"/> of the 
            logger.
            </summary>
            <param name="e">The event to output.</param>
            <param name="indentationLength">TODO</param>
        </member>
        <member name="P:NAnt.Contrib.Util.FileLogListener.Threshold">
            <summary>
            Gets or sets the highest level of message this logger should respond
            to.
            </summary>
            <value>
            The highest level of message this logger should respond to.
            </value>
            <remarks>
            Only messages with a message level higher than or equal to the given
            level should be written to the log.
            </remarks>
        </member>
        <member name="P:NAnt.Contrib.Util.FileLogListener.EmacsMode">
            <summary>
            Gets or sets a value indicating whether to produce emacs (and other
            editor) friendly output.
            </summary>
            <value>
            <see langword="true" /> if output is to be unadorned so that emacs 
            and other editors can parse files names, etc. The default is
            <see langword="false" />.
            </value>
        </member>
        <member name="P:NAnt.Contrib.Util.FileLogListener.OutputWriter">
            <summary>
            Gets or sets the <see cref="T:System.IO.TextWriter"/> to which the logger is
            to send its output.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Util.FileUtils">
            <summary>
            Groups a set of useful file manipulation methods.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.FileUtils.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Contrib.Util.FileUtils"/> class.
            </summary>
            <remarks>
            Prevents instantiation of the <see cref="T:NAnt.Contrib.Util.FileUtils"/> class.
            </remarks>
        </member>
        <member name="M:NAnt.Contrib.Util.FileUtils.CopyFile(System.String,System.String,System.Text.Encoding,NAnt.Contrib.Types.FilterSetCollection)">
            <summary>
            Copies a file while replacing the tokens identified by the given
            <see cref="T:NAnt.Contrib.Types.FilterSetCollection"/>.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">The name of the destination file.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> used when filter-copying the file.</param>
            <param name="filtersets">The collection of filtersets that should be applied to the file.</param>
        </member>
        <member name="M:NAnt.Contrib.Util.FileUtils.MoveFile(System.String,System.String,System.Text.Encoding,NAnt.Contrib.Types.FilterSetCollection)">
            <summary>
            Moves a file while replacing the tokens identified by the given
            <see cref="T:NAnt.Contrib.Types.FilterSetCollection"/>.
            </summary>
            <param name="sourceFileName">The file to move.</param>
            <param name="destinationFileName">The name of the destination file.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> used when filter-copying the file.</param>
            <param name="filtersets">The collection of filtersets that should be applied to the file.</param>
        </member>
        <member name="M:NAnt.Contrib.Util.FileUtils.GetRelativePath(System.String,System.String)">
            <summary>
            Given an absolute directory and an absolute file name, returns a 
            relative file name.
            </summary>
            <param name="basePath">An absolute directory.</param>
            <param name="absolutePath">An absolute file name.</param>
            <returns>
            A relative file name for the given absolute file name.
            </returns>
        </member>
        <member name="M:NAnt.Contrib.Util.IniFile.GetString(System.String,System.String,System.String)">
            <summary>
            Returns a string from your INI file
            </summary>
            <param name="Section"></param>
            <param name="Key"></param>
            <param name="Default"></param>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Util.IniFile.WriteString(System.String,System.String,System.String)">
            <summary>
            ' Writes a string to your INI file
            </summary>
            <param name="Section"></param>
            <param name="Key"></param>
            <param name="String"></param>
        </member>
        <member name="T:NAnt.Contrib.Util.SqlHelper">
            <summary>
            Helper class used to execute Sql Statements.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlHelper.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="connectionString">OleDB Connection string</param>
            <param name="useTransaction">True if you want to use a transaction</param>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlHelper.Close(System.Boolean)">
            <summary>
            Close the connection and terminate
            </summary>
            <param name="commit">true if the transaction should be commited</param>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlHelper.Execute(System.String,System.Int32)">
            <summary>
            Executes a SQL statement.
            </summary>
            <param name="sql">SQL statement to execute</param>
            <param name="cmdTimeout">Command timeout to use</param>
            <returns>Data reader used to check the result</returns>
        </member>
        <member name="P:NAnt.Contrib.Util.SqlHelper.Connection">
            <summary>
            OleDB Connection object
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Util.SqlStatementAdapter">
            <summary>
            Helper class to adapt SQL statements from some
            input into something OLEDB can consume directly
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementAdapter.#ctor(NAnt.Contrib.Util.SqlStatementList)">
            <summary>
            Creates a new instance
            </summary>
            
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementAdapter.AdaptSql(System.String)">
            <summary>
            Adapts a set of Sql statements from a string.
            </summary>
            <param name="sql">A string containing the original sql statements</param>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementAdapter.AdaptSqlFile(System.String,System.Text.Encoding)">
            <summary>
            Adapts a set of Sql statements from a string.
            </summary>
            <param name="file">Path of file containing all sql statements</param>
            <param name="encoding">The encoding of the file containing the SQL statements.</param>
            <returns>The new instance</returns>
        </member>
        <member name="T:NAnt.Contrib.Util.DelimiterStyle">
            <summary>
            Determines how the delimiter is interpreted in a SQL string.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Util.DelimiterStyle.Normal">
            <summary>
            Delimiter can appear anywhere on a line.
            </summary>
        </member>
        <member name="F:NAnt.Contrib.Util.DelimiterStyle.Line">
            <summary>
            Delimiter always appears by itself on a line.
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Util.SqlStatementList">
            <summary>
            Helper class to maintain a list of SQL Statements.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementList.#ctor(System.String,NAnt.Contrib.Util.DelimiterStyle)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="delimiter">String that separates statements from each other</param>
            <param name="style">Style of the delimiter</param>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementList.ParseSql(System.String)">
            <summary>
            Parses the SQL into the internal list using the specified delimiter
            and delimiter style
            </summary>
            <param name="sql">The SQL string to parse.</param>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementList.ParseSqlFromFile(System.String,System.Text.Encoding)">
            <summary>
            Parses the contents of the file into the 
            internal list using the specified delimiter
            and delimiter style
            </summary>
            <param name="file">File name</param>
            <param name="encoding">The encoding of the file containing the SQL statements.</param>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementList.GetEnumerator">
            <summary>
            Allows foreach().
            </summary>
            <returns></returns>
        </member>
        <member name="M:NAnt.Contrib.Util.SqlStatementList.ExpandProps(System.String)">
            <summary>
            Expands project properties in the
            sql string
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="P:NAnt.Contrib.Util.SqlStatementList.Count">
            <summary>
            Gets the number of statements in the list.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Util.SqlStatementList.Item(System.Int32)">
            <summary>
            Gets the statement specified by the index.
            </summary>
        </member>
        <member name="P:NAnt.Contrib.Util.SqlStatementList.Properties">
            <summary>
            Project's properties for property expansion
            </summary>
        </member>
        <member name="T:NAnt.Contrib.Functions.ArrayFunctions">
            <summary>
            Provides a set of functions that deals with Arrays.
            </summary>
        </member>
        <member name="M:NAnt.Contrib.Functions.ArrayFunctions.#ctor(NAnt.Core.Project,NAnt.Core.PropertyDictionary)">
            <summary>
            Initializes a new instance of the
            <see cref="T:NAnt.Contrib.Functions.ArrayFunctions"/> class.
            </summary>
            <param name="project">
            Project.
            </param>
            <param name="properties">
            Properties.
            </param>
        </member>
        <member name="M:NAnt.Contrib.Functions.ArrayFunctions.Sort(System.String,System.String)">
            <summary>
            Sorts the items in an array.
            </summary>
            <param name="array">
            The <see cref="T:System.String"/> containing all the array items to sort.
            </param>
            <param name="separator">
            The <see cref="T:System.String"/> used to separate the items in
            <paramref name="array"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="separator"/> is invalid because it
            is empty or <see langword="null"/>.
            </exception>
        </member>
        <member name="M:NAnt.Contrib.Functions.ArrayFunctions.Reverse(System.String,System.String)">
            <summary>
            Reverse the items in an array.
            </summary>
            <param name="array">
            The <see cref="T:System.String"/> containing all the array items to reverse.
            </param>
            <param name="separator">
            The <see cref="T:System.String"/> used to separate the items in
            <paramref name="array"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="separator"/> is invalid because it
            is empty or <see langword="null"/>.
            </exception>
        </member>
        <member name="M:NAnt.Contrib.Functions.ArrayFunctions.StringToArray(System.String,System.String)">
            <summary>
            Converts a <see cref="T:System.String"/> variable to
            an <see cref="T:System.Array"/> based on a value separator.
            </summary>
            <returns>
            The value of <paramref name="array"/> in an <see cref="T:System.Array"/>
            format.
            </returns>
            <param name="array">
            The <see cref="T:System.String"/> to parse to an <see cref="T:System.Array"/>.
            </param>
            <param name="separator">
            The <see cref="T:System.String"/> used to separate the items in
            <paramref name="array"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="separator"/> is invalid because it
            is empty or <see langword="null"/>.
            </exception>
        </member>
    </members>
</doc>
